diff --git a/third-party/proxygen/src/proxygen/lib/http/codec/HTTP2Codec.cpp b/third-party-proxygen/src/proxygen/lib/http/codec/HTTP2Codec.cpp
index 44aae093..9fd26ddb 100644
--- a/third-party/proxygen/src/proxygen/lib/http/codec/HTTP2Codec.cpp
+++ b/third-party-proxygen/src/proxygen/lib/http/codec/HTTP2Codec.cpp
@@ -736,8 +736,7 @@ ErrorCode HTTP2Codec::handleSettings(const std::deque<SettingPair>& settings) {
       case SettingsId::MAX_HEADER_LIST_SIZE:
         break;
       default:
-        // unknown setting
-        break;
+        continue; // ignore unknown setting
     }
     ingressSettings_.setSetting(setting.first, setting.second);
     settingsList.push_back(*ingressSettings_.getSetting(setting.first));
diff --git a/third-party/proxygen/src/proxygen/lib/http/codec/HTTPSettings.h b/third-party-proxygen/src/proxygen/lib/http/codec/HTTPSettings.h
index 0ab61f9e..46d086f4 100644
--- a/third-party/proxygen/src/proxygen/lib/http/codec/HTTPSettings.h
+++ b/third-party-proxygen/src/proxygen/lib/http/codec/HTTPSettings.h
@@ -49,7 +49,7 @@ class HTTPSettings {
   const HTTPSetting* getSetting(SettingsId id) const;
   uint32_t getSetting(SettingsId id, uint32_t defaultVal) const;
   // Note: this does not count disabled settings
-  uint8_t getNumSettings() const { return numSettings_; }
+  std::size_t getNumSettings() const { return numSettings_; }
   // The length of the returned vector may be greater than getNumSettings()
   // TODO: replace this with an iterator that skips disabled settings
   const std::vector<HTTPSetting>& getAllSettings() { return settings_; }
diff --git a/third-party/proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp b/third-party-proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
index 71f14cae..8e112c89 100644
--- a/third-party/proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
+++ b/third-party-proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
@@ -42,6 +42,21 @@ class HTTP2CodecTest : public HTTPParallelCodecTest {
   HTTP2Codec downstreamCodec_{TransportDirection::DOWNSTREAM};
 };
 
+TEST_F(HTTP2CodecTest, IgnoreUnknownSettings) {
+  auto numSettings = downstreamCodec_.getIngressSettings()->getNumSettings();
+  std::deque<SettingPair> settings;
+  for (uint32_t i = 10; i < (10 + 1024); i++) {
+    settings.push_back(SettingPair(proxygen::SettingsId(i), i));
+  }
+  http2::writeSettings(output_, settings);
+  parse();
+
+  EXPECT_EQ(callbacks_.settings, 1);
+  EXPECT_EQ(callbacks_.sessionErrors, 0);
+  EXPECT_EQ(numSettings,
+            downstreamCodec_.getIngressSettings()->getNumSettings());
+}
+
 TEST_F(HTTP2CodecTest, BasicHeader) {
   HTTPMessage req = getGetRequest("/guacamole");
   req.getHeaders().add("user-agent", "coolio");

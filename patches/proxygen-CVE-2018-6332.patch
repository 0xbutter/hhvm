diff --git a/third-party/proxygen/src/proxygen/lib/http/codec/HTTP2Codec.cpp b/third-party-proxygen/src/proxygen/lib/http/codec/HTTP2Codec.cpp
index 1f6a1b7a..845798db 100644
--- a/third-party/proxygen/src/proxygen/lib/http/codec/HTTP2Codec.cpp
+++ b/third-party-proxygen/src/proxygen/lib/http/codec/HTTP2Codec.cpp
@@ -752,8 +752,7 @@ ErrorCode HTTP2Codec::handleSettings(const std::deque<SettingPair>& settings) {
       case SettingsId::MAX_HEADER_LIST_SIZE:
         break;
       default:
-        // unknown setting
-        break;
+        continue; // ignore unknown setting
     }
     ingressSettings_.setSetting(setting.first, setting.second);
     settingsList.push_back(*ingressSettings_.getSetting(setting.first));
diff --git a/third-party/proxygen/src/proxygen/lib/http/codec/HTTPSettings.h b/third-party-proxygen/src/proxygen/lib/http/codec/HTTPSettings.h
index 6e83ed4b..bf691c5f 100644
--- a/third-party/proxygen/src/proxygen/lib/http/codec/HTTPSettings.h
+++ b/third-party-proxygen/src/proxygen/lib/http/codec/HTTPSettings.h
@@ -53,7 +53,7 @@ class HTTPSettings {
   const HTTPSetting* getSetting(SettingsId id) const;
   uint32_t getSetting(SettingsId id, uint32_t defaultVal) const;
   // Note: this does not count disabled settings
-  uint8_t getNumSettings() const { return settings_.size(); }
+  std::size_t getNumSettings() const { return settings_.size(); }
   const std::vector<HTTPSetting>& getAllSettings() { return settings_; }
   void clearSettings() {
     settings_.clear();
diff --git a/third-party/proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp b/third-party-proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
index 97008421..daf3ad15 100644
--- a/third-party/proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
+++ b/third-party-proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
@@ -44,6 +44,21 @@ class HTTP2CodecTest : public HTTPParallelCodecTest {
   HTTP2Codec downstreamCodec_{TransportDirection::DOWNSTREAM};
 };
 
+TEST_F(HTTP2CodecTest, IgnoreUnknownSettings) {
+  auto numSettings = downstreamCodec_.getIngressSettings()->getNumSettings();
+  std::deque<SettingPair> settings;
+  for (uint32_t i = 10; i < (10 + 1024); i++) {
+    settings.push_back(SettingPair(proxygen::SettingsId(i), i));
+  }
+  http2::writeSettings(output_, settings);
+  parse();
+
+  EXPECT_EQ(callbacks_.settings, 1);
+  EXPECT_EQ(callbacks_.sessionErrors, 0);
+  EXPECT_EQ(numSettings,
+            downstreamCodec_.getIngressSettings()->getNumSettings());
+}
+
 TEST_F(HTTP2CodecTest, BasicHeader) {
   HTTPMessage req = getGetRequest("/guacamole");
   req.getHeaders().add(HTTP_HEADER_USER_AGENT, "coolio");

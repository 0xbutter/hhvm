From 5a86b29f56048f635abb443ccc9f1a3dc61b4a9c Mon Sep 17 00:00:00 2001
From: Stepan Palamarchuk <stepan@fb.com>
Date: Tue, 22 Jan 2019 09:54:52 -0800
Subject: [PATCH] Throw on bad types during skipping data

Summary:
The current code silently returns on bad types. In case when we have an invalid data, we may get a container of a large size with a bad type, this would lead to us running long loop doing nothing (though we already can say that the data is invalid).

The new code would throw an exception as soon as we try to skip a value of invalid type.

Fixes CVE-2019-3552

Reviewed By: yfeldblum, stevegury

Differential Revision: D8344920
---
 thrift/lib/cpp/protocol/TProtocolException.cpp |  8 +++
 thrift/lib/cpp/protocol/TProtocolException.h   |  2 +
 thrift/lib/cpp2/protocol/Protocol.h            |  5 +-
 thrift/lib/py/protocol/TProtocol.py            |  5 +-
 thrift/test/ProtocolSkipTest.cpp               | 68 ++++++++++++++++++++++++++
 5 files changed, 85 insertions(+), 3 deletions(-)
 create mode 100644 thrift/test/ProtocolSkipTest.cpp

diff --git a/third-party/thrift/src/thrift/lib/cpp/protocol/TProtocolException.cpp b/third-party/thrift/src/thrift/lib/cpp/protocol/TProtocolException.cpp
index d0ad89450..ab84de2a7 100644
--- a/third-party/thrift/src/thrift/lib/cpp/protocol/TProtocolException.cpp
+++ b/third-party/thrift/src/thrift/lib/cpp/protocol/TProtocolException.cpp
@@ -57,4 +57,12 @@ namespace apache { namespace thrift { namespace protocol {
           "Attempt to interpret value {} as bool, probably the data is corrupted",
           value));
 }
+
+[[noreturn]] void TProtocolException::throwInvalidSkipType(TType type) {
+  throw TProtocolException(
+      TProtocolException::INVALID_DATA,
+      folly::sformat(
+          "Encountered invalid field/element type ({}) during skipping",
+          static_cast<uint8_t>(type)));
+}
 }}}
diff --git a/third-party/thrift/src/thrift/lib/cpp/protocol/TProtocolException.h b/third-party/thrift/src/thrift/lib/cpp/protocol/TProtocolException.h
index 874654fa4..193d25d78 100644
--- a/third-party/thrift/src/thrift/lib/cpp/protocol/TProtocolException.h
+++ b/third-party/thrift/src/thrift/lib/cpp/protocol/TProtocolException.h
@@ -23,6 +23,7 @@
 #define _THRIFT_PROTOCOL_TPROTOCOLEXCEPTION_H_ 1
 
 #include <thrift/lib/cpp/Thrift.h>
+#include <thrift/lib/cpp/protocol/TType.h>
 
 #include <string>
 
@@ -106,6 +107,7 @@ class TProtocolException : public apache::thrift::TLibraryException {
       folly::StringPiece field,
       folly::StringPiece type);
   [[noreturn]] static void throwBoolValueOutOfRange(uint8_t value);
+  [[noreturn]] static void throwInvalidSkipType(TType type);
 
  protected:
   /**
diff --git a/third-party/thrift/src/thrift/lib/cpp2/protocol/Protocol.h b/third-party/thrift/src/thrift/lib/cpp2/protocol/Protocol.h
index d1cc63ed6..033668ac7 100644
--- a/third-party/thrift/src/thrift/lib/cpp2/protocol/Protocol.h
+++ b/third-party/thrift/src/thrift/lib/cpp2/protocol/Protocol.h
@@ -176,8 +176,9 @@ void skip(Protocol_& prot, TType arg_type) {
       prot.readListEnd();
       return;
     }
-    default:
-      return;
+    default: {
+      TProtocolException::throwInvalidSkipType(arg_type);
+    }
   }
 }
 
diff --git a/third-party/thrift/src/thrift/lib/py/protocol/TProtocol.py b/third-party/thrift/src/thrift/lib/py/protocol/TProtocol.py
index a229eb025..f7f55bbe2 100644
--- a/third-party/thrift/src/thrift/lib/py/protocol/TProtocol.py
+++ b/third-party/thrift/src/thrift/lib/py/protocol/TProtocol.py
@@ -178,7 +178,10 @@ class TProtocolBase:
 
     def skip(self, type):
         if type == TType.STOP:
-            return
+            raise TProtocolException(
+                TProtocolException.INVALID_DATA,
+                "Unexpected type for skipping T_STOP"
+            )
         elif type == TType.BOOL:
             self.readBool()
         elif type == TType.BYTE:
diff --git a/third-party/thrift/src/thrift/test/ProtocolSkipTest.cpp b/third-party/thrift/src/thrift/test/ProtocolSkipTest.cpp
new file mode 100644
index 000000000..762ec64a8
--- /dev/null
+++ b/third-party/thrift/src/thrift/test/ProtocolSkipTest.cpp
@@ -0,0 +1,68 @@
+/*
+ * Copyright 2004-present Facebook, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <gtest/gtest.h>
+
+#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
+
+using namespace apache::thrift;
+
+TEST(ProtocolSkipTest, SkipInt) {
+  IOBufQueue queue;
+  CompactProtocolWriter writer;
+  writer.setOutput(&queue);
+  writer.writeI32(123);
+  auto buf = queue.move();
+  CompactProtocolReader reader;
+  reader.setInput(buf.get());
+  reader.skip(TType::T_I32);
+}
+
+TEST(ProtocolSkipTest, SkipStop) {
+  IOBufQueue queue;
+  CompactProtocolWriter writer;
+  writer.setOutput(&queue);
+  writer.writeFieldStop();
+  auto buf = queue.move();
+  CompactProtocolReader reader;
+  reader.setInput(buf.get());
+  bool thrown = false;
+  try {
+    reader.skip(TType::T_STOP);
+  } catch (const TProtocolException& ex) {
+    EXPECT_EQ(TProtocolException::INVALID_DATA, ex.getType());
+    thrown = true;
+  }
+  EXPECT_TRUE(thrown);
+}
+
+TEST(ProtocolSkipTest, SkipStopInContainer) {
+  IOBufQueue queue;
+  CompactProtocolWriter writer;
+  writer.setOutput(&queue);
+  writer.writeListBegin(TType::T_STOP, 1u << 30);
+  auto buf = queue.move();
+  CompactProtocolReader reader;
+  reader.setInput(buf.get());
+  bool thrown = false;
+  try {
+    reader.skip(TType::T_LIST);
+  } catch (const TProtocolException& ex) {
+    EXPECT_EQ(TProtocolException::INVALID_DATA, ex.getType());
+    thrown = true;
+  }
+  EXPECT_TRUE(thrown);
+}
-- 
2.13.5


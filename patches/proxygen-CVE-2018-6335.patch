diff --git a/third-party/proxygen/src/proxygen/lib/http/codec/HTTP2Framer.cpp b/third-party/proxygen/src/proxygen/lib/http/codec/HTTP2Framer.cpp
index c583e88a..985951aa 100644
--- a/third-party/proxygen/src/proxygen/lib/http/codec/HTTP2Framer.cpp
+++ b/third-party/proxygen/src/proxygen/lib/http/codec/HTTP2Framer.cpp
@@ -196,6 +196,7 @@ parsePadding(Cursor& cursor,
   if (header.length < padding) {
     return ErrorCode::PROTOCOL_ERROR;
   } else {
+    header.length -= padding;
     return ErrorCode::NO_ERROR;
   }
 }
@@ -276,7 +277,7 @@ parseData(Cursor& cursor,
   // outPadding is the total number of flow-controlled pad bytes, which
   // includes the length byte, if present.
   outPadding = padding + ((frameHasPadding(header)) ? 1 : 0);
-  cursor.clone(outBuf, header.length - padding);
+  cursor.clone(outBuf, header.length);
   return skipPadding(cursor, padding, kStrictPadding);
 }
 
@@ -324,7 +325,7 @@ parseHeaders(Cursor& cursor,
   } else {
     outPriority = folly::none;
   }
-  cursor.clone(outBuf, header.length - padding);
+  cursor.clone(outBuf, header.length);
   return skipPadding(cursor, padding, kStrictPadding);
 }
 
@@ -409,7 +410,7 @@ parsePushPromise(Cursor& cursor,
   if (header.length < padding) {
     return ErrorCode::PROTOCOL_ERROR;
   }
-  cursor.clone(outBuf, header.length - padding);
+  cursor.clone(outBuf, header.length);
   return skipPadding(cursor, padding, kStrictPadding);
 }
 
diff --git a/third-party/proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp b/third-party/proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
index c07451b4..74fdf34b 100644
--- a/third-party/proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
+++ b/third-party/proxygen/src/proxygen/lib/http/codec/test/HTTP2CodecTest.cpp
@@ -786,15 +786,17 @@ TEST_F(HTTP2CodecTest, MalformedPaddingLength) {
   output_.append(badInput, sizeof(badInput));
   EXPECT_EQ(output_.chainLength(), sizeof(badInput));
 
-  bool caughtException = false;
-  bool parseResult = true;
-  try {
-    parseResult = parse();
-  } catch (const std::exception &e) {
-    caughtException = true;
-  }
-  EXPECT_FALSE(caughtException);
-  EXPECT_FALSE(parseResult);
+  EXPECT_FALSE(parse());
+}
+
+TEST_F(HTTP2CodecTest, MalformedPadding) {
+  const uint8_t badInput[] = {
+    0x00, 0x00, 0x0d, 0x01, 0xbe, 0x63, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x73,
+    0x00, 0x00, 0x06, 0x08, 0x72, 0x00, 0x24, 0x00, 0xfa, 0x4d, 0x0d
+  };
+  output_.append(badInput, sizeof(badInput));
+
+  EXPECT_FALSE(parse());
 }
 
 TEST_F(HTTP2CodecTest, NoAppByte) {
@@ -807,15 +809,7 @@ TEST_F(HTTP2CodecTest, NoAppByte) {
   output_.append(noAppByte, sizeof(noAppByte));
   EXPECT_EQ(output_.chainLength(), sizeof(noAppByte));
 
-  bool caughtException = false;
-  bool parseResult = false;
-  try {
-    parseResult = parse();
-  } catch (const std::exception &e) {
-    caughtException = true;
-  }
-  EXPECT_FALSE(caughtException);
-  EXPECT_TRUE(parseResult);
+  EXPECT_TRUE(parse());
   EXPECT_EQ(callbacks_.messageBegin, 0);
   EXPECT_EQ(callbacks_.headersComplete, 0);
   EXPECT_EQ(callbacks_.messageComplete, 0);

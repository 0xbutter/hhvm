
****************************
* HipHop JIT IR revision 1 *
****************************



Introduction
------------

The HipHop Intermediate Representation (IR) is a typed, in-memory,
static-single-assignment, intermediate-level representation of HHBC
programs used for just in time compilation.

TODO: design goals.



Concepts
--------

Trace: owns all the instructions for one tracelet

Instructions (IRInstruction)

Values (SSATmp)

Types



Instruction Flags
-----------------

HasDest

  The instruction produces a result (destination) value.

  Note that an instruction's destination value may sometimes be the
  same as one of the input values.  (For example, AddElem returns the
  array it took as an input.)

CanCSE

  The instruction is safe to elide through common subexpression
  elimination.

Essential

  Whether the instruction is essential indicates whether it can be
  elided through certain types of optimizations.

  Currently this is just used to flag whether we are allowed to do
  dead code elimination on it.

MemEffects

  Indicates that the instruction has side effects on memory that
  cannot be rolled back.  If this bit isn't set, it means it is ok to
  redo whatever work the instruction did without changing observable
  program behavior.

  This flag is currently unused, but may be used later to share exit
  traces.

CallsNative

  Indicates that the instruction will call a native helper.

  The register allocator uses this to optimize register spills around
  native calls and to bias register allocation toward arguments and
  return values.

ConsumesRC

  The instruction decrefs its sources.

  TODO: explain better

ProducesRC

  The instruction produces an incref'd value.

  This flag is currently unused.

MayModifyRefs

  The instruction may modify inner cells on KindOfRef values.

Rematerializable

  The instruction is a candidate for rematerialization if the the
  register allocator needs to spill its destination.

MayRaiseError

  The instruction may raise an error, and therefore has an implicit
  exit edge.



Instruction set
---------------


1.  Checks

GuardType
GuardRefs


2. Arithmetic

OpAdd
OpSub
OpAnd
OpOr
OpXor
OpMul


3. Type conversions

Conv


4. Boolean predicates

OpGt
OpGte
OpLt
OpLte
OpEq
OpNeq
OpSame
OpNSame
InstanceOfD
NInstanceOfD
IsSet
IsType
IsNSet
IsNType


5. Branches

There is a conditional branch instruction for each predicate above,
to enable generating efficient compare-and-branch instruction sequences.

JmpGt
JmpGte
JmpLt
JmpLte
JmpEq
JmpNeq
JmpZero
JmpNZero
JmpSame
JmpNSame
JmpInstanceOfD
JmpNInstanceOfD
JmpIsSet
JmpIsType
JmpIsNSet
JmpIsNType
Jmp_

ExitWhenSurprised l:Label

  Tests the surprise flags and if they are set, jumps to the
  exit-trace label l.

ExitOnVarEnv s0:StkP l:Label

  Loads the VarEnv slot off the ActRec pointed to by s0.  If it is
  non-zero, jumps to the exit-trace label l.

CheckUninit


6. Reference manipulation

Unbox
Box
UnboxPtr


7. Loads

d:T = LdStack s0:StkP s1:ConstInt [l:Label]

  Loads from s0 at offset s1, and puts the value in d.  If the
  optional label l is specified and the loaded value's type does not
  match T, this instruction does not load into d and transfers control
  to l.

d:T = LdLoc s0:Home [l:Label]

  Loads from the StkP in s0 at the offset in s0.  Used to load locals.
  If the optional label l is supplied and the loaded value's type does
  not match T, this instruction does not load into d and transfers
  control to l.

LdStackAddr
LdLocAddr
LdMemNR
LdPropNR
LdRefNR
LdThis
LdThisNc

d:Home = LdHome s0:StkP s1:ConstInt

  Logically packages the location of a pointer into the VM stack and
  an offset.  s0 will usually be the output of a DefFP.

LdConst
DefConst
LdCls
LdClsCns
LdClsMethodCache
LdClsMethod
LdPropAddr
LdClsPropAddr
LdObjMethod
LdObjClass
LdCachedClass
LdFunc
LdFixedFunc
LdCurFuncPtr
LdARFuncPtr
LdFuncCls
LdRaw


8. Allocation

NewObj
NewArray
NewTuple


9. Call & Return

d:StkP = AllocActRec s0:StkP

  Allocate an activation record from the stack pointed to by s0 and
  return the result.

d:StkP = FreeActRec s0:StkP

  Load the saved frame pointer from the activation record pointed to
  by s0 into d.

Call
NativeImpl

d:RetAddr = LdRetAddr s0:StkP

  Load the return address off the activation record pointed to by s0
  in preparation for a RetCtrl.

RetCtrl s0:StkP s1:StkP s2:RetAddr

  Ensure that s0 is stored in rVmSp and s1 is stored in rVmFp and then
  execute a hardware procedure-return using the return address
  specified by s2.

RetVal s0:StkP s1:T

  Writes the value in s1 to the return value slot on the activation
  record pointed to by s0.

d:StkP = RetAdjustStack s0:StkP

  Loads the new VM stack pointer into the destination.  s0 is a
  pointer to the current activation record.

ReleaseVVOrExit s0:StkP l:Label

  Loads the VarEnv slot off the ActRec pointed to by s0.  If it is
  null, does nothing.  If it is an ExtraArgs, deallocates the
  ExtraArgs structure.  Otherwise jumps to the exit-trace label l.

d:StkP = GenericRetDecRefs s0:StkP s1:T s2:ConstInt

  Does decrefs of all the current function's locals, where s0 is a
  pointer to the relevant activation record, and s2 is the number of
  locals in the current function.

  s1 is the return value for the function, which GenericRetDecRefs
  needs access to currently only to ensure it isn't clobbered.

  Returns the adjusted VM stack pointer (pointing at the return value
  location).

  Semantically similar to a series of DecRefLoc followed by
  RetAdjustStack.  Note that this does not store the return value even
  though it takes it as a source.


10. Stores

StMem
StMemNT
StProp
StPropNT
StLoc
StLocNT
StRef
StRefNT
StRaw
SpillStack
SpillStackAllocAR


11. Trace exits

ExitTrace
ExitTraceCc
ExitSlow
ExitSlowNoProgress
ExitGuardFailure


12. Refcounting and copies

Mov
IncRef
DecRefLoc
DecRefStack
DecRefThis
DecRef
DecRefNZ
DefLabel


13. Misc

Marker

d:StkP = DefFP

  Creates a temporary d representing the current vm frame pointer.

d:StkP = DefSP

  Creates a temporary d representing the current vm stack pointer.


14. Runtime helpers

RaiseUninitWarning
Print
AddElem
AddNewElem
DefCns
Concat
ArrayAdd
DefCls
DefFunc
InterpOne


15. Register allocation

d:T = Spill s0:T

  Stores s0 to a spill location specified by the destination.  The
  destination temporary will not have registers allocated to it.

d:T = Reload s0:T

  Loads from a spilled temporary s0, and stores the result in d.

AllocSpill s0:ConstInt

  Allocates s0 slots of additional spill space on the stack.
  Generated when the preallocated spill space is exhausted.

FreeSpill s0:ConstInt

  Deallocates s0 slots of spill space on the stack.

16. Continuations

CreateCont
FillContLocals
FillContThis
UnlinkContVarEnv
LinkContVarEnv
ContRaiseCheck
ContPreNext
ContStartedCheck


17. Debugging and instrumentation

IncStat
AssertRefCount


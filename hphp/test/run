#!/bin/env php
<?php
/**
* Run the test suites in various configurations.
*/

function usage() {
  global $argv;
  return "  $argv[0] [-m jit|hhir|interp] [-r] <tests/directories>";
}

function help() {
  global $argv;
  $help = <<<EOT

  # Examples

  Quick tests in JIT mode:
    $argv[0]

  Quick tests in HHIR mode:
    $argv[0] -m hhir

  Slow tests in interp mode:
    $argv[0] -m interp test/slow

  Slow closure tests in JIT mode:
    $argv[0] test/slow/closure

  Slow closure tests in JIT mode with RepoAuthoritative:
    $argv[0] -r test/slow/closure

  Zend tests with a "z" in their name:
    $argv[0] test/zend/good/*/*z*.php
EOT;
  return usage().$help;
}

function error($message) {
  echo "$message\n";
  exit(1);
}

if (!isset($_ENV['HPHP_HOME'])) {
  error("HPHP_HOME must be set in your environment");
}

function idx($array, $key, $default = null) {
  return isset($array[$key]) ? $array[$key] : $default;
}

function idx_file($array, $key, $default = null) {
  return is_file(idx($array, $key)) ? realpath($array[$key]) : $default;
}

function bin_root() {
  return idx($_ENV, 'FBMAKE_BIN_ROOT', $_ENV['HPHP_HOME'].'/_bin');
}

function get_options($argv) {
  $parameters = array(
    'r' => 'repo',
    'm:' => 'mode:',
    '' => 'server',
    'h' => 'help',
  );
  $options = array();
  $files = array();
  for ($i = 1; $i < count($argv); $i++) {
    $arg = $argv[$i];
    $found = false;
    if ($arg && $arg[0] == '-') {
      foreach ($parameters as $short => $long) {
        if ($arg == '-'.str_replace(':', '', $short) ||
            $arg == '--'.str_replace(':', '', $long)) {
          if (substr($long, -1, 1) == ':') {
            $value = $argv[++$i];
          } else {
            $value = true;
          }
          $options[str_replace(':', '', $long)] = $value;
          $found = true;
          break;
        }
      }
    }
    if (!$found && $arg) {
      $files[] = $arg;
    }
  }
  return array($options, $files);
}

function find_tests($files) {
  if (!$files) {
    $files = array($_ENV['HPHP_HOME'].'/hphp/test/quick');
  }
  foreach ($files as &$file) {
    if (!stat($file)) {
      if ($file == 'jit' || $file == 'hhir' || $file == 'interp') {
        error(
          "I'm really sorry to change this, but now the mode is ".
          "passed with '-m $file', and repo mode is turned on with '-r'"
        );
      }
      error("Not valid file or directory: '$file'");
    }
    $file = preg_replace(',//+,', '/', realpath($file));
    $file = preg_replace(',^'.getcwd().'/,', '', $file);
  }
  $files = implode(' ', $files);
  $tests = explode("\n", shell_exec("find $files -name *.php -o -name *.hhas"));
  if (!$tests) {
    error(usage());
  }
  asort($tests);
  return array_filter($tests);
}

function find_config($tests, $name) {
  $dirs = array_map('dirname', $tests);
  $configs = array_map(function($test) use ($name) {
    return find_config_for_dir($test, $name);
  }, $tests);
  $configs = array_unique($configs);
  if (!count($configs) == 1) {
    error(
      "These tests would use many different configs and we only support ".
      "using one for all the tests. Need these configs: ".
      implode(' ', $configs).""
    );
  }
  return array_values($configs)[0];
}

function find_config_for_dir($dir, $name) {
  while ($dir && stat($dir)) {
    $config = "$dir/$name";
    if (is_file($config)) {
      return $config;
    }
    $dir = substr($dir, 0, strrpos($dir, '/'));
  }
  return $name;
}

function is_server($options) {
  return idx($options, 'server');
}

function file_arg($options) {
  if (is_server($options)) {
    return '-m server -v Server.SourceRoot=%s -p %s';
  } else {
    return '--file %3\$s';
  }
}

function mode_arg($options) {
  $verify_hhbc = idx_file($_ENV, 'VERIFY_HHBC', bin_root().'/verify.hhbc');
  $repo_args = "-v Repo.Local.Mode=-- -v Repo.Central.Path=$verify_hhbc";
  $jit_args = "$repo_args -v Eval.Jit=true -v Eval.JitEnableRenameFunction=true";
  $mode = idx($options, 'mode');
  switch ($mode) {
    case '':
    case 'jit':
      return $jit_args;
    case 'hhir':
      return "$jit_args -v Eval.JitUseIR=true -v Eval.HHIRDisableTx64=true";
    case 'interp':
      return "$repo_args -v Eval.Jit=false";
    default:
      error("-m must be one of hhir | jit | interp. Got: '$mode'");
  }
}

function command_arg($options, $tests) {
  return array(
    idx_file($_ENV, 'HHVM', bin_root().'/hphp/hhvm/hhvm'),
    '--config',
    find_config($tests, 'config.hdf'),
    file_arg($options),
    mode_arg($options),
  );
}

function hphp_arg($options, $tests) {
  return array(
    idx_file($_ENV, 'HPHP', bin_root().'/hphp/hhvm/hphp'),
    '--config',
    find_config($tests, 'hphp_config.hdf'),
  );
}

function verify_args($options) {
  $args = array();
  if (is_server($options)) {
    $args[] = '--server --port 8080 --home .';
  }
  $args[] = "--hhvm";
  $args[] = idx_file($_ENV, 'HHVM',bin_root().'/hphp/hhvm/hhvm');
  if (isset($options['repo'])) {
    $args[] = '--repo 1';
  } else {
    $args[] = '--repo 0';
  }
  return $args;
}

list($options, $files) = get_options($argv);
if (isset($options['help'])) {
  error(help());
}
$tests = find_tests($files);

$verify = array(
  $_ENV['HPHP_HOME'].'/hphp/test/verify',
  '--command="'.implode(' ', command_arg($options, $tests)).'"',
  implode(' ', verify_args($options)),
  '--hphp="'.implode(' ', hphp_arg($options, $tests)).'"',
  implode(' ', $tests),
);

passthru(implode(' ', $verify), $return_status);
exit($return_status);

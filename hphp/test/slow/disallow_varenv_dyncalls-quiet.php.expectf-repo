Running test_compact_dyncall() #1....
compact() is deprecated and subject to removal from the Hack language in disallow_varenv_dyncalls.inc at line 14
array(2) {
  ["var1"]=>
  int(100)
  ["var2"]=>
  int(200)
}
test_compact_dyncall() done
Running test_compact_dyncall() #2....
compact() is deprecated and subject to removal from the Hack language in disallow_varenv_dyncalls.inc at line 14
array(2) {
  ["var1"]=>
  int(100)
  ["var2"]=>
  int(200)
}
test_compact_dyncall() done
Running test_compact_cuf() #1....
compact() is deprecated and subject to removal from the Hack language in disallow_varenv_dyncalls.inc at line 21
array(2) {
  ["var1"]=>
  int(100)
  ["var2"]=>
  int(200)
}
test_compact_cuf() done
Running test_compact_cuf() #2....
compact() is deprecated and subject to removal from the Hack language in disallow_varenv_dyncalls.inc at line 21
array(2) {
  ["var1"]=>
  int(100)
  ["var2"]=>
  int(200)
}
test_compact_cuf() done
Running test_compact_cuf_array() #1....
compact() is deprecated and subject to removal from the Hack language in disallow_varenv_dyncalls.inc at line 28
array(2) {
  ["var1"]=>
  int(100)
  ["var2"]=>
  int(200)
}
test_compact_cuf_array() done
Running test_compact_cuf_array() #2....
compact() is deprecated and subject to removal from the Hack language in disallow_varenv_dyncalls.inc at line 28
array(2) {
  ["var1"]=>
  int(100)
  ["var2"]=>
  int(200)
}
test_compact_cuf_array() done
Running test_compact_map() #1....
compact() is deprecated and subject to removal from the Hack language in disallow_varenv_dyncalls.inc at line 35
array(1) {
  [0]=>
  array(2) {
    ["var1"]=>
    int(100)
    ["var2"]=>
    int(200)
  }
}
test_compact_map() done
Running test_compact_map() #2....
compact() is deprecated and subject to removal from the Hack language in disallow_varenv_dyncalls.inc at line 35
array(1) {
  [0]=>
  array(2) {
    ["var1"]=>
    int(100)
    ["var2"]=>
    int(200)
  }
}
test_compact_map() done
Running test_compact_errors() #1....
compact() expects exactly 1 parameter, 0 given in disallow_varenv_dyncalls.inc at line %d
compact() expects exactly 1 parameter, 0 given in disallow_varenv_dyncalls.inc at line %d
compact() expects exactly 1 parameter, 0 given in disallow_varenv_dyncalls.inc at line %d
test_compact_errors() done
Running test_compact_errors() #2....
compact() expects exactly 1 parameter, 0 given in disallow_varenv_dyncalls.inc at line %d
compact() expects exactly 1 parameter, 0 given in disallow_varenv_dyncalls.inc at line %d
compact() expects exactly 1 parameter, 0 given in disallow_varenv_dyncalls.inc at line %d
test_compact_errors() done
Running test_getargs_dyncall() #1....
array(3) {
  [0]=>
  int(100)
  [1]=>
  string(3) "abc"
  [2]=>
  bool(false)
}
test_getargs_dyncall() done
Running test_getargs_dyncall() #2....
array(3) {
  [0]=>
  int(100)
  [1]=>
  string(3) "abc"
  [2]=>
  bool(false)
}
test_getargs_dyncall() done
Running test_getargs_cuf() #1....
array(3) {
  [0]=>
  int(100)
  [1]=>
  string(3) "abc"
  [2]=>
  bool(false)
}
test_getargs_cuf() done
Running test_getargs_cuf() #2....
array(3) {
  [0]=>
  int(100)
  [1]=>
  string(3) "abc"
  [2]=>
  bool(false)
}
test_getargs_cuf() done
Running test_getargs_cuf_array() #1....
array(3) {
  [0]=>
  int(100)
  [1]=>
  string(3) "abc"
  [2]=>
  bool(false)
}
test_getargs_cuf_array() done
Running test_getargs_cuf_array() #2....
array(3) {
  [0]=>
  int(100)
  [1]=>
  string(3) "abc"
  [2]=>
  bool(false)
}
test_getargs_cuf_array() done
Running test_getargs_errors() #1....
func_get_args() expects exactly 0 parameters, 3 given in disallow_varenv_dyncalls.inc at line %d
func_get_args() expects exactly 0 parameters, 1 given in disallow_varenv_dyncalls.inc at line %d
test_getargs_errors() done
Running test_getargs_errors() #2....
func_get_args() expects exactly 0 parameters, 3 given in disallow_varenv_dyncalls.inc at line %d
func_get_args() expects exactly 0 parameters, 1 given in disallow_varenv_dyncalls.inc at line %d
test_getargs_errors() done

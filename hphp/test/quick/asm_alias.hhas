# Test declaring type aliases

.main {
  DefCls 0
  DefTypeAlias 0
  DefTypeAlias 1
  DefTypeAlias 2
  DefTypeAlias 3

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "foo"
  Int 0
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "foo"
  String "hi"
  FCall <> 1 1 "" - "" ""
  PopC

  NewObjD "C"
  Dup
  NullUninit
  NullUninit
  FPushCtor 0
  FCall <> 0 1 "" - "" ""
  PopC
  SetL $x
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "bar"
  CGetL $x
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "bar"
  String "hi"
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "bar"
  Null
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "baz"
  CGetL $x
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "baz"
  String "hi"
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "baz"
  Null
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "quux"
  CGetL $x
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "quux"
  String "hi"
  FCall <> 1 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 1 "quux"
  Null
  FCall <> 1 1 "" - "" ""
  PopC

  Int 1
  RetC
}

.function foo(<"@Foo" "Foo" hh_type extended_hint soft > $x) {
  VerifyParamType $x
  Null
  RetC
}

.function bar(<"@Bar" "Bar" hh_type extended_hint soft > $x) {
  VerifyParamType $x
  Null
  RetC
}

.function baz(<"@Baz" "Baz" hh_type extended_hint soft > $x) {
  VerifyParamType $x
  Null
  RetC
}

.function quux(<"@Quux" "Quux" hh_type extended_hint soft > $x) {
  VerifyParamType $x
  Null
  RetC
}

.class C {
}

.alias Foo = <"HH\\int">;
.alias Bar = <"C">;
.alias Baz = <"C" nullable>;
.alias Quux = <N>;

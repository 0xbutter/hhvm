EXTRA_INCLUDE_PATHS=
EXTRA_LIB_PATHS=
EXTRA_NATIVE_LIBRARIES=
BYTECODE=

ROOT=$(shell pwd)

################################################################################
#                                    Rules                                     #
################################################################################

.NOTPARALLEL:

all: build-hack copy-hack-files

debug: build-hack-debug copy-hack-debug-files

clean:
	find ./bin -mindepth 1 -not -path ./bin/README -delete
	rm -f $(ROOT)/src/utils/get_build_id.gen.c
	rm -f $(ROOT)/src/options/default_buildOptions.ml
	dune clean

# First argument is the extension to use.
# Second argument is a suffix for the rules name. Optional
#
# The only supported configuration are:
# 1=exe 2=        (literaly nothing, not even a space)
# 1=bc 2=-debug
define build_hack
$(eval ext := $(if $(filter $(2),-debug),".bc",""))
build-hack$(2): _build/default/src/utils/get_build_id.gen.c
	dune build \
		src/hh_server.$(1) \
		src/hh_client.$(1) \
		src/hh_single_type_check.$(1) \
		src/hackfmt.$(1) \
		src/hh_parse.$(1) \
		src/hh_single_compile.$(1) \
		src/hh_single_parse.$(1)

copy-hack$(2)-files: build-hack$(2)
	mkdir -p bin
	cp _build/default/src/hh_server.$(1) ./bin/hh_server$(ext)
	cp _build/default/src/hh_client.$(1) ./bin/hh_client$(ext)
	cp _build/default/src/hh_single_type_check.$(1) ./bin/hh_single_type_check$(ext)
	cp _build/default/src/hackfmt.$(1) ./bin/hackfmt$(ext)
	cp _build/default/src/hh_parse.$(1) ./bin/hh_parse$(ext)
	cp _build/default/src/hh_single_compile.$(1) ./bin/hh_single_compile$(ext)
	cp _build/default/src/hh_single_parse.$(1) ./bin/hh_single_parse$(ext)
endef

# Define rules for normal build / debug build
# The name of the rules is important as it matches what is expected by cmake
$(eval $(call build_hack,exe,))
$(eval $(call build_hack,bc,-debug))


_build/default/src/utils/get_build_id.gen.c:
	cd $(ROOT) && \
        $(OCAML) -I scripts -w -3 -unsafe-string unix.cma scripts/gen_build_id.ml src/utils/get_build_id.gen.c


.PHONY: test do-test
test: build-hack copy-hack-files
	$(MAKE) -f Makefile.dune do-test

do-test:
	dune runtest
	# python3 ./test/integration/runner.py ./bin/hh_server ./bin/hh_client

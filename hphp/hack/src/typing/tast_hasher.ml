(**
* Copyright (c) 2018, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the "hack" directory of this source tree.
*
*)

(* This Tast visitor is made for the idea that most uses will only care
 * about certain info captured with the following:
 *  a map from 'a to 'b determined by certain expressions
 *  and a map from 'b to some associated count
 *
 * To that end, integrate_expr will determine the effects of a new
 * expr on the maps generated by its children
 *)

(*************************************************************
 Some useful functions
 *************************************************************)

(* increments the count of a mapping *)
let count_inc count key =
  if Hashtbl.mem count key
  then Hashtbl.replace count key (Hashtbl.find count key)
  else Hashtbl.add count key 1

(* returns the count of a mapping *)
let get_count count key =
  if Hashtbl.mem count key
  then Hashtbl.find count key
  else 0

(* merges count maps, adding their counts *)
let count_merge count1 count2 =
  Hashtbl.iter (fun b n ->
    if Hashtbl.mem count1 b
    then Hashtbl.replace count1 b (n + Hashtbl.find count1 b)
    else Hashtbl.add count1 b n
  ) count2

(* merges 'a 'b maps, giving mapping priority to the second arg *)
let tbl_merge tbl1 tbl2 =
  Hashtbl.iter (fun a b -> Hashtbl.replace tbl1 a b) tbl2

(* the plus used within the visitor, accessible here without a class instance *)
let plus (tbl1, count1) (tbl2, count2) =
  tbl_merge tbl1 tbl2;
  count_merge count1 count2;
  tbl1, count1

(*************************************************************
 The visitor class
 *************************************************************)

class ['a, 'b] hasher integrate_expr =
  object
    inherit [('a, 'b) Hashtbl.t * ('b, int) Hashtbl.t]
      Tast_visitor.reduce as super
    method zero = Hashtbl.create 0, Hashtbl.create 0
    method plus = plus
    method! on_expr env expr =
       integrate_expr (super#on_expr env expr) expr
  end

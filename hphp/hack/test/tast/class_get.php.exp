[(Class
    { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
      c_final = false; c_is_xhp = false; c_kind = Ast_defs.Cnormal;
      c_name = ([12:7-16], "\\TestClass"); c_tparams = <opaque>;
      c_extends = []; c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
      c_req_extends = []; c_req_implements = []; c_implements = [];
      c_consts = []; c_typeconsts = [];
      c_static_vars =
      [{ Aast.AnnotatedAST.cv_final = false; cv_is_xhp = false;
         cv_visibility = Aast_defs.Private;
         cv_type =
         (Some ([13:18-22],
                (Aast_defs.Hoption
                   ([13:19-22], (Aast_defs.Hprim Aast_defs.Tint)))));
         cv_id = ([13:23-25], "x");
         cv_expr = (Some (([13:28-32], ?_), Null)); cv_user_attributes = [] }
        ];
      c_vars = []; c_constructor = None;
      c_static_methods =
      [{ Aast.AnnotatedAST.m_annotation = (); m_final = false;
         m_abstract = false; m_visibility = Aast_defs.Public;
         m_name = ([15:26-29], "get"); m_tparams = [];
         m_where_constraints = []; m_variadic = FVnonVariadic; m_params = [];
         m_body =
         (NamedBody
            { Aast.AnnotatedAST.fnb_nast =
              [(If (
                  (([16:9-17], ?int),
                   (Class_get ((TestClass, CIself), ([16:15-17], "$x")))),
                  [(Return ([17:7-23],
                      (Some (([17:14-22], int),
                             (Class_get ((TestClass, CIself),
                                ([17:20-22], "$x")))))
                      ))
                    ],
                  [(Return ([19:7-16],
                      (Some (([19:14-15], int), (Int ([19:14-15], "0"))))))
                    ]
                  ))
                ];
              fnb_unsafe = false });
         m_fun_kind = Ast_defs.FSync; m_user_attributes = [];
         m_ret = (Some ([15:33-36], (Aast_defs.Hprim Aast_defs.Tint)));
         m_ret_by_ref = false }
        ];
      c_methods = []; c_user_attributes = []; c_enum = None })
  ]

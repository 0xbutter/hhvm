[(Fun
    { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([8:22-26], (Hprim Tvoid)));
      f_name = ([8:10-14], "\\test"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic;
      f_params =
      [{ Aast.AnnotatedAST.param_annotation = ([8:17-19], C);
         param_hint = (Some ([8:15-16], (Happly (([8:15-16], "\\C"), []))));
         param_is_reference = false; param_is_variadic = false;
         param_pos = [8:17-19]; param_name = "$c"; param_expr = None;
         param_callconv = None; param_user_attributes = [] }
        ];
      f_body =
      (NamedBody
         { Aast.AnnotatedAST.fnb_nast =
           [(Expr
               (([9:3-7], void),
                (Call (Cnormal, (([9:3-7], _), (Id ([9:3-7], "echo"))), 
                   [], [(([9:7-14], string), (String ([9:8-13], "foo")))], 
                   []))));
             (Expr
                (([10:3-8], void),
                 (Call (Cnormal, (([10:3-8], _), (Id ([10:3-8], "echo"))),
                    [], [(([10:8-15], string), (String ([10:9-14], "foo")))],
                    []))));
             (Expr
                (([12:3-15], void),
                 (Assert (AE_assert (([12:10-14], bool), True)))));
             (If (
                (([13:13-17], bool),
                 (Unop (Unot, (([13:13-17], bool), True)))),
                [(Expr
                    (([13:3-25], noreturn),
                     (Call (Cnormal,
                        (([13:3-12], (function(HH\FormatString<PlainSprintf> $fmt, ...): noreturn)),
                         (Id ([13:3-12], "\\invariant_violation"))),
                        [],
                        [(([13:19-24], string), (String ([13:19-24], "foo")))
                          ],
                        []))))
                  ],
                [Noop]));
             (Expr
                (([14:3-29], noreturn),
                 (Call (Cnormal,
                    (([14:3-22], (function(HH\FormatString<PlainSprintf> $fmt, ...): noreturn)),
                     (Id ([14:3-22], "\\invariant_violation"))),
                    [],
                    [(([14:23-28], string), (String ([14:23-28], "foo")))],
                    []))));
             (Expr
                (([16:3-14], (function(C $c): void)),
                 (Fun_id ([16:7-13], "\\test"))));
             (Expr
                (([17:3-36], (function(): void)),
                 (Smethod_id (([17:14-15], "\\C"), ([17:24-35], "staticFoo")
                    ))));
             (Expr
                (([18:3-31], (function(): void)),
                 (Method_id ((([18:13-15], C), (Lvar ([18:13-15], $c))),
                    ([18:17-30], "instanceFoo")))));
             (Expr
                (([19:3-39], (function(C): void)),
                 (Method_caller (([19:15-16], "\\C"),
                    ([19:25-38], "instanceFoo")))));
             (Expr
                (([21:3-12], bool),
                 (Call (Cnormal,
                    (([21:3-8], (function($x): bool)),
                     (Id ([21:3-8], "\\empty"))),
                    [], [(([21:9-11], C), (Lvar ([21:9-11], $c)))], []))));
             (Expr
                (([22:3-12], bool),
                 (Call (Cnormal,
                    (([22:3-8], (function($x): bool)),
                     (Id ([22:3-8], "\\isset"))),
                    [], [(([22:9-11], C), (Lvar ([22:9-11], $c)))], []))));
             (Expr
                (([23:3-12], void),
                 (Call (Cnormal,
                    (([23:3-8], (function($x): void)),
                     (Id ([23:3-8], "\\unset"))),
                    [], [(([23:9-11], C), (Lvar ([23:9-11], $c)))], []))))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false });
  (Fun
     { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
       f_ret = (Some ([27:21-25], (Hprim Tvoid)));
       f_name = ([27:10-17], "\\rx_test"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
       f_body =
       (NamedBody
          { Aast.AnnotatedAST.fnb_nast =
            [(Expr
                (([28:3-15], C),
                 (Binop ((Eq None), (([28:3-5], C), (Lvar ([28:3-5], $c))),
                    (([28:8-15], C),
                     (New ((C, (CI (([28:12-13], "\\C"), []))), [], [])))
                    ))));
              (Expr
                 (([29:3-20], void),
                  (Call (Cnormal,
                     (([29:3-16], (function($x): void)),
                      (Id ([29:3-16], "\\HH\\Rx\\freeze"))),
                     [], [(([29:17-19], C), (Lvar ([29:17-19], $c)))], 
                     []))))
              ];
            fnb_unsafe = false });
       f_fun_kind = FSync;
       f_user_attributes =
       [{ Aast.AnnotatedAST.ua_name = ([26:3-7], "__Rx"); ua_params = [] }];
       f_ret_by_ref = false });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([3:7-8], "\\C"); c_tparams = <opaque>; c_extends = [];
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
       c_req_extends = []; c_req_implements = []; c_implements = [];
       c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None;
       c_static_methods =
       [{ Aast.AnnotatedAST.m_annotation = (); m_final = false;
          m_abstract = false; m_visibility = Public;
          m_name = ([4:26-35], "staticFoo"); m_tparams = [];
          m_where_constraints = []; m_variadic = FVnonVariadic;
          m_params = [];
          m_body =
          (NamedBody
             { Aast.AnnotatedAST.fnb_nast = [Noop]; fnb_unsafe = false });
          m_fun_kind = FSync; m_user_attributes = [];
          m_ret = (Some ([4:39-43], (Hprim Tvoid))); m_ret_by_ref = false }
         ];
       c_methods =
       [{ Aast.AnnotatedAST.m_annotation = (); m_final = false;
          m_abstract = false; m_visibility = Public;
          m_name = ([5:19-30], "instanceFoo"); m_tparams = [];
          m_where_constraints = []; m_variadic = FVnonVariadic;
          m_params = [];
          m_body =
          (NamedBody
             { Aast.AnnotatedAST.fnb_nast = [Noop]; fnb_unsafe = false });
          m_fun_kind = FSync; m_user_attributes = [];
          m_ret = (Some ([5:34-38], (Hprim Tvoid))); m_ret_by_ref = false }
         ];
       c_user_attributes = []; c_enum = None })
  ]

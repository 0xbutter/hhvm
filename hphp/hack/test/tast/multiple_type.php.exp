[(AnnotatedAST.Fun
    { AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([16:44-16:52], (Hprim Tarraykey)));
      f_name = ([16:10-16:14], "\\test"); f_tparams = [];
      f_where_constraints = []; f_variadic = AnnotatedAST.FVnonVariadic;
      f_params =
      [{ AnnotatedAST.param_annotation = ([16:18-16:21], Some \C1);
         param_hint =
         (Some ([16:15-16:17], (Happly (([16:15-16:17], "\\C1"), []))));
         param_is_reference = false; param_is_variadic = false;
         param_pos = [16:18-16:21]; param_name = "$c1"; param_expr = None;
         param_callconv = None; param_user_attributes = [] };
        { AnnotatedAST.param_annotation = ([16:26-16:29], Some \C2);
          param_hint =
          (Some ([16:23-16:25], (Happly (([16:23-16:25], "\\C2"), []))));
          param_is_reference = false; param_is_variadic = false;
          param_pos = [16:26-16:29]; param_name = "$c2"; param_expr = None;
          param_callconv = None; param_user_attributes = [] };
        { AnnotatedAST.param_annotation = ([16:36-16:41], Some bool);
          param_hint = (Some ([16:31-16:35], (Hprim Tbool)));
          param_is_reference = false; param_is_variadic = false;
          param_pos = [16:36-16:41]; param_name = "$cond"; param_expr = None;
          param_callconv = None; param_user_attributes = [] }
        ];
      f_body =
      (AnnotatedAST.NamedBody
         { AnnotatedAST.fnb_nast =
           [(AnnotatedAST.Expr
               (([17:3-17:25], Some (\C1 | \C2)),
                (AnnotatedAST.Binop ((Eq None),
                   (([17:3-17:5], Some (\C1 | \C2)),
                    (AnnotatedAST.Lvar ([17:3-17:5], $x))),
                   (([17:8-17:25], Some (\C1 | \C2)),
                    (AnnotatedAST.Eif (
                       (([17:8-17:13], Some bool),
                        (AnnotatedAST.Lvar ([17:8-17:13], $cond))),
                       (Some (([17:16-17:19], Some \C1),
                              (AnnotatedAST.Lvar ([17:16-17:19], $c1)))),
                       (([17:22-17:25], Some \C2),
                        (AnnotatedAST.Lvar ([17:22-17:25], $c2)))
                       )))
                   ))));
             (AnnotatedAST.Return ([18:3-18:20],
                (Some (([18:10-18:19], Some (int | string)),
                       (AnnotatedAST.Call (Cnormal,
                          (([18:10-18:17], Some ((function(): string) | (function(): int))),
                           (AnnotatedAST.Obj_get (
                              (([18:10-18:12], Some (\C1 | \C2)),
                               (AnnotatedAST.Lvar ([18:10-18:12], $x))),
                              (([18:14-18:17], Some ((function(): string) | (function(): int))),
                               (AnnotatedAST.Id ([18:14-18:17], "foo"))),
                              OG_nullthrows))),
                          [], [], []))))
                ))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false });
  (AnnotatedAST.Class
     { AnnotatedAST.c_annotation = (); c_mode = <opaque>; c_final = false;
       c_is_xhp = false; c_kind = Cnormal; c_name = ([4:7-4:9], "\\C1");
       c_tparams = <opaque>; c_extends = []; c_uses = [];
       c_xhp_attr_uses = []; c_xhp_category = []; c_req_extends = [];
       c_req_implements = []; c_implements = []; c_consts = [];
       c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = [];
       c_methods =
       [{ AnnotatedAST.m_annotation = (); m_final = false;
          m_abstract = false; m_visibility = Public;
          m_name = ([5:19-5:22], "foo"); m_tparams = [];
          m_where_constraints = []; m_variadic = AnnotatedAST.FVnonVariadic;
          m_params = [];
          m_body =
          (AnnotatedAST.NamedBody
             { AnnotatedAST.fnb_nast =
               [(AnnotatedAST.Return ([6:5-6:14],
                   (Some (([6:12-6:13], Some int),
                          (AnnotatedAST.Int ([6:12-6:13], "5"))))
                   ))
                 ];
               fnb_unsafe = false });
          m_fun_kind = FSync; m_user_attributes = [];
          m_ret = (Some ([5:26-5:29], (Hprim Tint))); m_ret_by_ref = false }
         ];
       c_user_attributes = []; c_enum = None });
  (AnnotatedAST.Class
     { AnnotatedAST.c_annotation = (); c_mode = <opaque>; c_final = false;
       c_is_xhp = false; c_kind = Cnormal; c_name = ([10:7-10:9], "\\C2");
       c_tparams = <opaque>; c_extends = []; c_uses = [];
       c_xhp_attr_uses = []; c_xhp_category = []; c_req_extends = [];
       c_req_implements = []; c_implements = []; c_consts = [];
       c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = [];
       c_methods =
       [{ AnnotatedAST.m_annotation = (); m_final = false;
          m_abstract = false; m_visibility = Public;
          m_name = ([11:19-11:22], "foo"); m_tparams = [];
          m_where_constraints = []; m_variadic = AnnotatedAST.FVnonVariadic;
          m_params = [];
          m_body =
          (AnnotatedAST.NamedBody
             { AnnotatedAST.fnb_nast =
               [(AnnotatedAST.Return ([12:5-12:16],
                   (Some (([12:12-12:15], Some string),
                          (AnnotatedAST.String ([12:12-12:15], "s"))))
                   ))
                 ];
               fnb_unsafe = false });
          m_fun_kind = FSync; m_user_attributes = [];
          m_ret = (Some ([11:26-11:32], (Hprim Tstring)));
          m_ret_by_ref = false }
         ];
       c_user_attributes = []; c_enum = None })
  ]

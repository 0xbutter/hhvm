Errors:
  [24:13-34] Bad regex pattern; two named subpatterns have the same name [14].
  [25:13-28] Bad regex pattern; group name must start with a non-digit [5].
  [26:13-17] Bad regex pattern; \c at end of pattern [2].
[(Fun
    { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([3:15-19], (Hprim Tvoid))); f_name = ([3:10-11], "\\f");
      f_tparams = []; f_where_constraints = []; f_variadic = FVnonVariadic;
      f_params = [];
      f_body =
      (NamedBody
         { Aast.AnnotatedAST.fnb_nast =
           [(Expr
               (([4:3-17], HH\Lib\Regex\Pattern<shape('0' => string)>),
                (Binop ((Eq None),
                   (([4:3-5], HH\Lib\Regex\Pattern<shape('0' => string)>),
                    (Lvar ([4:3-5], $x))),
                   (([4:8-17], HH\Lib\Regex\Pattern<shape('0' => string)>),
                    (PrefixedString ("re",
                       (([4:10-17], string), (String "Hello")))))
                   ))));
             (Expr
                (([7:3-19], shape('0' => string)),
                 (Binop ((Eq None),
                    (([7:3-5], shape('0' => string)), (Lvar ([7:3-5], $y))),
                    (([7:8-19], shape('0' => string)),
                     (Call (Cnormal,
                        (([7:8-15], (function(HH\Lib\Regex\Pattern<shape('0' => string)> $pattern): shape('0' => string))),
                         (Id ([7:8-15], "\\goodbye"))),
                        [],
                        [(([7:16-18], HH\Lib\Regex\Pattern<shape('0' => string)>),
                          (Lvar ([7:16-18], $x)))],
                        [])))
                    ))));
             (Expr
                (([11:3-15], string),
                 (Binop ((Eq None),
                    (([11:3-7], string), (Lvar ([11:3-7], $y_0))),
                    (([11:10-15], string),
                     (Array_get (
                        (([11:10-12], shape('0' => string)),
                         (Lvar ([11:10-12], $y))),
                        (Some (([11:13-14], int), (Int "0"))))))
                    ))));
             (Expr
                (([14:3-21], string),
                 (Binop ((Eq None),
                    (([14:3-5], string), (Lvar ([14:3-5], $z))),
                    (([14:8-21], string),
                     (Binop (Dot,
                        (([14:8-10], HH\Lib\Regex\Pattern<shape('0' => string)>),
                         (Lvar ([14:8-10], $x))),
                        (([14:11-21], string), (String ", world!")))))
                    ))))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false });
  (Fun
     { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
       f_ret = (Some ([18:78-79], (Habstr "T")));
       f_name = ([18:10-17], "\\goodbye");
       f_tparams =
       [(Invariant, ([18:18-19], "T"),
         [(Constraint_as,
           ([18:23-41],
            (Happly (([18:23-41], "\\HH\\Lib\\Regex\\Match"), []))))
           ],
         false)];
       f_where_constraints = []; f_variadic = FVnonVariadic;
       f_params =
       [{ Aast.AnnotatedAST.param_annotation =
          ([18:67-75], HH\Lib\Regex\Pattern<T>);
          param_hint =
          (Some ([18:43-66],
                 (Happly (([18:43-63], "\\HH\\Lib\\Regex\\Pattern"),
                    [([18:64-65], (Habstr "T"))]))));
          param_is_reference = false; param_is_variadic = false;
          param_pos = [18:67-75]; param_name = "$pattern"; param_expr = None;
          param_callconv = None; param_user_attributes = [] }
         ];
       f_body =
       (NamedBody { Aast.AnnotatedAST.fnb_nast = [Noop]; fnb_unsafe = false });
       f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false });
  (Fun
     { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
       f_ret = (Some ([22:15-19], (Hprim Tvoid)));
       f_name = ([22:10-11], "\\g"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
       f_body =
       (NamedBody
          { Aast.AnnotatedAST.fnb_nast =
            [(Expr
                (([23:3-31], HH\Lib\Regex\Pattern<shape('0' => string, '1' => string, 'o' => string)>),
                 (Binop ((Eq None),
                    (([23:3-9], HH\Lib\Regex\Pattern<shape('0' => string, '1' => string, 'o' => string)>),
                     (Lvar ([23:3-9], $good0))),
                    (([23:12-31], HH\Lib\Regex\Pattern<shape('0' => string, '1' => string, 'o' => string)>),
                     (PrefixedString ("re",
                        (([23:14-31], string), (String "Hel(\\D)(?'o'\\D)"))
                        )))
                    ))));
              (Expr
                 (([24:3-34], _),
                  (Binop ((Eq None),
                     (([24:3-8], _), (Lvar ([24:3-8], $bad1))),
                     (([24:13-34], _), Any)))));
              (Expr
                 (([25:3-28], _),
                  (Binop ((Eq None),
                     (([25:3-8], _), (Lvar ([25:3-8], $bad2))),
                     (([25:13-28], _), Any)))));
              (Expr
                 (([26:3-17], _),
                  (Binop ((Eq None),
                     (([26:3-8], _), (Lvar ([26:3-8], $bad3))),
                     (([26:13-17], _), Any)))))
              ];
            fnb_unsafe = false });
       f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false })
  ]

[(AnnotatedAST.Fun
    { AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([5:26-5:30], (Hprim Tvoid)));
      f_name = ([5:10-5:14], "\\test"); f_tparams = [];
      f_where_constraints = []; f_variadic = AnnotatedAST.FVnonVariadic;
      f_params =
      [{ AnnotatedAST.param_annotation =
         ([5:21-5:23], Some shape('x' => int, 'y' => int));
         param_hint =
         (Some ([5:15-5:20], (Happly (([5:15-5:20], "\\Point"), []))));
         param_is_reference = false; param_is_variadic = false;
         param_pos = [5:21-5:23]; param_name = "$p"; param_expr = None;
         param_callconv = None; param_user_attributes = [] }
        ];
      f_body =
      (AnnotatedAST.NamedBody
         { AnnotatedAST.fnb_nast =
           [(AnnotatedAST.Expr
               (([6:3-6:23], Some int),
                (AnnotatedAST.Call (Cnormal,
                   (([6:3-6:14], Some (function(shape(...) $shape, arraykey $index, $default): int)),
                    (AnnotatedAST.Class_const (
                       (\Shapes,
                        (AnnotatedAST.CI (([6:3-6:9], "\\Shapes"), []))),
                       ([6:11-6:14], "idx")))),
                   [],
                   [(([6:15-6:17], Some shape('x' => int, 'y' => int)),
                     (AnnotatedAST.Lvar ([6:15-6:17], $p)));
                     (([6:19-6:22], Some string),
                      (AnnotatedAST.String ([6:19-6:22], "x")))
                     ],
                   []))));
             (AnnotatedAST.Expr
                (([7:3-7:26], Some int),
                 (AnnotatedAST.Call (Cnormal,
                    (([7:3-7:14], Some (function(shape(...) $shape, arraykey $index, $default): int)),
                     (AnnotatedAST.Class_const (
                        (\Shapes,
                         (AnnotatedAST.CI (([7:3-7:9], "\\Shapes"), []))),
                        ([7:11-7:14], "idx")))),
                    [],
                    [(([7:15-7:17], Some shape('x' => int, 'y' => int)),
                      (AnnotatedAST.Lvar ([7:15-7:17], $p)));
                      (([7:19-7:22], Some string),
                       (AnnotatedAST.String ([7:19-7:22], "x")));
                      (([7:24-7:25], Some int),
                       (AnnotatedAST.Int ([7:24-7:25], "3")))
                      ],
                    []))));
             (AnnotatedAST.Expr
                (([8:3-8:29], Some bool),
                 (AnnotatedAST.Call (Cnormal,
                    (([8:3-8:20], Some (function(shape(...) $shape, arraykey $index): bool)),
                     (AnnotatedAST.Class_const (
                        (\Shapes,
                         (AnnotatedAST.CI (([8:3-8:9], "\\Shapes"), []))),
                        ([8:11-8:20], "keyExists")))),
                    [],
                    [(([8:21-8:23], Some shape('x' => int, 'y' => int)),
                      (AnnotatedAST.Lvar ([8:21-8:23], $p)));
                      (([8:25-8:28], Some string),
                       (AnnotatedAST.String ([8:25-8:28], "y")))
                      ],
                    []))));
             (AnnotatedAST.Expr
                (([9:3-9:30], Some void),
                 (AnnotatedAST.Call (Cnormal,
                    (([9:3-9:20], Some (function(shape(...) $shape, arraykey $index): void)),
                     (AnnotatedAST.Class_const (
                        (\Shapes,
                         (AnnotatedAST.CI (([9:3-9:9], "\\Shapes"), []))),
                        ([9:11-9:20], "removeKey")))),
                    [],
                    [(([9:21-9:24], Some shape('x' => int, 'y' => int)),
                      (AnnotatedAST.Unop (Uref,
                         (([9:22-9:24], Some shape('x' => int, 'y' => int)),
                          (AnnotatedAST.Lvar ([9:22-9:24], $p)))
                         )));
                      (([9:26-9:29], Some string),
                       (AnnotatedAST.String ([9:26-9:29], "y")))
                      ],
                    []))));
             (AnnotatedAST.Expr
                (([10:3-10:22], Some array<string, int>),
                 (AnnotatedAST.Call (Cnormal,
                    (([10:3-10:18], Some (function(shape(...) $shape): array<string, int>)),
                     (AnnotatedAST.Class_const (
                        (\Shapes,
                         (AnnotatedAST.CI (([10:3-10:9], "\\Shapes"), []))),
                        ([10:11-10:18], "toArray")))),
                    [],
                    [(([10:19-10:21], Some shape('x' => int)),
                      (AnnotatedAST.Lvar ([10:19-10:21], $p)))],
                    []))))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false });
  (AnnotatedAST.Typedef
     { AnnotatedAST.t_annotation = (); t_name = ([3:6-3:11], "\\Point");
       t_tparams = []; t_constraint = None;
       t_kind =
       ([3:14-3:19],
        (Hshape
           { nsi_allows_unknown_fields = false; nsi_field_map = [ShapeMap] }));
       t_user_attributes = []; t_mode = <opaque>; t_vis = Transparent })
  ]

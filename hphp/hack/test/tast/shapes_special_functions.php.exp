[(Fun
    { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([5:26-5:30], (Aast_defs.Hprim Aast_defs.Tvoid)));
      f_name = ([5:10-5:14], "\\test"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic;
      f_params =
      [{ Aast.AnnotatedAST.param_annotation =
         ([5:21-5:23], shape('x' => int, 'y' => int));
         param_hint =
         (Some ([5:15-5:20],
                (Aast_defs.Happly (([5:15-5:20], "\\Point"), []))));
         param_is_reference = false; param_is_variadic = false;
         param_pos = [5:21-5:23]; param_name = "$p"; param_expr = None;
         param_callconv = None; param_user_attributes = [] }
        ];
      f_body =
      (NamedBody
         { Aast.AnnotatedAST.fnb_nast =
           [(Expr
               (([6:3-6:23], int),
                (Call (Aast_defs.Cnormal,
                   (([6:3-6:14], (function(shape(...) $shape, arraykey $index, $default): int)),
                    (Class_const (
                       (\Shapes, (CI (([6:3-6:9], "\\Shapes"), []))),
                       ([6:11-6:14], "idx")))),
                   [],
                   [(([6:15-6:17], shape('x' => int, 'y' => int)),
                     (Lvar ([6:15-6:17], $p)));
                     (([6:19-6:22], string), (String ([6:19-6:22], "x")))],
                   []))));
             (Expr
                (([7:3-7:26], int),
                 (Call (Aast_defs.Cnormal,
                    (([7:3-7:14], (function(shape(...) $shape, arraykey $index, $default): int)),
                     (Class_const (
                        (\Shapes, (CI (([7:3-7:9], "\\Shapes"), []))),
                        ([7:11-7:14], "idx")))),
                    [],
                    [(([7:15-7:17], shape('x' => int, 'y' => int)),
                      (Lvar ([7:15-7:17], $p)));
                      (([7:19-7:22], string), (String ([7:19-7:22], "x")));
                      (([7:24-7:25], int), (Int ([7:24-7:25], "3")))],
                    []))));
             (Expr
                (([8:3-8:29], bool),
                 (Call (Aast_defs.Cnormal,
                    (([8:3-8:20], (function(shape(...) $shape, arraykey $index): bool)),
                     (Class_const (
                        (\Shapes, (CI (([8:3-8:9], "\\Shapes"), []))),
                        ([8:11-8:20], "keyExists")))),
                    [],
                    [(([8:21-8:23], shape('x' => int, 'y' => int)),
                      (Lvar ([8:21-8:23], $p)));
                      (([8:25-8:28], string), (String ([8:25-8:28], "y")))],
                    []))));
             (Expr
                (([9:3-9:30], void),
                 (Call (Aast_defs.Cnormal,
                    (([9:3-9:20], (function(shape(...) $shape, arraykey $index): void)),
                     (Class_const (
                        (\Shapes, (CI (([9:3-9:9], "\\Shapes"), []))),
                        ([9:11-9:20], "removeKey")))),
                    [],
                    [(([9:21-9:24], shape('x' => int, 'y' => int)),
                      (Unop (Ast_defs.Uref,
                         (([9:22-9:24], shape('x' => int, 'y' => int)),
                          (Lvar ([9:22-9:24], $p)))
                         )));
                      (([9:26-9:29], string), (String ([9:26-9:29], "y")))],
                    []))));
             (Expr
                (([10:3-10:22], array<string, int>),
                 (Call (Aast_defs.Cnormal,
                    (([10:3-10:18], (function(shape(...) $shape): array<string, int>)),
                     (Class_const (
                        (\Shapes, (CI (([10:3-10:9], "\\Shapes"), []))),
                        ([10:11-10:18], "toArray")))),
                    [],
                    [(([10:19-10:21], shape('x' => int)),
                      (Lvar ([10:19-10:21], $p)))],
                    []))))
             ];
           fnb_unsafe = false });
      f_fun_kind = Ast_defs.FSync; f_user_attributes = [];
      f_ret_by_ref = false });
  (Typedef
     { Aast.AnnotatedAST.t_annotation = (); t_name = ([3:6-3:11], "\\Point");
       t_tparams = []; t_constraint = None;
       t_kind =
       ([3:14-3:19],
        (Aast_defs.Hshape
           { Aast_defs.nsi_allows_unknown_fields = false;
             nsi_field_map = [ShapeMap] }));
       t_user_attributes = []; t_mode = <opaque>;
       t_vis = Aast_defs.Transparent })
  ]

[(Fun
    { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([7:18-22], (Aast_defs.Hprim Aast_defs.Tvoid)));
      f_name = ([7:10-14], "\\main"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
      f_body =
      (NamedBody
         { Aast.AnnotatedAST.fnb_nast =
           [(Expr
               (([9:4-21], :foo),
                (Xml (([9:4-7], "\\:foo"),
                   [(Xhp_simple (([9:8-11], "bar"),
                       (([9:12-18], string), (String ([9:12-18], "herp")))))
                     ],
                   []))));
             (Expr
                (([10:3-17], string),
                 (Binop ((Ast_defs.Eq None),
                    (([10:3-8], string), (Lvar ([10:3-8], $derp))),
                    (([10:11-17], string), (String ([10:11-17], "derp")))))));
             (Expr
                (([11:4-22], :foo),
                 (Xml (([11:4-7], "\\:foo"),
                    [(Xhp_simple (([11:8-11], "bar"),
                        (([11:13-18], string), (Lvar ([11:13-18], $derp)))))
                      ],
                    []))));
             (Expr
                (([14:4-18:9], :foo),
                 (Xml (([14:4-7], "\\:foo"),
                    [(Xhp_simple (([14:8-11], "bar"),
                        (([14:12-18], string), (String ([14:12-18], "herp")))
                        ))
                      ],
                    [(([15:6-17:11], :foo),
                      (Xml (([15:6-9], "\\:foo"),
                         [(Xhp_simple (([15:10-13], "bar"),
                             (([15:14-20], string),
                              (String ([15:14-20], "derp")))
                             ))
                           ],
                         [(([16:8-25], :foo),
                           (Xml (([16:8-11], "\\:foo"),
                              [(Xhp_simple (([16:12-15], "bar"),
                                  (([16:16-22], string),
                                   (String ([16:16-22], "herp")))
                                  ))
                                ],
                              [])))
                           ]
                         )))
                      ]
                    ))))
             ];
           fnb_unsafe = false });
      f_fun_kind = Ast_defs.FSync; f_user_attributes = [];
      f_ret_by_ref = false });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = true; c_kind = Ast_defs.Cnormal;
       c_name = ([3:7-11], "\\:foo"); c_tparams = <opaque>; c_extends = [];
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
       c_req_extends = []; c_req_implements = [];
       c_implements =
       [([3:23-31], (Aast_defs.Happly (([3:23-31], "\\XHPChild"), [])))];
       c_consts = []; c_typeconsts = []; c_static_vars = [];
       c_vars =
       [{ Aast.AnnotatedAST.cv_final = false; cv_is_xhp = true;
          cv_visibility = Aast_defs.Public;
          cv_type =
          (Some ([4:13-17],
                 (Aast_defs.Hoption
                    ([4:13-17], (Aast_defs.Hprim Aast_defs.Tstring)))));
          cv_id = ([4:35-38], ":bar"); cv_expr = None;
          cv_user_attributes = [] }
         ];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None })
  ]

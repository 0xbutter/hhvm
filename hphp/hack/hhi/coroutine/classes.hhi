<?hh // strict
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the "hack" directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * This file provides type information for some of PHP's predefined interfaces
 *
 * YOU SHOULD NEVER INCLUDE THIS FILE ANYWHERE!!!
 */

class SuspendedCoroutineResult<T> implements CoroutineResult<T> {

  private static ?SuspendedCoroutineResult<T> $instance = null;

  private function __construct() {}

  public function getResult(): T {
    throw new Exception(
      "getResult() was called on a suspended CoroutineResult.");
  }

  public function isSuspended(): bool {
    return true;
  }

  public static function create(): CoroutineResult<T> {
    if (self::$instance === null) {
      self::$instance = new SuspendedCoroutineResult();
    }
    return self::$instance;
  }
}

/**
 * Represents a unit type for the purposes of internal use with coroutines.
 *
 * It is difficult to deal with coroutines that are either void-returning, or if
 * the point at which the coroutine suspended is not expecting a value, because
 * it is tricky to use void as a type parameter.
 *
 * Rather than having multiple methods like "resume_with_no_value()", we simply
 * define a unit singleton and use it where void is intended.
 */
final class CoroutineUnit {

  private static ?CoroutineUnit $unit = null;

  private function __construct() {}

  public static function create(): CoroutineUnit {
    if (self::$unit === null) {
      self::$unit = new CoroutineUnit();
    }
    return self::$unit;
  }
}

/**
 * A coroutine closure that has been autogenerated by the compiler.
 *
 * Maintains the state of the coroutine function across suspensions. This class
 * implements CoroutineContinuation<mixed>, as it may receive disparate types
 * to calls of its resume method during the suspension and resumption of the
 * coroutine's execution. Every time the coroutine is resumed normally, the
 * value will be passed in to the continuation, and then along to the state
 * machine.
 *
 * The doResume method has the same contract as the coroutine: it either hangs,
 * returns a coroutine result, throws, or returns a 'suspended' indicator.
 *
 * @param T  The return type of the coroutine.
 */
abstract class ClosureBase<T> implements CoroutineContinuation<mixed> {

  public int $nextLabel = 0;

  protected function __construct(
    private CoroutineContinuation<T> $coroutineContinuation_generated
  ) {}

  public function resume(mixed $value): void {
    self::processContinuation(
      $this->coroutineContinuation_generated,
      () ==> $this->doResume($value, null)
    );
  }

  public function resumeWithException(Exception $ex): void {
    self::processContinuation(
      $this->coroutineContinuation_generated,
      () ==> $this->doResume(null, $ex)
    );
  }

  protected abstract function doResume(
    mixed $data,
    ?Exception $ex,
  ): CoroutineResult<mixed>;

  /**
   * The continuation passed in is the continuation of the entire coroutine.
   *
   * The block is a function which executes some part of the workflow, and
   * either throws, returns, or suspends. If it throws or returns, then
   * the coroutine is done and we can call its continuation. If the block
   * suspends then we do nothing, since we've suspended.
   */
  private static function processContinuation<Tr>(
    CoroutineContinuation<Tr> $coroutineContinuation,
    (function(): CoroutineResult<Tr>) $block
  ): void {
    try {
      $result = $block();
      if (!$result->isSuspended()) {
        $coroutineContinuation->resume($result->getResult());
      }
    } catch (Exception $ex) {
      $coroutineContinuation->resumeWithException($ex);
    }
  }
}

<?hh // strict
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the "hack" directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * This file provides type information for some of PHP's predefined interfaces
 *
 * YOU SHOULD NEVER INCLUDE THIS FILE ANYWHERE!!!
 */

/**
 * Represents the reutrn value from a coroutine that has suspended.
 */
final class SuspendedCoroutineResult<T> implements CoroutineResult<T> {

  private static ?SuspendedCoroutineResult<T> $instance = null;

  private function __construct() {
  }

  public function isSuspended(): bool {
    return true;
  }

  public function getResult(): T {
    throw
      new Exception("getResult() was called on a suspended CoroutineResult.");
  }

  public static function create(): CoroutineResult<T> {
    if (self::$instance === null) {
      self::$instance = new SuspendedCoroutineResult();
    }
    return self::$instance;
  }
}

/**
 * Represents the return value from a coroutine that has finished by returning a
 * value.
 */
final class ActualCoroutineResult<T> implements CoroutineResult<T> {

  public function __construct(private T $result) {}

  public function isSuspended(): bool {
    return false;
  }

  public function getResult(): T {
    return $this->result;
  }
}

/**
 * Represents a unit type for the purposes of internal use with coroutines.
 *
 * It is difficult to deal with coroutines that are either void-returning, or if
 * the point at which the coroutine suspended is not expecting a value, because
 * it is tricky to use void as a type parameter.
 *
 * Rather than having multiple methods like "resume_with_no_value()", we simply
 * define a unit singleton and use it where void is intended.
 */
final class CoroutineUnit {

  private static ?CoroutineUnit $unit = null;

  private function __construct() {
  }

  public static function create(): CoroutineUnit {
    if (self::$unit === null) {
      self::$unit = new CoroutineUnit();
    }
    return self::$unit;
  }
}

/**
 * Exception indicating that a completed coroutine was resumed erroneously.
 */
final class CoroutineAlreadyResumedException<T> extends Exception {

  public function __construct(public CoroutineContinuation<T> $continuation) {
    parent::__construct("The continuation was already resumed.");
  }
}

final class CoroutineHelpers {

  /**
   * The continuation passed in is the continuation of the entire coroutine.
   *
   * The block is a function which executes some part of the workflow, and
   * either throws, returns, or suspends. If it throws or returns, then
   * the coroutine is done and we can call its continuation. If the block
   * suspends then we do nothing, since we've suspended.
   */
  public static function processContinuation<T>(
    CoroutineContinuation<T> $coroutineContinuation,
    (function(): CoroutineResult<T>) $block,
  ): void {
    try {
      $result = $block();
      if (!$result->isSuspended()) {
        $coroutineContinuation->resume($result->getResult());
      }
    } catch (Exception $ex) {
      $coroutineContinuation->resumeWithException($ex);
    }
  }
}

/**
 * A coroutine closure that has been autogenerated by the compiler.
 *
 * Maintains the state of the coroutine function across suspensions. This class
 * implements CoroutineContinuation<mixed>, as it may receive disparate types
 * to calls of its resume method during the suspension and resumption of the
 * coroutine's execution. Every time the coroutine is resumed normally, the
 * value will be passed in to the continuation, and then along to the state
 * machine.
 *
 * The doResume method has the same contract as the coroutine: it either hangs,
 * returns a coroutine result, throws, or returns a 'suspended' indicator.
 *
 * @param T  The return type of the coroutine.
 */
abstract class ClosureBase<T> implements CoroutineContinuation<mixed> {

  public int $nextLabel = 0;

  protected function __construct(
    private CoroutineContinuation<T> $coroutineContinuation_generated,
  ) {
  }

  public function resume(mixed $value): void {
    CoroutineHelpers::processContinuation(
      $this->coroutineContinuation_generated,
      () ==> $this->doResume($value, null),
    );
  }

  public function resumeWithException(Exception $ex): void {
    CoroutineHelpers::processContinuation(
      $this->coroutineContinuation_generated,
      () ==> $this->doResume(null, $ex),
    );
  }

  protected abstract function doResume(
    mixed $data,
    ?Exception $ex,
  ): CoroutineResult<mixed>;
}

/**
 * A wrapper continuation inserts an intermediary step into a coroutine
 * workflow. We have a continuation that represents the continuation of a
 * coroutine, and we have some method that produces a coroutine result. When
 * this (void) continuation is resumed, we fetch the result and pass it along to
 * the wrapped continuation.
 */
final class WrapperContinuation<T>
  implements CoroutineContinuation<CoroutineUnit> {

  public function __construct(
    private CoroutineContinuation<T> $continuation,
    private (function(): CoroutineResult<T>) $block,
  ) {
  }

  public function resume(CoroutineUnit $unused): void {
    CoroutineHelpers::processContinuation($this->continuation, $this->block);
  }

  public function resumeWithException(Exception $ex): void {
    $this->continuation->resumeWithException($ex);
  }
}

/**
 * This class of static methods contains user-callable helper functions for
 * creating coroutines.
 */
final class CreateCoroutine {

  /**
   * Creates a coroutine from a function that is parameterized with a
   * "receiver".
   *
   * This function takes a completeion continuation, which is a callback that
   * will be invoked when the coroutine completes. The passed-in coroutine is
   * returned as a continuation which, when resumed (with null), will start the
   * coroutine.
   *
   * Compared to CreateCoroutine::createWithReceiver, this function does not add
   * any "safety layer" to the coroutine; no exception will be thrown if the
   * coroutine is erronesouly resumed more than once.
   */
  public static function createWithReceiverUnchecked<TReceiver, TResult>(
    // TODO(tingley): Sugar this as (coroutine function (TReceiver): TResult).
    (
      function(
        CoroutineContinuation<TResult>,
        TReceiver,
      ): CoroutineResult<TResult>
    ) $coroutineFunction,
    TReceiver $receiver,
    CoroutineContinuation<TResult> $completionContinuation,
  ): CoroutineContinuation<CoroutineUnit> {
    return new WrapperContinuation(
      $completionContinuation,
      () ==> $coroutineFunction($completionContinuation, $receiver),
    );
  }

  // TODO(tingley): Work with ericlippert to implement SafeContinuation, and use
  // it to implement createWithReceiver.
}

/**
 * This class of static methods contains user-callable helper functions for
 * suspending from within a coroutine.
 */
final class SuspendCoroutine {

  /**
   * Invokes the coroutine with the continuation of the coroutine. No safety is
   * imposed; use SuspendCoroutine::suspend instead.
   *
   * This function has the following contract.
   *
   * * If the coroutine throws, it throws. It does not invoke
   *   resumeWithException on the continuation.
   * * If the coroutine returns a value, it returns a value. It does not invoke
   *   resume on the continuation.
   * * If the coroutine suspends, then the coroutine called is responsible for
   *   arranging for the continuation to be resumed in the future.
   */
  public static function suspendUnchecked<T>(
    CoroutineContinuation<T> $coroutineContinuation_generated,
    // TODO(tingley): Resugar as (coroutine function (): T)
    (function(CoroutineContinuation<T>):CoroutineResult<T>) $coroutine,
  ): CoroutineResult<T> {
    return $coroutine($coroutineContinuation_generated);
  }

  // TODO(tingley): Work with ericlippert to implement SafeContinuation, and use
  // it to implement suspend.
}

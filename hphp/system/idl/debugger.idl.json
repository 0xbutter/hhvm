{
    "preamble": "#include <runtime\/eval\/debugger\/debugger_client.h>\n#include <runtime\/eval\/debugger\/debugger_proxy.h>",
    "consts": [
    ],
    "funcs": [
        {
            "name": "hphpd_break",
            "desc": "Sets a hard breakpoint. When a debugger is running, this line of code will break into debugger, if condition is met. If there is no debugger that's attached, it will not do anything.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific",
                "NeedsActRec"
            ],
            "return": {
                "type": null
            },
            "args": [
                {
                    "name": "condition",
                    "type": "Boolean",
                    "value": "true",
                    "desc": "If true, break, otherwise, continue."
                }
            ]
        },
        {
            "name": "hphp_debugger_attached",
            "desc": "Quickly determine if a debugger is attached to this process and configured to debug this thread.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific",
                "NeedsActRec"
            ],
            "return": {
                "type": "Boolean",
                "desc": "TRUE if a debugger is attached, FALSE if not."
            },
            "args": [
            ]
        },
        {
            "name": "hphp_get_debugger_info",
            "desc": "Determine if a debugger is attached to this process and configured to debug this thread, and return information about the attached debugger.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "An array of information about the debugger as array('clientIP' => {ip address of client}, 'clientPort' => {port of the client}). If no debugger is attached, an empty array is returned. If a script is being debugged within hphpd, the ip address and port will be null."
            },
            "args": [
            ]
        },
        {
            "name": "hphpd_get_client",
            "desc": "Gets an hphpd client with a string key (creating on-demand). With the same key, it guarantees to get the same debugger client across multiple requests. One hphpd client can only be gotten by a single request at any given time. Will return null if the client is already gotten.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific"
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "name",
                    "type": "String",
                    "value": "null",
                    "desc": "the name to identify the debugger client"
                }
            ]
        },
        {
            "name": "hphpd_client_ctrl",
            "desc": "Make special operations on a client, such as interrupt a waiting client.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific"
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "name",
                    "type": "String",
                    "desc": "the name to identify the debugger client"
                },
                {
                    "name": "op",
                    "type": "String",
                    "desc": "the string to represent the operation"
                }
            ]
        }
    ],
    "classes": [
        {
            "name": "DebuggerClient",
            "desc": "",
            "bases": [
                "Sweepable"
            ],
            "flags": [
                "HasDocComment",
                "HipHopSpecific",
                "NoDefaultSweep"
            ],
            "footer": "\n public:\n  Eval::DebuggerClient *m_client;",
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Constructor",
                    "flags": [
                        "HasDocComment",
                        "HipHopSpecific"
                    ],
                    "return": {
                        "type": null
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getState",
                    "desc": "get current state of the debugger client",
                    "flags": [
                        "HasDocComment",
                        "HipHopSpecific"
                    ],
                    "return": {
                        "type": "Int64",
                        "desc": "One of the constants"
                    },
                    "args": [
                    ]
                },
                {
                    "name": "init",
                    "desc": "initialize the debugger client",
                    "flags": [
                        "HasDocComment",
                        "HipHopSpecific"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "TBD"
                    },
                    "args": [
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "array for passing options"
                        }
                    ]
                },
                {
                    "name": "processCmd",
                    "desc": "issue a command to debugger client",
                    "flags": [
                        "HasDocComment",
                        "HipHopSpecific"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "TBD"
                    },
                    "args": [
                        {
                            "name": "cmdName",
                            "type": "Variant",
                            "desc": "name of the command to be executed"
                        },
                        {
                            "name": "args",
                            "type": "Variant",
                            "desc": "A vector array of strings to be used as arguments"
                        }
                    ]
                }
            ],
            "consts": [
                {
                    "name": "STATE_INVALID",
                    "type": "Int64"
                },
                {
                    "name": "STATE_UNINIT",
                    "type": "Int64"
                },
                {
                    "name": "STATE_INITIALIZING",
                    "type": "Int64"
                },
                {
                    "name": "STATE_READY_FOR_COMMAND",
                    "type": "Int64"
                },
                {
                    "name": "STATE_BUSY",
                    "type": "Int64"
                }
            ]
        }
    ]
}
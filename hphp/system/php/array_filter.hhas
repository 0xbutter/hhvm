.function [skip_frame dyn_callable] array_filter($arr = no_args, $func = start("""null"""), $flag = start("""null"""), $res = start) {
          .numiters 2;

# if we get here, a value was supplied for $res
          String "array_filter() expects at most 3 parameters"
          Jmp warning
no_args:  String "array_filter() expects at least 1 parameter, 0 given"
          Jmp warning
bad_arr:  String "array_filter() expects parameter 1 to be an array or collection"
          Jmp warning
bad_param2:
          String "array_filter() expects parameter 2 to be a valid callback"
warning:  Cns "E_WARNING"
          FCallBuiltin 2 2 "trigger_error"
          PopC
          Null
          RetC

start:          CGetL $arr
                InstanceOfD "HH\\KeyedTraversable"
                JmpZ bad_arr

                IssetL $func
                JmpZ no_func

                CGetL $func
                DecodeCufIter 0 bad_param2
.try {
                NewLikeArrayL $arr 0
                SetL $res
                PopC

                CGetL $arr
                IterInitK 1 endloop_a $v $k
  .try 1 {
                IssetL $flag
                JmpZ loop_val
                Int 1           # ARRAY_FILTER_USE_BOTH
                CGetL $flag
                Same
                JmpNZ loop_both
                Int 2           # ARRAY_FILTER_USE_KEY
                CGetL $flag
                Same
                JmpNZ loop_key

    loop_val:   FPushCufIter 1 0
                CGetL $v
                FCall <> 1 1 - "" ""
                JmpZ next_val
                CGetL $v
                BaseL $res Define
                SetM 0 EL:$k
                PopC
    next_val:   IterNextK 1 loop_val $v $k
                Jmp endloop_a

    loop_both:  FPushCufIter 2 0
                CGetL $v
                CGetL $k
                FCall <> 2 1 - "" ""
                JmpZ next_both
                CGetL $v
                BaseL $res Define
                SetM 0 EL:$k
                PopC
    next_both:  IterNextK 1 loop_both $v $k
                Jmp endloop_a

    loop_key:   FPushCufIter 1 0
                CGetL $k
                FCall <> 1 1 - "" ""
                JmpZ next_key
                CGetL $v
                BaseL $res Define
                SetM 0 EL:$k
                PopC
    next_key:   IterNextK 1 loop_key $v $k
                Jmp endloop_a
  } .catch {
                IterFree 1
                Throw
  }
} .catch {
            CIterFree 0
            Throw
}

endloop_a:CIterFree 0
endloop_n:CGetL $res
          RetC

no_func:  NewLikeArrayL $arr 0
          SetL $res
          PopC
          CGetL $arr
          IterInitK 1 endloop_n $v $k
.try 1 {
loop_n:   CGetL $v
          JmpZ skip_n
          CGetL $v
          BaseL $res Define
          SetM 0 EL:$k
          PopC
skip_n:   IterNextK 1 loop_n $v $k
          Jmp endloop_n
} .catch {
          IterFree 1
          Throw
}
}

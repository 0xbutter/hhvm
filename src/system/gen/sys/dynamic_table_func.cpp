/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <runtime/base/hphp_system.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>
#include <sys/literal_strings.h>

namespace hphp_impl_starter {}


namespace HPHP {
///////////////////////////////////////////////////////////////////////////////


// Function Invoke Table
Variant ifa_stream_get_wrappers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("stream_get_wrappers", 0, 1);
  return (x_stream_get_wrappers());
}
Variant i_stream_get_wrappers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_get_wrappers);
}
Variant ifa_get_class_methods(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_class_methods", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_get_class_methods(arg0));
}
Variant i_get_class_methods(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_class_methods);
}
Variant ifa_openssl_pkey_export_to_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("openssl_pkey_export_to_file", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_openssl_pkey_export_to_file(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_pkey_export_to_file(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_pkey_export_to_file(arg0, arg1, arg2, arg3));
}
Variant i_openssl_pkey_export_to_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkey_export_to_file);
}
Variant ifa_mysql_field_type(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_field_type", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_field_type(arg0));
  CVarRef arg1(a1);
  return (x_mysql_field_type(arg0, arg1));
}
Variant i_mysql_field_type(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_field_type);
}
Variant ifa_newpixelwandarray(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("newpixelwandarray", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_newpixelwandarray(arg0));
}
Variant i_newpixelwandarray(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_newpixelwandarray);
}
Variant ifa_fb_call_user_func_safe_return(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("fb_call_user_func_safe_return", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_fb_call_user_func_safe_return(count, arg0, arg1, p));
}
Variant i_fb_call_user_func_safe_return(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("fb_call_user_func_safe_return", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_fb_call_user_func_safe_return(count, arg0, arg1, p));
  }
}
Variant ifa_override_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("override_function", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_override_function(arg0, arg1, arg2));
}
Variant i_override_function(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_override_function);
}
Variant ifa_imap_sort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("imap_sort", count, 3, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_sort(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_imap_sort(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_imap_sort(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_imap_sort(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imap_sort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_sort);
}
Variant ifa_ob_get_length(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_get_length", 0, 1);
  return (x_ob_get_length());
}
Variant i_ob_get_length(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_get_length);
}
Variant ifa_magickqueryfontmetrics(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickqueryfontmetrics", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickqueryfontmetrics(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickqueryfontmetrics(arg0, arg1, arg2, arg3));
}
Variant i_magickqueryfontmetrics(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickqueryfontmetrics);
}
Variant ifa_strtr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("strtr", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_strtr(arg0, arg1));
  CVarRef arg2(a2);
  return (x_strtr(arg0, arg1, arg2));
}
Variant i_strtr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strtr);
}
Variant ifa_magickgetmimetype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetmimetype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetmimetype(arg0));
}
Variant i_magickgetmimetype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetmimetype);
}
Variant ifa_mysql_data_seek(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mysql_data_seek", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mysql_data_seek(arg0, arg1));
}
Variant i_mysql_data_seek(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_data_seek);
}
Variant ifa_mysql_num_rows(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mysql_num_rows", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mysql_num_rows(arg0));
}
Variant i_mysql_num_rows(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_num_rows);
}
Variant ifa_func_get_arg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("func_get_arg", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_func_get_arg(arg0));
}
Variant i_func_get_arg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_func_get_arg);
}
Variant ifa_imagestringup(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imagestringup", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imagestringup(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagestringup(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagestringup);
}
Variant ifa_floatval(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("floatval", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_floatval(arg0));
}
Variant i_floatval(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_floatval);
}
Variant ifa_hphp_set_hardware_events(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("hphp_set_hardware_events", 1, 1);
  if (count <= 0) return (x_hphp_set_hardware_events());
  CVarRef arg0(a0);
  return (x_hphp_set_hardware_events(arg0));
}
Variant i_hphp_set_hardware_events(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_set_hardware_events);
}
Variant ifa_memcache_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("memcache_close", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_memcache_close(arg0));
}
Variant i_memcache_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_close);
}
Variant ifa_imagelayereffect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagelayereffect", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagelayereffect(arg0, arg1));
}
Variant i_imagelayereffect(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagelayereffect);
}
Variant ifa_realpath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("realpath", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_realpath(arg0));
}
Variant i_realpath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_realpath);
}
Variant ifa_mb_strstr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_strstr", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_strstr(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_strstr(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_strstr(arg0, arg1, arg2, arg3));
}
Variant i_mb_strstr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strstr);
}
Variant ifa_spl_object_hash(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("spl_object_hash", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_spl_object_hash(arg0));
}
Variant i_spl_object_hash(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spl_object_hash);
}
Variant ifa_reset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("reset", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_reset(arg0));
}
Variant i_reset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_reset);
}
Variant ifa_deg2rad(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("deg2rad", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_deg2rad(arg0));
}
Variant i_deg2rad(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_deg2rad);
}
Variant ifa_shm_put_var(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("shm_put_var", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_shm_put_var(arg0, arg1, arg2));
}
Variant i_shm_put_var(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shm_put_var);
}
Variant ifa_imap_append(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("imap_append", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_append(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imap_append(arg0, arg1, arg2, arg3));
}
Variant i_imap_append(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_append);
}
Variant ifa_hphp_get_original_class_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_get_original_class_name", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_get_original_class_name(arg0));
}
Variant i_hphp_get_original_class_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_original_class_name);
}
Variant ifa_drawgetstrokelinejoin(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokelinejoin", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokelinejoin(arg0));
}
Variant i_drawgetstrokelinejoin(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokelinejoin);
}
Variant ifa_hphp_recursivedirectoryiterator_valid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_valid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_valid(arg0));
}
Variant i_hphp_recursivedirectoryiterator_valid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_valid);
}
Variant ifa_drawpathlinetoabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawpathlinetoabsolute", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawpathlinetoabsolute(arg0, arg1, arg2), null);
}
Variant i_drawpathlinetoabsolute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathlinetoabsolute);
}
Variant ifa_drawrotate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawrotate", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawrotate(arg0, arg1), null);
}
Variant i_drawrotate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawrotate);
}
Variant ifa_openssl_pkcs12_read(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("openssl_pkcs12_read", count, 3, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  return (x_openssl_pkcs12_read(arg0, arg1, arg2));
}
Variant i_openssl_pkcs12_read(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkcs12_read);
}
Variant ifa_i18n_loc_get_error_code(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("i18n_loc_get_error_code", 0, 1);
  return (x_i18n_loc_get_error_code());
}
Variant i_i18n_loc_get_error_code(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_i18n_loc_get_error_code);
}
Variant ifa_drawpushdefs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawpushdefs", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawpushdefs(arg0), null);
}
Variant i_drawpushdefs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpushdefs);
}
Variant ifa_apc_bin_dump(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("apc_bin_dump", 2, 1);
  if (count <= 0) return (x_apc_bin_dump());
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_bin_dump(arg0));
  CVarRef arg1(a1);
  return (x_apc_bin_dump(arg0, arg1));
}
Variant i_apc_bin_dump(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_bin_dump);
}
Variant ifa_pixelsetmagentaquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetmagentaquantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetmagentaquantum(arg0, arg1), null);
}
Variant i_pixelsetmagentaquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetmagentaquantum);
}
Variant ifa_imagecreatetruecolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagecreatetruecolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagecreatetruecolor(arg0, arg1));
}
Variant i_imagecreatetruecolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatetruecolor);
}
Variant ifa_drawcomposite(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawcomposite", count, 7, 7, 1);
}
Variant i_drawcomposite(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 7)) return throw_wrong_arguments("drawcomposite", count, 7, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawcomposite(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_evhttp_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("evhttp_get", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_evhttp_get(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_evhttp_get(arg0, arg1));
  CVarRef arg2(a2);
  return (x_evhttp_get(arg0, arg1, arg2));
}
Variant i_evhttp_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_evhttp_get);
}
Variant ifa_magickgetimageheight(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageheight", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageheight(arg0));
}
Variant i_magickgetimageheight(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageheight);
}
Variant ifa_fprintf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("fprintf", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_fprintf(count, arg0, arg1, p));
}
Variant i_fprintf(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("fprintf", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_fprintf(count, arg0, arg1, p));
  }
}
Variant ifa_eregi(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("eregi", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_eregi(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_eregi(arg0, arg1, arg2));
}
Variant i_eregi(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_eregi);
}
Variant ifa_drawpolyline(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawpolyline", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawpolyline(arg0, arg1), null);
}
Variant i_drawpolyline(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpolyline);
}
Variant ifa_collator_get_error_code(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("collator_get_error_code", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_collator_get_error_code(arg0));
}
Variant i_collator_get_error_code(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_get_error_code);
}
Variant ifa_fb_output_compression(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_output_compression", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_output_compression(arg0));
}
Variant i_fb_output_compression(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_output_compression);
}
Variant ifa_clock_getres(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("clock_getres", count, 3, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  VRefParam arg2(vref(a2));
  return (x_clock_getres(arg0, arg1, arg2));
}
Variant i_clock_getres(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clock_getres);
}
Variant ifa_hphp_splfileobject_fseek(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("hphp_splfileobject_fseek", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_hphp_splfileobject_fseek(arg0, arg1, arg2));
}
Variant i_hphp_splfileobject_fseek(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fseek);
}
Variant ifa_xmlwriter_write_element(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("xmlwriter_write_element", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_xmlwriter_write_element(arg0, arg1));
  CVarRef arg2(a2);
  return (x_xmlwriter_write_element(arg0, arg1, arg2));
}
Variant i_xmlwriter_write_element(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_element);
}
Variant ifa_debug_zval_dump(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("debug_zval_dump", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_debug_zval_dump(arg0), null);
}
Variant i_debug_zval_dump(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_debug_zval_dump);
}
Variant ifa_mysql_fetch_field(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_fetch_field", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_fetch_field(arg0));
  CVarRef arg1(a1);
  return (x_mysql_fetch_field(arg0, arg1));
}
Variant i_mysql_fetch_field(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_fetch_field);
}
Variant ifa_mb_ereg_search_getregs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("mb_ereg_search_getregs", 0, 1);
  return (x_mb_ereg_search_getregs());
}
Variant i_mb_ereg_search_getregs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_search_getregs);
}
Variant ifa_magickgetimagegreenprimary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagegreenprimary", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagegreenprimary(arg0));
}
Variant i_magickgetimagegreenprimary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagegreenprimary);
}
Variant ifa_call_user_method_array(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("call_user_method_array", count, 3, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  return (x_call_user_method_array(arg0, arg1, arg2));
}
Variant i_call_user_method_array(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_call_user_method_array);
}
Variant ifa_newmagickwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("newmagickwand", 0, 1);
  return (x_newmagickwand());
}
Variant i_newmagickwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_newmagickwand);
}
Variant ifa_date_default_timezone_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("date_default_timezone_get", 0, 1);
  return (x_date_default_timezone_get());
}
Variant i_date_default_timezone_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_default_timezone_get);
}
Variant ifa_preg_match(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("preg_match", count, 2, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_preg_match(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_preg_match(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_preg_match(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_preg_match(arg0, arg1, arg2, arg3, arg4));
}
Variant i_preg_match(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_preg_match);
}
Variant ifa_hphp_splfileinfo_getbasename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileinfo_getbasename", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileinfo_getbasename(arg0, arg1));
}
Variant i_hphp_splfileinfo_getbasename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getbasename);
}
Variant ifa_hphp_pack_continuation(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("hphp_pack_continuation", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_hphp_pack_continuation(arg0, arg1, arg2), null);
}
Variant i_hphp_pack_continuation(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_pack_continuation);
}
Variant ifa_hphp_splfileobject_fgetc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_fgetc", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_fgetc(arg0));
}
Variant i_hphp_splfileobject_fgetc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fgetc);
}
Variant ifa_imageline(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imageline", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imageline(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imageline(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imageline);
}
Variant ifa_stream_socket_pair(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("stream_socket_pair", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_stream_socket_pair(arg0, arg1, arg2));
}
Variant i_stream_socket_pair(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_pair);
}
Variant ifa_closedir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("closedir", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_closedir(arg0), null);
}
Variant i_closedir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_closedir);
}
Variant ifa_posix_seteuid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_seteuid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_seteuid(arg0));
}
Variant i_posix_seteuid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_seteuid);
}
Variant ifa_closelog(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("closelog", 0, 1);
  return (x_closelog());
}
Variant i_closelog(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_closelog);
}
Variant ifa_magickwriteimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickwriteimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickwriteimage(arg0, arg1));
}
Variant i_magickwriteimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickwriteimage);
}
Variant ifa_gzread(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gzread", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzread(arg0));
  CVarRef arg1(a1);
  return (x_gzread(arg0, arg1));
}
Variant i_gzread(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzread);
}
Variant ifa_ord(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ord", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ord(arg0));
}
Variant i_ord(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ord);
}
Variant ifa_posix_getgrnam(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_getgrnam", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_getgrnam(arg0));
}
Variant i_posix_getgrnam(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getgrnam);
}
Variant ifa_magickappendimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("magickappendimages", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_magickappendimages(arg0));
  CVarRef arg1(a1);
  return (x_magickappendimages(arg0, arg1));
}
Variant i_magickappendimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickappendimages);
}
Variant ifa_get_declared_traits(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_declared_traits", 0, 1);
  return (x_get_declared_traits());
}
Variant i_get_declared_traits(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_declared_traits);
}
Variant ifa_dom_document_create_entity_reference(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_create_entity_reference", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_create_entity_reference(arg0, arg1));
}
Variant i_dom_document_create_entity_reference(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_entity_reference);
}
Variant ifa_imagetypes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("imagetypes", 0, 1);
  return (x_imagetypes());
}
Variant i_imagetypes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagetypes);
}
Variant ifa_hphp_splfileobject_ftell(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_ftell", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_ftell(arg0));
}
Variant i_hphp_splfileobject_ftell(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_ftell);
}
Variant ifa_pcntl_fork(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("pcntl_fork", 0, 1);
  return (x_pcntl_fork());
}
Variant i_pcntl_fork(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_fork);
}
Variant ifa_apd_breakpoint(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apd_breakpoint", 0, 1);
  return (x_apd_breakpoint());
}
Variant i_apd_breakpoint(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apd_breakpoint);
}
Variant ifa_mcrypt_list_modes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mcrypt_list_modes", 1, 1);
  if (count <= 0) return (x_mcrypt_list_modes());
  CVarRef arg0(a0);
  return (x_mcrypt_list_modes(arg0));
}
Variant i_mcrypt_list_modes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_list_modes);
}
Variant ifa_newpixelregioniterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("newpixelregioniterator", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_newpixelregioniterator(arg0, arg1, arg2, arg3, arg4));
}
Variant i_newpixelregioniterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_newpixelregioniterator);
}
Variant ifa_pixelsetgreen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetgreen", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetgreen(arg0, arg1), null);
}
Variant i_pixelsetgreen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetgreen);
}
Variant ifa_magickcoalesceimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickcoalesceimages", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickcoalesceimages(arg0));
}
Variant i_magickcoalesceimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcoalesceimages);
}
Variant ifa_mb_strtolower(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mb_strtolower", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_strtolower(arg0));
  CVarRef arg1(a1);
  return (x_mb_strtolower(arg0, arg1));
}
Variant i_mb_strtolower(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strtolower);
}
Variant ifa_magicktextureimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicktextureimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicktextureimage(arg0, arg1));
}
Variant i_magicktextureimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicktextureimage);
}
Variant ifa_mb_ereg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_ereg", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_ereg(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_mb_ereg(arg0, arg1, arg2));
}
Variant i_mb_ereg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg);
}
Variant ifa_magickresetiterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickresetiterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickresetiterator(arg0), null);
}
Variant i_magickresetiterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickresetiterator);
}
Variant ifa_socket_clear_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("socket_clear_error", 1, 1);
  if (count <= 0) return (x_socket_clear_error(), null);
  CVarRef arg0(a0);
  return (x_socket_clear_error(arg0), null);
}
Variant i_socket_clear_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_clear_error);
}
Variant ifa_xml_set_object(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_object", count, 2, 2, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  return (x_xml_set_object(arg0, arg1));
}
Variant i_xml_set_object(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_object);
}
Variant ifa_hphp_directoryiterator_valid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_directoryiterator_valid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_directoryiterator_valid(arg0));
}
Variant i_hphp_directoryiterator_valid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator_valid);
}
Variant ifa_pcntl_waitpid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("pcntl_waitpid", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_pcntl_waitpid(arg0, arg1));
  CVarRef arg2(a2);
  return (x_pcntl_waitpid(arg0, arg1, arg2));
}
Variant i_pcntl_waitpid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_waitpid);
}
Variant ifa_imageistruecolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imageistruecolor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imageistruecolor(arg0));
}
Variant i_imageistruecolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imageistruecolor);
}
Variant ifa_apc_bin_dumpfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("apc_bin_dumpfile", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_apc_bin_dumpfile(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_apc_bin_dumpfile(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_apc_bin_dumpfile(arg0, arg1, arg2, arg3, arg4));
}
Variant i_apc_bin_dumpfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_bin_dumpfile);
}
Variant ifa_memcache_set_compress_threshold(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("memcache_set_compress_threshold", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_set_compress_threshold(arg0, arg1));
  CVarRef arg2(a2);
  return (x_memcache_set_compress_threshold(arg0, arg1, arg2));
}
Variant i_memcache_set_compress_threshold(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_set_compress_threshold);
}
Variant ifa_error_log(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("error_log", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_error_log(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_error_log(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_error_log(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_error_log(arg0, arg1, arg2, arg3));
}
Variant i_error_log(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_error_log);
}
Variant ifa_die(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("die", 1, 1);
  if (count <= 0) return (x_die());
  CVarRef arg0(a0);
  return (x_die(arg0));
}
Variant i_die(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_die);
}
Variant ifa_phpcredits(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("phpcredits", 1, 1);
  if (count <= 0) return (x_phpcredits());
  CVarRef arg0(a0);
  return (x_phpcredits(arg0));
}
Variant i_phpcredits(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_phpcredits);
}
Variant ifa_drawgetexceptionstring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetexceptionstring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetexceptionstring(arg0));
}
Variant i_drawgetexceptionstring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetexceptionstring);
}
Variant ifa_openssl_pkey_get_public(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_pkey_get_public", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_pkey_get_public(arg0));
}
Variant i_openssl_pkey_get_public(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkey_get_public);
}
Variant ifa_mysql_pconnect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count <= 0) return (x_mysql_pconnect());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_pconnect(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_pconnect(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mysql_pconnect(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mysql_pconnect(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_mysql_pconnect(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_mysql_pconnect(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_mysql_pconnect(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_pconnect);
}
Variant ifa_hphp_recursiveiteratoriterator_rewind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursiveiteratoriterator_rewind", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursiveiteratoriterator_rewind(arg0), null);
}
Variant i_hphp_recursiveiteratoriterator_rewind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursiveiteratoriterator_rewind);
}
Variant ifa_magicksetresolution(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetresolution", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetresolution(arg0, arg1, arg2));
}
Variant i_magicksetresolution(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetresolution);
}
Variant ifa_get_magic_quotes_gpc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_magic_quotes_gpc", 0, 1);
  return (x_get_magic_quotes_gpc());
}
Variant i_get_magic_quotes_gpc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_magic_quotes_gpc);
}
Variant ifa_xmlwriter_write_cdata(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_write_cdata", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_write_cdata(arg0, arg1));
}
Variant i_xmlwriter_write_cdata(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_cdata);
}
Variant ifa_str_word_count(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("str_word_count", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_str_word_count(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_str_word_count(arg0, arg1));
  CVarRef arg2(a2);
  return (x_str_word_count(arg0, arg1, arg2));
}
Variant i_str_word_count(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_str_word_count);
}
Variant ifa_tmpfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("tmpfile", 0, 1);
  return (x_tmpfile());
}
Variant i_tmpfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_tmpfile);
}
Variant ifa_array_uintersect_assoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_uintersect_assoc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_uintersect_assoc(count, arg0, arg1, arg2, p));
}
Variant i_array_uintersect_assoc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_uintersect_assoc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_array_uintersect_assoc(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_pixelgetyellow(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetyellow", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetyellow(arg0));
}
Variant i_pixelgetyellow(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetyellow);
}
Variant ifa_hphp_current_ref(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_current_ref", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return strongBind(x_hphp_current_ref(arg0));
}
Variant i_hphp_current_ref(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_current_ref);
}
Variant ifa_drawgetfillrule(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfillrule", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfillrule(arg0));
}
Variant i_drawgetfillrule(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfillrule);
}
Variant ifa_mysql_warning_count(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_warning_count", 1, 1);
  if (count <= 0) return (x_mysql_warning_count());
  CVarRef arg0(a0);
  return (x_mysql_warning_count(arg0));
}
Variant i_mysql_warning_count(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_warning_count);
}
Variant ifa_hphp_splfileobject_current(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_current", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_current(arg0));
}
Variant i_hphp_splfileobject_current(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_current);
}
Variant ifa_getservbyname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getservbyname", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_getservbyname(arg0, arg1));
}
Variant i_getservbyname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getservbyname);
}
Variant ifa_mcrypt_enc_get_iv_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_get_iv_size", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_get_iv_size(arg0));
}
Variant i_mcrypt_enc_get_iv_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_get_iv_size);
}
Variant ifa_posix_getrlimit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getrlimit", 0, 1);
  return (x_posix_getrlimit());
}
Variant i_posix_getrlimit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getrlimit);
}
Variant ifa_imap_clearflag_full(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("imap_clearflag_full", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_clearflag_full(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imap_clearflag_full(arg0, arg1, arg2, arg3));
}
Variant i_imap_clearflag_full(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_clearflag_full);
}
Variant ifa_pcntl_wtermsig(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pcntl_wtermsig", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pcntl_wtermsig(arg0));
}
Variant i_pcntl_wtermsig(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_wtermsig);
}
Variant ifa_hphp_recursivedirectoryiterator_seek(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_seek", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_recursivedirectoryiterator_seek(arg0, arg1), null);
}
Variant i_hphp_recursivedirectoryiterator_seek(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_seek);
}
Variant ifa_hphp_recursivedirectoryiterator_getsubpath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_getsubpath", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_getsubpath(arg0));
}
Variant i_hphp_recursivedirectoryiterator_getsubpath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_getsubpath);
}
Variant ifa_str_ireplace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("str_ireplace", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_str_ireplace(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  return (x_str_ireplace(arg0, arg1, arg2, arg3));
}
Variant i_str_ireplace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_str_ireplace);
}
Variant ifa_mysql_query(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_query", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_query(arg0));
  CVarRef arg1(a1);
  return (x_mysql_query(arg0, arg1));
}
Variant i_mysql_query(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_query);
}
Variant ifa_dom_xpath_register_php_functions(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("dom_xpath_register_php_functions", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_dom_xpath_register_php_functions(arg0));
  CVarRef arg1(a1);
  return (x_dom_xpath_register_php_functions(arg0, arg1));
}
Variant i_dom_xpath_register_php_functions(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_xpath_register_php_functions);
}
Variant ifa_imageellipse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imageellipse", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imageellipse(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imageellipse(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imageellipse);
}
Variant ifa_define(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("define", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_define(arg0, arg1));
  CVarRef arg2(a2);
  return (x_define(arg0, arg1, arg2));
}
Variant i_define(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_define);
}
Variant ifa_simplexml_load_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("simplexml_load_file", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_simplexml_load_file(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_simplexml_load_file(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_simplexml_load_file(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_simplexml_load_file(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_simplexml_load_file(arg0, arg1, arg2, arg3, arg4));
}
Variant i_simplexml_load_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_simplexml_load_file);
}
Variant ifa_mysql_real_escape_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_real_escape_string", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_real_escape_string(arg0));
  CVarRef arg1(a1);
  return (x_mysql_real_escape_string(arg0, arg1));
}
Variant i_mysql_real_escape_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_real_escape_string);
}
Variant ifa_min(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("min", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_min(count, arg0, p));
}
Variant i_min(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("min", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_min(count, arg0, p));
  }
}
Variant ifa_fb_lazy_stat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_lazy_stat", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_lazy_stat(arg0));
}
Variant i_fb_lazy_stat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_lazy_stat);
}
Variant ifa_magickgetimageinterlacescheme(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageinterlacescheme", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageinterlacescheme(arg0));
}
Variant i_magickgetimageinterlacescheme(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageinterlacescheme);
}
Variant ifa_scandir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("scandir", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_scandir(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_scandir(arg0, arg1));
  CVarRef arg2(a2);
  return (x_scandir(arg0, arg1, arg2));
}
Variant i_scandir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_scandir);
}
Variant ifa_magickremoveimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickremoveimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickremoveimage(arg0));
}
Variant i_magickremoveimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickremoveimage);
}
Variant ifa_fb_setprofile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_setprofile", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_setprofile(arg0), null);
}
Variant i_fb_setprofile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_setprofile);
}
Variant ifa_drawpoppattern(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawpoppattern", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawpoppattern(arg0), null);
}
Variant i_drawpoppattern(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpoppattern);
}
Variant ifa_xml_parser_create(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("xml_parser_create", 1, 1);
  if (count <= 0) return (x_xml_parser_create());
  CVarRef arg0(a0);
  return (x_xml_parser_create(arg0));
}
Variant i_xml_parser_create(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_parser_create);
}
Variant ifa_srand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("srand", 1, 1);
  if (count <= 0) return (x_srand(), null);
  CVarRef arg0(a0);
  return (x_srand(arg0), null);
}
Variant i_srand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_srand);
}
Variant ifa_pixelgetalpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetalpha", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetalpha(arg0));
}
Variant i_pixelgetalpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetalpha);
}
Variant ifa_drawpathcurvetosmoothabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("drawpathcurvetosmoothabsolute", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_drawpathcurvetosmoothabsolute(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_drawpathcurvetosmoothabsolute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathcurvetosmoothabsolute);
}
Variant ifa_wandgetexception(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("wandgetexception", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_wandgetexception(arg0));
}
Variant i_wandgetexception(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_wandgetexception);
}
Variant ifa_crc32(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("crc32", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_crc32(arg0));
}
Variant i_crc32(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_crc32);
}
Variant ifa_imap_utf7_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_utf7_decode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_utf7_decode(arg0));
}
Variant i_imap_utf7_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_utf7_decode);
}
Variant ifa_memory_get_allocation(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("memory_get_allocation", 0, 1);
  return (x_memory_get_allocation());
}
Variant i_memory_get_allocation(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memory_get_allocation);
}
Variant ifa_magicknextimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magicknextimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magicknextimage(arg0));
}
Variant i_magicknextimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicknextimage);
}
Variant ifa_imagecreatefromwbmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefromwbmp", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefromwbmp(arg0));
}
Variant i_imagecreatefromwbmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromwbmp);
}
Variant ifa_libxml_get_last_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("libxml_get_last_error", 0, 1);
  return (x_libxml_get_last_error());
}
Variant i_libxml_get_last_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_libxml_get_last_error);
}
Variant ifa_dom_document_get_elements_by_tag_name_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_document_get_elements_by_tag_name_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_document_get_elements_by_tag_name_ns(arg0, arg1, arg2));
}
Variant i_dom_document_get_elements_by_tag_name_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_get_elements_by_tag_name_ns);
}
Variant ifa_imap_search(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("imap_search", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_search(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_search(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imap_search(arg0, arg1, arg2, arg3));
}
Variant i_imap_search(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_search);
}
Variant ifa_collator_sort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("collator_sort", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_collator_sort(arg0, arg1));
  CVarRef arg2(a2);
  return (x_collator_sort(arg0, arg1, arg2));
}
Variant i_collator_sort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_sort);
}
Variant ifa_imagepsbbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("imagepsbbox", count, 3, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imagepsbbox(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_imagepsbbox(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_imagepsbbox(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_imagepsbbox(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagepsbbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepsbbox);
}
Variant ifa_magickgetimagefilename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagefilename", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagefilename(arg0));
}
Variant i_magickgetimagefilename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagefilename);
}
Variant ifa_hphp_splfileinfo_gettype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_gettype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_gettype(arg0));
}
Variant i_hphp_splfileinfo_gettype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_gettype);
}
Variant ifa_inclued_get_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("inclued_get_data", 0, 1);
  return (x_inclued_get_data());
}
Variant i_inclued_get_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_inclued_get_data);
}
Variant ifa_pixelsetblackquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetblackquantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetblackquantum(arg0, arg1), null);
}
Variant i_pixelsetblackquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetblackquantum);
}
Variant ifa_imap_msgno(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_msgno", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_msgno(arg0, arg1));
}
Variant i_imap_msgno(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_msgno);
}
Variant ifa_stream_socket_shutdown(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_socket_shutdown", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_socket_shutdown(arg0, arg1));
}
Variant i_stream_socket_shutdown(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_shutdown);
}
Variant ifa_usort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("usort", count, 2, 2, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  return (x_usort(arg0, arg1));
}
Variant i_usort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_usort);
}
Variant ifa_array_rand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("array_rand", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_array_rand(arg0));
  CVarRef arg1(a1);
  return (x_array_rand(arg0, arg1));
}
Variant i_array_rand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_rand);
}
Variant ifa_ispixelwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ispixelwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ispixelwand(arg0));
}
Variant i_ispixelwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ispixelwand);
}
Variant ifa_hphp_get_hardware_counters(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_get_hardware_counters", 0, 1);
  return (x_hphp_get_hardware_counters());
}
Variant i_hphp_get_hardware_counters(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_hardware_counters);
}
Variant ifa_drawsetgravity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetgravity", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetgravity(arg0, arg1), null);
}
Variant i_drawsetgravity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetgravity);
}
Variant ifa_mb_eregi(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_eregi", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_eregi(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_mb_eregi(arg0, arg1, arg2));
}
Variant i_mb_eregi(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_eregi);
}
Variant ifa_mb_strtoupper(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mb_strtoupper", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_strtoupper(arg0));
  CVarRef arg1(a1);
  return (x_mb_strtoupper(arg0, arg1));
}
Variant i_mb_strtoupper(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strtoupper);
}
Variant ifa_magickgetformat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetformat", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetformat(arg0));
}
Variant i_magickgetformat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetformat);
}
Variant ifa_call_user_func_array(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("call_user_func_array", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_call_user_func_array(arg0, arg1));
}
Variant i_call_user_func_array(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_call_user_func_array);
}
Variant ifa_socket_set_option(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("socket_set_option", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_socket_set_option(arg0, arg1, arg2, arg3));
}
Variant i_socket_set_option(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_set_option);
}
Variant ifa_ctype_upper(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_upper", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_upper(arg0));
}
Variant i_ctype_upper(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_upper);
}
Variant ifa_stream_socket_enable_crypto(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("stream_socket_enable_crypto", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_socket_enable_crypto(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_stream_socket_enable_crypto(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_stream_socket_enable_crypto(arg0, arg1, arg2, arg3));
}
Variant i_stream_socket_enable_crypto(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_enable_crypto);
}
Variant ifa_magicknormalizeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magicknormalizeimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magicknormalizeimage(arg0));
}
Variant i_magicknormalizeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicknormalizeimage);
}
Variant ifa_readdir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("readdir", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_readdir(arg0));
}
Variant i_readdir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_readdir);
}
Variant ifa_get_current_user(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_current_user", 0, 1);
  return (x_get_current_user());
}
Variant i_get_current_user(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_current_user);
}
Variant ifa_fseek(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("fseek", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_fseek(arg0, arg1));
  CVarRef arg2(a2);
  return (x_fseek(arg0, arg1, arg2));
}
Variant i_fseek(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fseek);
}
Variant ifa_cpu_get_model(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("cpu_get_model", 0, 1);
  return (x_cpu_get_model());
}
Variant i_cpu_get_model(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_cpu_get_model);
}
Variant ifa_magickcombineimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickcombineimages", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickcombineimages(arg0, arg1));
}
Variant i_magickcombineimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcombineimages);
}
Variant ifa_imagewbmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("imagewbmp", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagewbmp(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_imagewbmp(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imagewbmp(arg0, arg1, arg2));
}
Variant i_imagewbmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagewbmp);
}
Variant ifa_session_unregister(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("session_unregister", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_session_unregister(arg0));
}
Variant i_session_unregister(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_unregister);
}
Variant ifa_drawgettextdecoration(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgettextdecoration", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgettextdecoration(arg0));
}
Variant i_drawgettextdecoration(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgettextdecoration);
}
Variant ifa_pathinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("pathinfo", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_pathinfo(arg0));
  CVarRef arg1(a1);
  return (x_pathinfo(arg0, arg1));
}
Variant i_pathinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pathinfo);
}
Variant ifa_mb_substitute_character(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_substitute_character", 1, 1);
  if (count <= 0) return (x_mb_substitute_character());
  CVarRef arg0(a0);
  return (x_mb_substitute_character(arg0));
}
Variant i_mb_substitute_character(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_substitute_character);
}
Variant ifa_magickwaveimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickwaveimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickwaveimage(arg0, arg1, arg2));
}
Variant i_magickwaveimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickwaveimage);
}
Variant ifa_fwrite(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("fwrite", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_fwrite(arg0, arg1));
  CVarRef arg2(a2);
  return (x_fwrite(arg0, arg1, arg2));
}
Variant i_fwrite(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fwrite);
}
Variant ifa_openssl_open(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("openssl_open", count, 4, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_openssl_open(arg0, arg1, arg2, arg3));
}
Variant i_openssl_open(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_open);
}
Variant ifa_drawsetfillpatternurl(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfillpatternurl", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfillpatternurl(arg0, arg1));
}
Variant i_drawsetfillpatternurl(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfillpatternurl);
}
Variant ifa_dangling_server_proxy_new_request(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dangling_server_proxy_new_request", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dangling_server_proxy_new_request(arg0));
}
Variant i_dangling_server_proxy_new_request(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dangling_server_proxy_new_request);
}
Variant ifa_drawsetfontstyle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfontstyle", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfontstyle(arg0, arg1), null);
}
Variant i_drawsetfontstyle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfontstyle);
}
Variant ifa_fileatime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fileatime", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fileatime(arg0));
}
Variant i_fileatime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fileatime);
}
Variant ifa_memcache_connect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("memcache_connect", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_memcache_connect(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_connect(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_connect(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_memcache_connect(arg0, arg1, arg2, arg3));
}
Variant i_memcache_connect(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_connect);
}
Variant ifa_hphp_get_mutable_iterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_get_mutable_iterator", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_hphp_get_mutable_iterator(arg0));
}
Variant i_hphp_get_mutable_iterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_mutable_iterator);
}
Variant ifa_set_include_path(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("set_include_path", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_set_include_path(arg0));
}
Variant i_set_include_path(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_set_include_path);
}
Variant ifa_xml_set_processing_instruction_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_processing_instruction_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_set_processing_instruction_handler(arg0, arg1));
}
Variant i_xml_set_processing_instruction_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_processing_instruction_handler);
}
Variant ifa_imap_listscan(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imap_listscan", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imap_listscan(arg0, arg1, arg2, arg3));
}
Variant i_imap_listscan(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_listscan);
}
Variant ifa_property_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("property_exists", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_property_exists(arg0, arg1));
}
Variant i_property_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_property_exists);
}
Variant ifa_msg_set_queue(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("msg_set_queue", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_msg_set_queue(arg0, arg1));
}
Variant i_msg_set_queue(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_msg_set_queue);
}
Variant ifa_mb_stripos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_stripos", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_stripos(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_stripos(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_stripos(arg0, arg1, arg2, arg3));
}
Variant i_mb_stripos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_stripos);
}
Variant ifa_pixelsetopacityquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetopacityquantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetopacityquantum(arg0, arg1), null);
}
Variant i_pixelsetopacityquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetopacityquantum);
}
Variant ifa_gzseek(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("gzseek", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_gzseek(arg0, arg1));
  CVarRef arg2(a2);
  return (x_gzseek(arg0, arg1, arg2));
}
Variant i_gzseek(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzseek);
}
Variant ifa_magickgetimagebordercolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagebordercolor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagebordercolor(arg0));
}
Variant i_magickgetimagebordercolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagebordercolor);
}
Variant ifa_imagecolorclosestalpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("imagecolorclosestalpha", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_imagecolorclosestalpha(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imagecolorclosestalpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorclosestalpha);
}
Variant ifa_array_uintersect_uassoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4)) return throw_missing_arguments("array_uintersect_uassoc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  Array p;
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_uintersect_uassoc(count, arg0, arg1, arg2, arg3, p));
}
Variant i_array_uintersect_uassoc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 4)) return throw_missing_arguments("array_uintersect_uassoc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 4 ? params.slice(4, count - 4, false) : Array());
    return (x_array_uintersect_uassoc(count, arg0, arg1, arg2, arg3, p));
  }
}
Variant ifa_apc_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("apc_exists", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_exists(arg0));
  CVarRef arg1(a1);
  return (x_apc_exists(arg0, arg1));
}
Variant i_apc_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_exists);
}
Variant ifa_dom_element_get_attribute_node(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_element_get_attribute_node", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_element_get_attribute_node(arg0, arg1));
}
Variant i_dom_element_get_attribute_node(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_get_attribute_node);
}
Variant ifa_socket_connect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("socket_connect", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_socket_connect(arg0, arg1));
  CVarRef arg2(a2);
  return (x_socket_connect(arg0, arg1, arg2));
}
Variant i_socket_connect(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_connect);
}
Variant ifa_pixelsetblue(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetblue", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetblue(arg0, arg1), null);
}
Variant i_pixelsetblue(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetblue);
}
Variant ifa_imap_mail(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("imap_mail", count, 3, 7, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_mail(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_imap_mail(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_imap_mail(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_imap_mail(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imap_mail(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 7)) return throw_wrong_arguments("imap_mail", count, 3, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_imap_mail(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_imap_mail(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_imap_mail(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_imap_mail(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imap_mail(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_set_magic_quotes_runtime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("set_magic_quotes_runtime", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_set_magic_quotes_runtime(arg0));
}
Variant i_set_magic_quotes_runtime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_set_magic_quotes_runtime);
}
Variant ifa_ldap_next_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_next_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_next_attribute(arg0, arg1));
}
Variant i_ldap_next_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_next_attribute);
}
Variant ifa_hphp_splfileinfo_isexecutable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_isexecutable", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_isexecutable(arg0));
}
Variant i_hphp_splfileinfo_isexecutable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_isexecutable);
}
Variant ifa_stripcslashes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stripcslashes", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stripcslashes(arg0));
}
Variant i_stripcslashes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stripcslashes);
}
Variant ifa_magicktrimimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicktrimimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicktrimimage(arg0, arg1));
}
Variant i_magicktrimimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicktrimimage);
}
Variant ifa_magicksetwandsize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetwandsize", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetwandsize(arg0, arg1, arg2));
}
Variant i_magicksetwandsize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetwandsize);
}
Variant ifa_openssl_error_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("openssl_error_string", 0, 1);
  return (x_openssl_error_string());
}
Variant i_openssl_error_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_error_string);
}
Variant ifa_dom_document_create_attribute_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_document_create_attribute_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_document_create_attribute_ns(arg0, arg1, arg2));
}
Variant i_dom_document_create_attribute_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_attribute_ns);
}
Variant ifa_ldap_connect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("ldap_connect", 2, 1);
  if (count <= 0) return (x_ldap_connect());
  CVarRef arg0(a0);
  if (count <= 1) return (x_ldap_connect(arg0));
  CVarRef arg1(a1);
  return (x_ldap_connect(arg0, arg1));
}
Variant i_ldap_connect(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_connect);
}
Variant ifa_ldap_get_attributes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_get_attributes", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_get_attributes(arg0, arg1));
}
Variant i_ldap_get_attributes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_get_attributes);
}
Variant ifa_fb_load_local_databases(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_load_local_databases", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_load_local_databases(arg0), null);
}
Variant i_fb_load_local_databases(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_load_local_databases);
}
Variant ifa_openssl_free_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_free_key", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_free_key(arg0), null);
}
Variant i_openssl_free_key(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_free_key);
}
Variant ifa_ob_implicit_flush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("ob_implicit_flush", 1, 1);
  if (count <= 0) return (x_ob_implicit_flush(), null);
  CVarRef arg0(a0);
  return (x_ob_implicit_flush(arg0), null);
}
Variant i_ob_implicit_flush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_implicit_flush);
}
Variant ifa_mysql_get_host_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_get_host_info", 1, 1);
  if (count <= 0) return (x_mysql_get_host_info());
  CVarRef arg0(a0);
  return (x_mysql_get_host_info(arg0));
}
Variant i_mysql_get_host_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_get_host_info);
}
Variant ifa_array_diff(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_diff", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_diff(count, arg0, arg1, p));
}
Variant i_array_diff(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_diff", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_diff(count, arg0, arg1, p));
  }
}
Variant ifa_fb_htmlspecialchars(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("fb_htmlspecialchars", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_fb_htmlspecialchars(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_fb_htmlspecialchars(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_fb_htmlspecialchars(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_fb_htmlspecialchars(arg0, arg1, arg2, arg3));
}
Variant i_fb_htmlspecialchars(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_htmlspecialchars);
}
Variant ifa_magickgetimageblob(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageblob", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageblob(arg0));
}
Variant i_magickgetimageblob(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageblob);
}
Variant ifa_pagelet_server_task_start(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("pagelet_server_task_start", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_pagelet_server_task_start(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_pagelet_server_task_start(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_pagelet_server_task_start(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_pagelet_server_task_start(arg0, arg1, arg2, arg3));
}
Variant i_pagelet_server_task_start(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pagelet_server_task_start);
}
Variant ifa_get_included_files(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_included_files", 0, 1);
  return (x_get_included_files());
}
Variant i_get_included_files(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_included_files);
}
Variant ifa_apache_request_headers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apache_request_headers", 0, 1);
  return (x_apache_request_headers());
}
Variant i_apache_request_headers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apache_request_headers);
}
Variant ifa_imagegrabwindow(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imagegrabwindow", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagegrabwindow(arg0));
  CVarRef arg1(a1);
  return (x_imagegrabwindow(arg0, arg1));
}
Variant i_imagegrabwindow(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagegrabwindow);
}
Variant ifa_drawpopclippath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawpopclippath", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawpopclippath(arg0), null);
}
Variant i_drawpopclippath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpopclippath);
}
Variant ifa_register_tick_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("register_tick_function", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_register_tick_function(count, arg0, p));
}
Variant i_register_tick_function(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("register_tick_function", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_register_tick_function(count, arg0, p));
  }
}
Variant ifa_drawsetfillalpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfillalpha", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfillalpha(arg0, arg1), null);
}
Variant i_drawsetfillalpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfillalpha);
}
Variant ifa_idn_to_unicode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("idn_to_unicode", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_idn_to_unicode(arg0));
  VRefParam arg1(vref(a1));
  return (x_idn_to_unicode(arg0, arg1));
}
Variant i_idn_to_unicode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_idn_to_unicode);
}
Variant ifa_parse_str(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("parse_str", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_parse_str(arg0), null);
  VRefParam arg1(vref(a1));
  return (x_parse_str(arg0, arg1), null);
}
Variant i_parse_str(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_parse_str);
}
Variant ifa_bccomp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bccomp", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_bccomp(arg0, arg1));
  CVarRef arg2(a2);
  return (x_bccomp(arg0, arg1, arg2));
}
Variant i_bccomp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bccomp);
}
Variant ifa_dom_element_get_attribute_node_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_element_get_attribute_node_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_element_get_attribute_node_ns(arg0, arg1, arg2));
}
Variant i_dom_element_get_attribute_node_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_get_attribute_node_ns);
}
Variant ifa_imagecopy(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagecopy", count, 8, 8, 1);
}
Variant i_imagecopy(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 8)) return throw_wrong_arguments("imagecopy", count, 8, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagecopy(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_is_subclass_of(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("is_subclass_of", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_is_subclass_of(arg0, arg1));
}
Variant i_is_subclass_of(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_subclass_of);
}
Variant ifa_array_fill_keys(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("array_fill_keys", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_array_fill_keys(arg0, arg1));
}
Variant i_array_fill_keys(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_fill_keys);
}
Variant ifa_magickmodulateimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("magickmodulateimage", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_magickmodulateimage(arg0, arg1, arg2, arg3));
}
Variant i_magickmodulateimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmodulateimage);
}
Variant ifa_array_walk_recursive(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("array_walk_recursive", count, 2, 3, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_array_walk_recursive(arg0, arg1));
  CVarRef arg2(a2);
  return (x_array_walk_recursive(arg0, arg1, arg2));
}
Variant i_array_walk_recursive(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_walk_recursive);
}
Variant ifa_curl_multi_add_handle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("curl_multi_add_handle", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_curl_multi_add_handle(arg0, arg1));
}
Variant i_curl_multi_add_handle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_multi_add_handle);
}
Variant ifa_stat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stat", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stat(arg0));
}
Variant i_stat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stat);
}
Variant ifa_hphp_recursiveiteratoriterator___construct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("hphp_recursiveiteratoriterator___construct", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_hphp_recursiveiteratoriterator___construct(arg0, arg1, arg2, arg3));
}
Variant i_hphp_recursiveiteratoriterator___construct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursiveiteratoriterator___construct);
}
Variant ifa_hphp_splfileobject_fgetss(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileobject_fgetss", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileobject_fgetss(arg0, arg1));
}
Variant i_hphp_splfileobject_fgetss(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fgetss);
}
Variant ifa_dom_xpath_register_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_xpath_register_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_xpath_register_ns(arg0, arg1, arg2));
}
Variant i_dom_xpath_register_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_xpath_register_ns);
}
Variant ifa_getprotobyname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getprotobyname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_getprotobyname(arg0));
}
Variant i_getprotobyname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getprotobyname);
}
Variant ifa_range(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("range", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_range(arg0, arg1));
  CVarRef arg2(a2);
  return (x_range(arg0, arg1, arg2));
}
Variant i_range(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_range);
}
Variant ifa_strcoll(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strcoll", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strcoll(arg0, arg1));
}
Variant i_strcoll(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strcoll);
}
Variant ifa_pixelgetmagenta(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetmagenta", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetmagenta(arg0));
}
Variant i_pixelgetmagenta(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetmagenta);
}
Variant ifa_magickgetinterlacescheme(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetinterlacescheme", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetinterlacescheme(arg0));
}
Variant i_magickgetinterlacescheme(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetinterlacescheme);
}
Variant ifa_gd_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("gd_info", 0, 1);
  return (x_gd_info());
}
Variant i_gd_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gd_info);
}
Variant ifa_ini_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ini_get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ini_get(arg0));
}
Variant i_ini_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ini_get);
}
Variant ifa_timezone_offset_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("timezone_offset_get", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_timezone_offset_get(arg0, arg1));
}
Variant i_timezone_offset_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_timezone_offset_get);
}
Variant ifa_magickgetimagedispose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagedispose", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagedispose(arg0));
}
Variant i_magickgetimagedispose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagedispose);
}
Variant ifa_magickgetimagesize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagesize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagesize(arg0));
}
Variant i_magickgetimagesize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagesize);
}
Variant ifa_long2ip(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("long2ip", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_long2ip(arg0));
}
Variant i_long2ip(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_long2ip);
}
Variant ifa_mb_ereg_search_pos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("mb_ereg_search_pos", 2, 1);
  if (count <= 0) return (x_mb_ereg_search_pos());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_ereg_search_pos(arg0));
  CVarRef arg1(a1);
  return (x_mb_ereg_search_pos(arg0, arg1));
}
Variant i_mb_ereg_search_pos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_search_pos);
}
Variant ifa_htmlentities(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("htmlentities", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_htmlentities(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_htmlentities(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_htmlentities(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_htmlentities(arg0, arg1, arg2, arg3));
}
Variant i_htmlentities(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_htmlentities);
}
Variant ifa_system(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("system", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_system(arg0));
  VRefParam arg1(vref(a1));
  return (x_system(arg0, arg1));
}
Variant i_system(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_system);
}
Variant ifa_version_compare(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("version_compare", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_version_compare(arg0, arg1));
  CVarRef arg2(a2);
  return (x_version_compare(arg0, arg1, arg2));
}
Variant i_version_compare(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_version_compare);
}
Variant ifa_magicksetimageredprimary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetimageredprimary", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetimageredprimary(arg0, arg1, arg2));
}
Variant i_magicksetimageredprimary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageredprimary);
}
Variant ifa_mysql_num_fields(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mysql_num_fields", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mysql_num_fields(arg0));
}
Variant i_mysql_num_fields(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_num_fields);
}
Variant ifa_stream_context_set_param(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_context_set_param", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_context_set_param(arg0, arg1));
}
Variant i_stream_context_set_param(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_context_set_param);
}
Variant ifa_hphp_recursivedirectoryiterator_rewind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_rewind", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_rewind(arg0), null);
}
Variant i_hphp_recursivedirectoryiterator_rewind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_rewind);
}
Variant ifa_magickqueryconfigureoption(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickqueryconfigureoption", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickqueryconfigureoption(arg0));
}
Variant i_magickqueryconfigureoption(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickqueryconfigureoption);
}
Variant ifa_assert(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("assert", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_assert(arg0));
}
Variant i_assert(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_assert);
}
Variant ifa_session_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("session_name", 1, 1);
  if (count <= 0) return (x_session_name());
  CVarRef arg0(a0);
  return (x_session_name(arg0));
}
Variant i_session_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_name);
}
Variant ifa_stream_get_meta_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stream_get_meta_data", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stream_get_meta_data(arg0));
}
Variant i_stream_get_meta_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_get_meta_data);
}
Variant ifa_openssl_sign(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openssl_sign", count, 3, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_sign(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_sign(arg0, arg1, arg2, arg3));
}
Variant i_openssl_sign(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_sign);
}
Variant ifa_mb_get_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_get_info", 1, 1);
  if (count <= 0) return (x_mb_get_info());
  CVarRef arg0(a0);
  return (x_mb_get_info(arg0));
}
Variant i_mb_get_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_get_info);
}
Variant ifa_openssl_x509_export(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("openssl_x509_export", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_openssl_x509_export(arg0, arg1));
  CVarRef arg2(a2);
  return (x_openssl_x509_export(arg0, arg1, arg2));
}
Variant i_openssl_x509_export(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_x509_export);
}
Variant ifa_chop(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("chop", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_chop(arg0));
  CVarRef arg1(a1);
  return (x_chop(arg0, arg1));
}
Variant i_chop(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_chop);
}
Variant ifa_imagefilledellipse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imagefilledellipse", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imagefilledellipse(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagefilledellipse(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagefilledellipse);
}
Variant ifa_imap_header(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("imap_header", count, 2, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_header(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_header(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_imap_header(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_imap_header(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imap_header(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_header);
}
Variant ifa_gzfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gzfile", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzfile(arg0));
  CVarRef arg1(a1);
  return (x_gzfile(arg0, arg1));
}
Variant i_gzfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzfile);
}
Variant ifa_sprintf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("sprintf", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_sprintf(count, arg0, p));
}
Variant i_sprintf(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("sprintf", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_sprintf(count, arg0, p));
  }
}
Variant ifa_magickgetwandsize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetwandsize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetwandsize(arg0));
}
Variant i_magickgetwandsize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetwandsize);
}
Variant ifa_magickcropimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("magickcropimage", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_magickcropimage(arg0, arg1, arg2, arg3, arg4));
}
Variant i_magickcropimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcropimage);
}
Variant ifa_function_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("function_exists", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_function_exists(arg0));
}
Variant i_function_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_function_exists);
}
Variant ifa_mb_encode_mimeheader(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("mb_encode_mimeheader", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_encode_mimeheader(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_encode_mimeheader(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_encode_mimeheader(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mb_encode_mimeheader(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mb_encode_mimeheader(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mb_encode_mimeheader(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_encode_mimeheader);
}
Variant ifa_stream_bucket_append(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_bucket_append", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_bucket_append(arg0, arg1), null);
}
Variant i_stream_bucket_append(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_bucket_append);
}
Variant ifa_drawgetfillopacity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfillopacity", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfillopacity(arg0));
}
Variant i_drawgetfillopacity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfillopacity);
}
Variant ifa_call_user_func_array_async(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("call_user_func_array_async", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_call_user_func_array_async(arg0, arg1));
}
Variant i_call_user_func_array_async(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_call_user_func_array_async);
}
Variant ifa_mcrypt_get_cipher_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_get_cipher_name", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_get_cipher_name(arg0));
}
Variant i_mcrypt_get_cipher_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_get_cipher_name);
}
Variant ifa_touch(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("touch", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_touch(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_touch(arg0, arg1));
  CVarRef arg2(a2);
  return (x_touch(arg0, arg1, arg2));
}
Variant i_touch(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_touch);
}
Variant ifa_drawsetfont(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfont", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfont(arg0, arg1));
}
Variant i_drawsetfont(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfont);
}
Variant ifa_is_writeable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_writeable", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_writeable(arg0));
}
Variant i_is_writeable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_writeable);
}
Variant ifa_hphp_splfileobject_getflags(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_getflags", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_getflags(arg0));
}
Variant i_hphp_splfileobject_getflags(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_getflags);
}
Variant ifa_mt_getrandmax(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("mt_getrandmax", 0, 1);
  return (x_mt_getrandmax());
}
Variant i_mt_getrandmax(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mt_getrandmax);
}
Variant ifa_imap_rfc822_parse_adrlist(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_rfc822_parse_adrlist", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_rfc822_parse_adrlist(arg0, arg1));
}
Variant i_imap_rfc822_parse_adrlist(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_rfc822_parse_adrlist);
}
Variant ifa_mb_output_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mb_output_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mb_output_handler(arg0, arg1));
}
Variant i_mb_output_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_output_handler);
}
Variant ifa_quoted_printable_encode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("quoted_printable_encode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_quoted_printable_encode(arg0));
}
Variant i_quoted_printable_encode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_quoted_printable_encode);
}
Variant ifa_fb_get_taint_warning_counts(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fb_get_taint_warning_counts", 0, 1);
  return (x_fb_get_taint_warning_counts());
}
Variant i_fb_get_taint_warning_counts(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_get_taint_warning_counts);
}
Variant ifa_imap_qprint(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_qprint", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_qprint(arg0));
}
Variant i_imap_qprint(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_qprint);
}
Variant ifa_set_time_limit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("set_time_limit", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_set_time_limit(arg0), null);
}
Variant i_set_time_limit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_set_time_limit);
}
Variant ifa_getmyinode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getmyinode", 0, 1);
  return (x_getmyinode());
}
Variant i_getmyinode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getmyinode);
}
Variant ifa_mb_ereg_match(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_ereg_match", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_ereg_match(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_ereg_match(arg0, arg1, arg2));
}
Variant i_mb_ereg_match(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_match);
}
Variant ifa_strval(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("strval", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_strval(arg0));
}
Variant i_strval(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strval);
}
Variant ifa_magickprofileimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("magickprofileimage", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_magickprofileimage(arg0, arg1));
  CVarRef arg2(a2);
  return (x_magickprofileimage(arg0, arg1, arg2));
}
Variant i_magickprofileimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickprofileimage);
}
Variant ifa_hphpd_get_user_commands(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphpd_get_user_commands", 0, 1);
  return (x_hphpd_get_user_commands());
}
Variant i_hphpd_get_user_commands(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphpd_get_user_commands);
}
Variant ifa_hphpd_break(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("hphpd_break", 1, 1);
  if (count <= 0) return (x_hphpd_break(), null);
  CVarRef arg0(a0);
  return (x_hphpd_break(arg0), null);
}
Variant i_hphpd_break(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphpd_break);
}
Variant ifa_drawsetfontfamily(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfontfamily", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfontfamily(arg0, arg1));
}
Variant i_drawsetfontfamily(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfontfamily);
}
Variant ifa_stream_resolve_include_path(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("stream_resolve_include_path", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_stream_resolve_include_path(arg0));
  CVarRef arg1(a1);
  return (x_stream_resolve_include_path(arg0, arg1));
}
Variant i_stream_resolve_include_path(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_resolve_include_path);
}
Variant ifa_quotemeta(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("quotemeta", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_quotemeta(arg0));
}
Variant i_quotemeta(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_quotemeta);
}
Variant ifa_exif_imagetype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("exif_imagetype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_exif_imagetype(arg0));
}
Variant i_exif_imagetype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_exif_imagetype);
}
Variant ifa_stripslashes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stripslashes", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stripslashes(arg0));
}
Variant i_stripslashes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stripslashes);
}
Variant ifa_var_export(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("var_export", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_var_export(arg0));
  CVarRef arg1(a1);
  return (x_var_export(arg0, arg1));
}
Variant i_var_export(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_var_export);
}
Variant ifa_openssl_pkcs12_export(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("openssl_pkcs12_export", count, 4, 5, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_openssl_pkcs12_export(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_openssl_pkcs12_export(arg0, arg1, arg2, arg3, arg4));
}
Variant i_openssl_pkcs12_export(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkcs12_export);
}
Variant ifa_date_default_timezone_set(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("date_default_timezone_set", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_date_default_timezone_set(arg0));
}
Variant i_date_default_timezone_set(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_default_timezone_set);
}
Variant ifa_magickgetimagecompose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagecompose", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagecompose(arg0));
}
Variant i_magickgetimagecompose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagecompose);
}
Variant ifa_collator_get_strength(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("collator_get_strength", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_collator_get_strength(arg0));
}
Variant i_collator_get_strength(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_get_strength);
}
Variant ifa_dom_namednodemap_get_named_item(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_namednodemap_get_named_item", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_namednodemap_get_named_item(arg0, arg1));
}
Variant i_dom_namednodemap_get_named_item(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_namednodemap_get_named_item);
}
Variant ifa_memcache_get_extended_stats(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("memcache_get_extended_stats", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_memcache_get_extended_stats(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_get_extended_stats(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_get_extended_stats(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_memcache_get_extended_stats(arg0, arg1, arg2, arg3));
}
Variant i_memcache_get_extended_stats(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_get_extended_stats);
}
Variant ifa_ksort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("ksort", count, 1, 2, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (x_ksort(arg0));
  CVarRef arg1(a1);
  return (x_ksort(arg0, arg1));
}
Variant i_ksort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ksort);
}
Variant ifa_xmlwriter_write_dtd_attlist(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("xmlwriter_write_dtd_attlist", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_xmlwriter_write_dtd_attlist(arg0, arg1, arg2));
}
Variant i_xmlwriter_write_dtd_attlist(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_dtd_attlist);
}
Variant ifa_posix_getppid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getppid", 0, 1);
  return (x_posix_getppid());
}
Variant i_posix_getppid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getppid);
}
Variant ifa_fb_curl_multi_fdset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("fb_curl_multi_fdset", count, 4, 5, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  VRefParam arg2(vref(a2));
  VRefParam arg3(vref(a3));
  if (count <= 4) return (x_fb_curl_multi_fdset(arg0, arg1, arg2, arg3));
  VRefParam arg4(vref(a4));
  return (x_fb_curl_multi_fdset(arg0, arg1, arg2, arg3, arg4));
}
Variant i_fb_curl_multi_fdset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_curl_multi_fdset);
}
Variant ifa_imagefilter(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_wrong_arguments("imagefilter", count, 2, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imagefilter(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_imagefilter(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_imagefilter(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_imagefilter(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_imagefilter(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagefilter(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagefilter);
}
Variant ifa_stream_socket_recvfrom(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("stream_socket_recvfrom", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_socket_recvfrom(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_stream_socket_recvfrom(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_stream_socket_recvfrom(arg0, arg1, arg2, arg3));
}
Variant i_stream_socket_recvfrom(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_recvfrom);
}
Variant ifa_hphp_splfileinfo___tostring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo___tostring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo___tostring(arg0));
}
Variant i_hphp_splfileinfo___tostring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo___tostring);
}
Variant ifa_timezone_open(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("timezone_open", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_timezone_open(arg0));
}
Variant i_timezone_open(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_timezone_open);
}
Variant ifa_pixelsetgreenquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetgreenquantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetgreenquantum(arg0, arg1), null);
}
Variant i_pixelsetgreenquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetgreenquantum);
}
Variant ifa_drawpathellipticarcabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawpathellipticarcabsolute", count, 8, 8, 1);
}
Variant i_drawpathellipticarcabsolute(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 8)) return throw_wrong_arguments("drawpathellipticarcabsolute", count, 8, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawpathellipticarcabsolute(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7), null);
  }
}
Variant ifa_dom_node_clone_node(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("dom_node_clone_node", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_dom_node_clone_node(arg0));
  CVarRef arg1(a1);
  return (x_dom_node_clone_node(arg0, arg1));
}
Variant i_dom_node_clone_node(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_clone_node);
}
Variant ifa_imagepstext(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagepstext", count, 8, 12, 1);
}
Variant i_imagepstext(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 8 || count > 12)) return throw_wrong_arguments("imagepstext", count, 8, 12, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 8) return (x_imagepstext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 9) return (x_imagepstext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
    CVarRef arg9((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 10) return (x_imagepstext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
    CVarRef arg10((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 11) return (x_imagepstext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10));
    CVarRef arg11((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagepstext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11));
  }
}
Variant ifa_ldap_sort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_sort", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_sort(arg0, arg1, arg2));
}
Variant i_ldap_sort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_sort);
}
Variant ifa_escapeshellcmd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("escapeshellcmd", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_escapeshellcmd(arg0));
}
Variant i_escapeshellcmd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_escapeshellcmd);
}
Variant ifa_hphp_object_pointer(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_object_pointer", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_object_pointer(arg0));
}
Variant i_hphp_object_pointer(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_object_pointer);
}
Variant ifa_magickequalizeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickequalizeimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickequalizeimage(arg0));
}
Variant i_magickequalizeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickequalizeimage);
}
Variant ifa_pcntl_signal(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("pcntl_signal", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_pcntl_signal(arg0, arg1));
  CVarRef arg2(a2);
  return (x_pcntl_signal(arg0, arg1, arg2));
}
Variant i_pcntl_signal(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_signal);
}
Variant ifa_clearstatcache(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("clearstatcache", 0, 1);
  return (x_clearstatcache(), null);
}
Variant i_clearstatcache(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clearstatcache);
}
Variant ifa_zend_logo_guid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("zend_logo_guid", 0, 1);
  return (x_zend_logo_guid());
}
Variant i_zend_logo_guid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_zend_logo_guid);
}
Variant ifa_magickmontageimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickmontageimage", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickmontageimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickmontageimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmontageimage);
}
Variant ifa_money_format(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("money_format", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_money_format(arg0, arg1));
}
Variant i_money_format(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_money_format);
}
Variant ifa_mailparse_msg_extract_part_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mailparse_msg_extract_part_file", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mailparse_msg_extract_part_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mailparse_msg_extract_part_file(arg0, arg1, arg2));
}
Variant i_mailparse_msg_extract_part_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_extract_part_file);
}
Variant ifa_array_product(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("array_product", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_array_product(arg0));
}
Variant i_array_product(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_product);
}
Variant ifa_imap_delete(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("imap_delete", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_delete(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imap_delete(arg0, arg1, arg2));
}
Variant i_imap_delete(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_delete);
}
Variant ifa_hphp_splfileinfo_getlinktarget(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getlinktarget", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getlinktarget(arg0));
}
Variant i_hphp_splfileinfo_getlinktarget(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getlinktarget);
}
Variant ifa_mcrypt_get_iv_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mcrypt_get_iv_size", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mcrypt_get_iv_size(arg0, arg1));
}
Variant i_mcrypt_get_iv_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_get_iv_size);
}
Variant ifa_array_chunk(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("array_chunk", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_array_chunk(arg0, arg1));
  CVarRef arg2(a2);
  return (x_array_chunk(arg0, arg1, arg2));
}
Variant i_array_chunk(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_chunk);
}
Variant ifa_session_encode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("session_encode", 0, 1);
  return (x_session_encode());
}
Variant i_session_encode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_encode);
}
Variant ifa_magicksolarizeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksolarizeimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksolarizeimage(arg0, arg1));
}
Variant i_magicksolarizeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksolarizeimage);
}
Variant ifa_imagecreatefromxpm(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefromxpm", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefromxpm(arg0));
}
Variant i_imagecreatefromxpm(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromxpm);
}
Variant ifa_dom_element_has_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_element_has_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_element_has_attribute(arg0, arg1));
}
Variant i_dom_element_has_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_has_attribute);
}
Variant ifa_hphp_recursivedirectoryiterator___construct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("hphp_recursivedirectoryiterator___construct", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_hphp_recursivedirectoryiterator___construct(arg0, arg1, arg2));
}
Variant i_hphp_recursivedirectoryiterator___construct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator___construct);
}
Variant ifa_magickreadimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickreadimages", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickreadimages(arg0, arg1));
}
Variant i_magickreadimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickreadimages);
}
Variant ifa_magicksetimagebordercolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagebordercolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagebordercolor(arg0, arg1));
}
Variant i_magicksetimagebordercolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagebordercolor);
}
Variant ifa_magickwriteimagefile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickwriteimagefile", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickwriteimagefile(arg0, arg1));
}
Variant i_magickwriteimagefile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickwriteimagefile);
}
Variant ifa_openssl_private_encrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openssl_private_encrypt", count, 3, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_private_encrypt(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_private_encrypt(arg0, arg1, arg2, arg3));
}
Variant i_openssl_private_encrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_private_encrypt);
}
Variant ifa_drawgetclipunits(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetclipunits", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetclipunits(arg0));
}
Variant i_drawgetclipunits(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetclipunits);
}
Variant ifa_assert_options(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("assert_options", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_assert_options(arg0));
  CVarRef arg1(a1);
  return (x_assert_options(arg0, arg1));
}
Variant i_assert_options(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_assert_options);
}
Variant ifa_fb_rpc_intercept_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("fb_rpc_intercept_handler", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  VRefParam arg4(vref(a4));
  return (x_fb_rpc_intercept_handler(arg0, arg1, arg2, arg3, arg4));
}
Variant i_fb_rpc_intercept_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_rpc_intercept_handler);
}
Variant ifa_curl_multi_info_read(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("curl_multi_info_read", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_curl_multi_info_read(arg0));
  VRefParam arg1(vref(a1));
  return (x_curl_multi_info_read(arg0, arg1));
}
Variant i_curl_multi_info_read(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_multi_info_read);
}
Variant ifa_mb_encode_numericentity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_encode_numericentity", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_encode_numericentity(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_encode_numericentity(arg0, arg1, arg2));
}
Variant i_mb_encode_numericentity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_encode_numericentity);
}
Variant ifa_proc_get_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("proc_get_status", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_proc_get_status(arg0));
}
Variant i_proc_get_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_proc_get_status);
}
Variant ifa_dom_element_set_id_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_element_set_id_attribute", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_element_set_id_attribute(arg0, arg1, arg2));
}
Variant i_dom_element_set_id_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_set_id_attribute);
}
Variant ifa_hphp_splfileinfo_getinode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getinode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getinode(arg0));
}
Variant i_hphp_splfileinfo_getinode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getinode);
}
Variant ifa_mysql_fetch_row(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mysql_fetch_row", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mysql_fetch_row(arg0));
}
Variant i_mysql_fetch_row(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_fetch_row);
}
Variant ifa_imagecolorallocatealpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("imagecolorallocatealpha", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_imagecolorallocatealpha(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imagecolorallocatealpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorallocatealpha);
}
Variant ifa_mb_parse_str(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mb_parse_str", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_parse_str(arg0));
  VRefParam arg1(vref(a1));
  return (x_mb_parse_str(arg0, arg1));
}
Variant i_mb_parse_str(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_parse_str);
}
Variant ifa_fb_thrift_serialize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_thrift_serialize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_thrift_serialize(arg0));
}
Variant i_fb_thrift_serialize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_thrift_serialize);
}
Variant ifa_is_numeric(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_numeric", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_numeric(arg0));
}
Variant i_is_numeric(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_numeric);
}
Variant ifa_date_sunset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("date_sunset", count, 1, 6, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_date_sunset(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_date_sunset(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_date_sunset(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_date_sunset(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_date_sunset(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_date_sunset(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_date_sunset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_sunset);
}
Variant ifa_mcrypt_generic_init(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("mcrypt_generic_init", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_mcrypt_generic_init(arg0, arg1, arg2));
}
Variant i_mcrypt_generic_init(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_generic_init);
}
Variant ifa_imap_get_quota(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_get_quota", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_get_quota(arg0, arg1));
}
Variant i_imap_get_quota(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_get_quota);
}
Variant ifa_drawsettextencoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsettextencoding", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsettextencoding(arg0, arg1), null);
}
Variant i_drawsettextencoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsettextencoding);
}
Variant ifa_rewinddir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("rewinddir", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_rewinddir(arg0), null);
}
Variant i_rewinddir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rewinddir);
}
Variant ifa_fileperms(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fileperms", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fileperms(arg0));
}
Variant i_fileperms(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fileperms);
}
Variant ifa_fscanf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("fscanf", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(ref(a2));
  if (count >= 4) p.append(ref(a3));
  if (count >= 5) p.append(ref(a4));
  if (count >= 6) p.append(ref(a5));
  return (x_fscanf(count, arg0, arg1, p));
}
Variant i_fscanf(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("fscanf", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_fscanf(count, arg0, arg1, p));
  }
}
Variant ifa_read_exif_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("read_exif_data", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_read_exif_data(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_read_exif_data(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_read_exif_data(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_read_exif_data(arg0, arg1, arg2, arg3));
}
Variant i_read_exif_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_read_exif_data);
}
Variant ifa_pixelgetblackquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetblackquantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetblackquantum(arg0));
}
Variant i_pixelgetblackquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetblackquantum);
}
Variant ifa_hphp_splfileobject_fstat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_fstat", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_fstat(arg0));
}
Variant i_hphp_splfileobject_fstat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fstat);
}
Variant ifa_magicksetimagepixels(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("magicksetimagepixels", count, 8, 8, 1);
}
Variant i_magicksetimagepixels(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 8)) return throw_wrong_arguments("magicksetimagepixels", count, 8, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_magicksetimagepixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_hphpd_client_ctrl(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphpd_client_ctrl", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphpd_client_ctrl(arg0, arg1));
}
Variant i_hphpd_client_ctrl(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphpd_client_ctrl);
}
Variant ifa_hphp_splfileinfo_getctime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getctime", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getctime(arg0));
}
Variant i_hphp_splfileinfo_getctime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getctime);
}
Variant ifa_magicksetimageiterations(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimageiterations", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimageiterations(arg0, arg1));
}
Variant i_magicksetimageiterations(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageiterations);
}
Variant ifa_mysql_fetch_assoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mysql_fetch_assoc", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mysql_fetch_assoc(arg0));
}
Variant i_mysql_fetch_assoc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_fetch_assoc);
}
Variant ifa_openssl_x509_free(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_x509_free", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_x509_free(arg0), null);
}
Variant i_openssl_x509_free(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_x509_free);
}
Variant ifa_openssl_get_md_methods(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("openssl_get_md_methods", 1, 1);
  if (count <= 0) return (x_openssl_get_md_methods());
  CVarRef arg0(a0);
  return (x_openssl_get_md_methods(arg0));
}
Variant i_openssl_get_md_methods(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_get_md_methods);
}
Variant ifa_magicksetsize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetsize", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetsize(arg0, arg1, arg2));
}
Variant i_magicksetsize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetsize);
}
Variant ifa_memcache_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("memcache_replace", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_replace(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_memcache_replace(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_memcache_replace(arg0, arg1, arg2, arg3, arg4));
}
Variant i_memcache_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_replace);
}
Variant ifa_magicksetimagetype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagetype", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagetype(arg0, arg1));
}
Variant i_magicksetimagetype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagetype);
}
Variant ifa_check_user_func_async(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("check_user_func_async", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_check_user_func_async(arg0));
  CVarRef arg1(a1);
  return (x_check_user_func_async(arg0, arg1));
}
Variant i_check_user_func_async(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_check_user_func_async);
}
Variant ifa_disk_free_space(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("disk_free_space", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_disk_free_space(arg0));
}
Variant i_disk_free_space(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_disk_free_space);
}
Variant ifa_mysql_affected_rows(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_affected_rows", 1, 1);
  if (count <= 0) return (x_mysql_affected_rows());
  CVarRef arg0(a0);
  return (x_mysql_affected_rows(arg0));
}
Variant i_mysql_affected_rows(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_affected_rows);
}
Variant ifa_sql_regcase(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sql_regcase", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sql_regcase(arg0));
}
Variant i_sql_regcase(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sql_regcase);
}
Variant ifa_stream_socket_get_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_socket_get_name", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_socket_get_name(arg0, arg1));
}
Variant i_stream_socket_get_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_get_name);
}
Variant ifa_array_merge(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_merge", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_merge(count, arg0, p));
}
Variant i_array_merge(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_merge", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_array_merge(count, arg0, p));
  }
}
Variant ifa_dom_xpath_query(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("dom_xpath_query", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_dom_xpath_query(arg0, arg1));
  CVarRef arg2(a2);
  return (x_dom_xpath_query(arg0, arg1, arg2));
}
Variant i_dom_xpath_query(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_xpath_query);
}
Variant ifa_magickrollimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickrollimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickrollimage(arg0, arg1, arg2));
}
Variant i_magickrollimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickrollimage);
}
Variant ifa_magickhasnextimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickhasnextimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickhasnextimage(arg0));
}
Variant i_magickhasnextimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickhasnextimage);
}
Variant ifa_drawaffine(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawaffine", count, 7, 7, 1);
}
Variant i_drawaffine(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 7)) return throw_wrong_arguments("drawaffine", count, 7, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawaffine(arg0, arg1, arg2, arg3, arg4, arg5, arg6), null);
  }
}
Variant ifa_magickgetsamplingfactors(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetsamplingfactors", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetsamplingfactors(arg0));
}
Variant i_magickgetsamplingfactors(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetsamplingfactors);
}
Variant ifa_octdec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("octdec", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_octdec(arg0));
}
Variant i_octdec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_octdec);
}
Variant ifa_i18n_loc_get_default(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("i18n_loc_get_default", 0, 1);
  return (x_i18n_loc_get_default());
}
Variant i_i18n_loc_get_default(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_i18n_loc_get_default);
}
Variant ifa_imap_mail_move(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("imap_mail_move", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_mail_move(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imap_mail_move(arg0, arg1, arg2, arg3));
}
Variant i_imap_mail_move(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_mail_move);
}
Variant ifa_imagecolortransparent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imagecolortransparent", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagecolortransparent(arg0));
  CVarRef arg1(a1);
  return (x_imagecolortransparent(arg0, arg1));
}
Variant i_imagecolortransparent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolortransparent);
}
Variant ifa_apache_setenv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("apache_setenv", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_apache_setenv(arg0, arg1));
  CVarRef arg2(a2);
  return (x_apache_setenv(arg0, arg1, arg2));
}
Variant i_apache_setenv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apache_setenv);
}
Variant ifa_mb_ereg_search(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("mb_ereg_search", 2, 1);
  if (count <= 0) return (x_mb_ereg_search());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_ereg_search(arg0));
  CVarRef arg1(a1);
  return (x_mb_ereg_search(arg0, arg1));
}
Variant i_mb_ereg_search(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_search);
}
Variant ifa_posix_setgid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_setgid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_setgid(arg0));
}
Variant i_posix_setgid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_setgid);
}
Variant ifa_destroypixelwands(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("destroypixelwands", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_destroypixelwands(arg0), null);
}
Variant i_destroypixelwands(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_destroypixelwands);
}
Variant ifa_setlocale(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("setlocale", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_setlocale(count, arg0, arg1, p));
}
Variant i_setlocale(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("setlocale", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_setlocale(count, arg0, arg1, p));
  }
}
Variant ifa_hphp_process_abort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_process_abort", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_process_abort(arg0));
}
Variant i_hphp_process_abort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_process_abort);
}
Variant ifa_hphp_get_extension_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_get_extension_info", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_get_extension_info(arg0));
}
Variant i_hphp_get_extension_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_extension_info);
}
Variant ifa_clock_gettime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("clock_gettime", count, 3, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  VRefParam arg2(vref(a2));
  return (x_clock_gettime(arg0, arg1, arg2));
}
Variant i_clock_gettime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clock_gettime);
}
Variant ifa_pixelgetgreenquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetgreenquantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetgreenquantum(arg0));
}
Variant i_pixelgetgreenquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetgreenquantum);
}
Variant ifa_openssl_private_decrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openssl_private_decrypt", count, 3, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_private_decrypt(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_private_decrypt(arg0, arg1, arg2, arg3));
}
Variant i_openssl_private_decrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_private_decrypt);
}
Variant ifa_hphp_instanceof(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_instanceof", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_instanceof(arg0, arg1));
}
Variant i_hphp_instanceof(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_instanceof);
}
Variant ifa_pixelgetiteratorexceptionstring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetiteratorexceptionstring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetiteratorexceptionstring(arg0));
}
Variant i_pixelgetiteratorexceptionstring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetiteratorexceptionstring);
}
Variant ifa_is_callable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("is_callable", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_is_callable(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_is_callable(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_is_callable(arg0, arg1, arg2));
}
Variant i_is_callable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_callable);
}
Variant ifa_imap_subscribe(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_subscribe", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_subscribe(arg0, arg1));
}
Variant i_imap_subscribe(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_subscribe);
}
Variant ifa_is_dir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_dir", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_dir(arg0));
}
Variant i_is_dir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_dir);
}
Variant ifa_link(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("link", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_link(arg0, arg1));
}
Variant i_link(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_link);
}
Variant ifa_xml_parser_create_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("xml_parser_create_ns", 2, 1);
  if (count <= 0) return (x_xml_parser_create_ns());
  CVarRef arg0(a0);
  if (count <= 1) return (x_xml_parser_create_ns(arg0));
  CVarRef arg1(a1);
  return (x_xml_parser_create_ns(arg0, arg1));
}
Variant i_xml_parser_create_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_parser_create_ns);
}
Variant ifa_collator_asort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("collator_asort", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_collator_asort(arg0, arg1));
  CVarRef arg2(a2);
  return (x_collator_asort(arg0, arg1, arg2));
}
Variant i_collator_asort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_asort);
}
Variant ifa_hphp_get_call_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_get_call_info", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_get_call_info(arg0, arg1));
}
Variant i_hphp_get_call_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_call_info);
}
Variant ifa_shell_exec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("shell_exec", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_shell_exec(arg0));
}
Variant i_shell_exec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shell_exec);
}
Variant ifa_dom_element_remove_attribute_node(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_element_remove_attribute_node", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_element_remove_attribute_node(arg0, arg1));
}
Variant i_dom_element_remove_attribute_node(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_remove_attribute_node);
}
Variant ifa_fb_call_user_func_array_safe(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("fb_call_user_func_array_safe", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_fb_call_user_func_array_safe(arg0, arg1));
}
Variant i_fb_call_user_func_array_safe(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_call_user_func_array_safe);
}
Variant ifa_imap_gc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_gc", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_gc(arg0, arg1));
}
Variant i_imap_gc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_gc);
}
Variant ifa_setrawcookie(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("setrawcookie", count, 1, 7, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_setrawcookie(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_setrawcookie(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_setrawcookie(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_setrawcookie(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_setrawcookie(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_setrawcookie(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_setrawcookie(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 7)) return throw_wrong_arguments("setrawcookie", count, 1, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (x_setrawcookie(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (x_setrawcookie(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_setrawcookie(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_setrawcookie(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_setrawcookie(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_setrawcookie(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_setrawcookie(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_intl_error_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("intl_error_name", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_intl_error_name(arg0));
}
Variant i_intl_error_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_intl_error_name);
}
Variant ifa_dom_document_create_cdatasection(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_create_cdatasection", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_create_cdatasection(arg0, arg1));
}
Variant i_dom_document_create_cdatasection(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_cdatasection);
}
Variant ifa_imagecolormatch(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagecolormatch", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagecolormatch(arg0, arg1));
}
Variant i_imagecolormatch(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolormatch);
}
Variant ifa_date_date_set(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("date_date_set", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_date_date_set(arg0, arg1, arg2, arg3), null);
}
Variant i_date_date_set(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_date_set);
}
Variant ifa_curl_copy_handle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("curl_copy_handle", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_curl_copy_handle(arg0));
}
Variant i_curl_copy_handle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_copy_handle);
}
Variant ifa_imap_base64(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_base64", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_base64(arg0));
}
Variant i_imap_base64(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_base64);
}
Variant ifa_pixelsetmagenta(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetmagenta", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetmagenta(arg0, arg1), null);
}
Variant i_pixelsetmagenta(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetmagenta);
}
Variant ifa_imagepsslantfont(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagepsslantfont", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagepsslantfont(arg0, arg1));
}
Variant i_imagepsslantfont(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepsslantfont);
}
Variant ifa_imap_getsubscribed(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_getsubscribed", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_getsubscribed(arg0, arg1, arg2));
}
Variant i_imap_getsubscribed(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_getsubscribed);
}
Variant ifa_hphp_get_property(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("hphp_get_property", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_hphp_get_property(arg0, arg1, arg2));
}
Variant i_hphp_get_property(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_property);
}
Variant ifa_posix_mknod(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("posix_mknod", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_posix_mknod(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_posix_mknod(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_posix_mknod(arg0, arg1, arg2, arg3));
}
Variant i_posix_mknod(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_mknod);
}
Variant ifa_magicksetimageformat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimageformat", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimageformat(arg0, arg1));
}
Variant i_magicksetimageformat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageformat);
}
Variant ifa_array_intersect_assoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_intersect_assoc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_intersect_assoc(count, arg0, arg1, p));
}
Variant i_array_intersect_assoc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_intersect_assoc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_intersect_assoc(count, arg0, arg1, p));
  }
}
Variant ifa_drawskewy(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawskewy", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawskewy(arg0, arg1), null);
}
Variant i_drawskewy(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawskewy);
}
Variant ifa_imagepolygon(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagepolygon", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagepolygon(arg0, arg1, arg2, arg3));
}
Variant i_imagepolygon(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepolygon);
}
Variant ifa_imap_createmailbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_createmailbox", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_createmailbox(arg0, arg1));
}
Variant i_imap_createmailbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_createmailbox);
}
Variant ifa_dom_element_remove_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_element_remove_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_element_remove_attribute(arg0, arg1));
}
Variant i_dom_element_remove_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_remove_attribute);
}
Variant ifa_curl_init(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("curl_init", 1, 1);
  if (count <= 0) return (x_curl_init());
  CVarRef arg0(a0);
  return (x_curl_init(arg0));
}
Variant i_curl_init(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_init);
}
Variant ifa_imagesx(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagesx", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagesx(arg0));
}
Variant i_imagesx(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagesx);
}
Variant ifa_iptcparse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("iptcparse", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_iptcparse(arg0));
}
Variant i_iptcparse(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iptcparse);
}
Variant ifa_timezone_identifiers_list(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("timezone_identifiers_list", 0, 1);
  return (x_timezone_identifiers_list());
}
Variant i_timezone_identifiers_list(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_timezone_identifiers_list);
}
Variant ifa_imap_get_quotaroot(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_get_quotaroot", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_get_quotaroot(arg0, arg1));
}
Variant i_imap_get_quotaroot(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_get_quotaroot);
}
Variant ifa_mysql_db_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mysql_db_name", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_db_name(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mysql_db_name(arg0, arg1, arg2));
}
Variant i_mysql_db_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_db_name);
}
Variant ifa_hphp_get_method_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_get_method_info", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_get_method_info(arg0, arg1));
}
Variant i_hphp_get_method_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_method_info);
}
Variant ifa_drawgetexceptiontype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetexceptiontype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetexceptiontype(arg0));
}
Variant i_drawgetexceptiontype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetexceptiontype);
}
Variant ifa_str_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("str_replace", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_str_replace(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  return (x_str_replace(arg0, arg1, arg2, arg3));
}
Variant i_str_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_str_replace);
}
Variant ifa_session_get_cookie_params(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("session_get_cookie_params", 0, 1);
  return (x_session_get_cookie_params());
}
Variant i_session_get_cookie_params(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_get_cookie_params);
}
Variant ifa_ini_get_all(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("ini_get_all", 1, 1);
  if (count <= 0) return (x_ini_get_all());
  CVarRef arg0(a0);
  return (x_ini_get_all(arg0));
}
Variant i_ini_get_all(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ini_get_all);
}
Variant ifa_mb_strrichr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_strrichr", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_strrichr(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_strrichr(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_strrichr(arg0, arg1, arg2, arg3));
}
Variant i_mb_strrichr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strrichr);
}
Variant ifa_iterator_to_array(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("iterator_to_array", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_iterator_to_array(arg0));
  CVarRef arg1(a1);
  return (x_iterator_to_array(arg0, arg1));
}
Variant i_iterator_to_array(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iterator_to_array);
}
Variant ifa_drawsetfontstretch(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfontstretch", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfontstretch(arg0, arg1), null);
}
Variant i_drawsetfontstretch(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfontstretch);
}
Variant ifa_dom_document_xinclude(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("dom_document_xinclude", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_dom_document_xinclude(arg0));
  CVarRef arg1(a1);
  return (x_dom_document_xinclude(arg0, arg1));
}
Variant i_dom_document_xinclude(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_xinclude);
}
Variant ifa_strripos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("strripos", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_strripos(arg0, arg1));
  CVarRef arg2(a2);
  return (x_strripos(arg0, arg1, arg2));
}
Variant i_strripos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strripos);
}
Variant ifa_mailparse_msg_extract_whole_part_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mailparse_msg_extract_whole_part_file", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mailparse_msg_extract_whole_part_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mailparse_msg_extract_whole_part_file(arg0, arg1, arg2));
}
Variant i_mailparse_msg_extract_whole_part_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_extract_whole_part_file);
}
Variant ifa_apache_note(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("apache_note", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apache_note(arg0));
  CVarRef arg1(a1);
  return (x_apache_note(arg0, arg1));
}
Variant i_apache_note(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apache_note);
}
Variant ifa_output_add_rewrite_var(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("output_add_rewrite_var", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_output_add_rewrite_var(arg0, arg1));
}
Variant i_output_add_rewrite_var(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_output_add_rewrite_var);
}
Variant ifa_imagecreatefromstring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefromstring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefromstring(arg0));
}
Variant i_imagecreatefromstring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromstring);
}
Variant ifa_bzflush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("bzflush", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_bzflush(arg0));
}
Variant i_bzflush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzflush);
}
Variant ifa_array_unique(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("array_unique", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_array_unique(arg0));
  CVarRef arg1(a1);
  return (x_array_unique(arg0, arg1));
}
Variant i_array_unique(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_unique);
}
Variant ifa_drawpushpattern(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("drawpushpattern", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_drawpushpattern(arg0, arg1, arg2, arg3, arg4, arg5), null);
}
Variant i_drawpushpattern(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpushpattern);
}
Variant ifa_pixelgetopacityquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetopacityquantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetopacityquantum(arg0));
}
Variant i_pixelgetopacityquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetopacityquantum);
}
Variant ifa_eval(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("eval", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_eval(arg0));
}
Variant i_eval(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_eval);
}
Variant ifa_msg_send(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("msg_send", count, 3, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_msg_send(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_msg_send(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_msg_send(arg0, arg1, arg2, arg3, arg4));
  VRefParam arg5(vref(a5));
  return (x_msg_send(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_msg_send(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_msg_send);
}
Variant ifa_preg_match_all(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("preg_match_all", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_preg_match_all(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_preg_match_all(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_preg_match_all(arg0, arg1, arg2, arg3, arg4));
}
Variant i_preg_match_all(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_preg_match_all);
}
Variant ifa_memcache_flush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("memcache_flush", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_memcache_flush(arg0));
  CVarRef arg1(a1);
  return (x_memcache_flush(arg0, arg1));
}
Variant i_memcache_flush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_flush);
}
Variant ifa_dom_element_get_attribute_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_element_get_attribute_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_element_get_attribute_ns(arg0, arg1, arg2));
}
Variant i_dom_element_get_attribute_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_get_attribute_ns);
}
Variant ifa_get_class_vars(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_class_vars", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_get_class_vars(arg0));
}
Variant i_get_class_vars(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_class_vars);
}
Variant ifa_dom_document_save_html(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_document_save_html", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_document_save_html(arg0));
}
Variant i_dom_document_save_html(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_save_html);
}
Variant ifa_magickechoimageblob(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickechoimageblob", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickechoimageblob(arg0));
}
Variant i_magickechoimageblob(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickechoimageblob);
}
Variant ifa_hphp_murmurhash(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("hphp_murmurhash", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_hphp_murmurhash(arg0, arg1, arg2));
}
Variant i_hphp_murmurhash(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_murmurhash);
}
Variant ifa_xmlwriter_start_dtd_attlist(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_start_dtd_attlist", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_start_dtd_attlist(arg0, arg1));
}
Variant i_xmlwriter_start_dtd_attlist(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_dtd_attlist);
}
Variant ifa_join(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("join", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_join(arg0));
  CVarRef arg1(a1);
  return (x_join(arg0, arg1));
}
Variant i_join(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_join);
}
Variant ifa_qlzcompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("qlzcompress", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_qlzcompress(arg0));
  CVarRef arg1(a1);
  return (x_qlzcompress(arg0, arg1));
}
Variant i_qlzcompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_qlzcompress);
}
Variant ifa_magickgetimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimage(arg0));
}
Variant i_magickgetimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimage);
}
Variant ifa_array_replace_recursive(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_replace_recursive", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_replace_recursive(count, arg0, p));
}
Variant i_array_replace_recursive(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_replace_recursive", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_array_replace_recursive(count, arg0, p));
  }
}
Variant ifa_bcpow(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bcpow", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_bcpow(arg0, arg1));
  CVarRef arg2(a2);
  return (x_bcpow(arg0, arg1, arg2));
}
Variant i_bcpow(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcpow);
}
Variant ifa_memory_get_usage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("memory_get_usage", 1, 1);
  if (count <= 0) return (x_memory_get_usage());
  CVarRef arg0(a0);
  return (x_memory_get_usage(arg0));
}
Variant i_memory_get_usage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memory_get_usage);
}
Variant ifa_xmlwriter_start_element_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("xmlwriter_start_element_ns", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_xmlwriter_start_element_ns(arg0, arg1, arg2, arg3));
}
Variant i_xmlwriter_start_element_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_element_ns);
}
Variant ifa_magickgetimagepixels(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("magickgetimagepixels", count, 7, 7, 1);
}
Variant i_magickgetimagepixels(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 7)) return throw_wrong_arguments("magickgetimagepixels", count, 7, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_magickgetimagepixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_openssl_cipher_iv_length(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_cipher_iv_length", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_cipher_iv_length(arg0));
}
Variant i_openssl_cipher_iv_length(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_cipher_iv_length);
}
Variant ifa_imagegrabscreen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("imagegrabscreen", 0, 1);
  return (x_imagegrabscreen());
}
Variant i_imagegrabscreen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagegrabscreen);
}
Variant ifa_imagecopymergegray(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagecopymergegray", count, 9, 9, 1);
}
Variant i_imagecopymergegray(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 9)) return throw_wrong_arguments("imagecopymergegray", count, 9, 9, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagecopymergegray(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
  }
}
Variant ifa_hphp_directoryiterator___tostring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_directoryiterator___tostring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_directoryiterator___tostring(arg0));
}
Variant i_hphp_directoryiterator___tostring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator___tostring);
}
Variant ifa_sin(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sin", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sin(arg0));
}
Variant i_sin(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sin);
}
Variant ifa_rand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("rand", 2, 1);
  if (count <= 0) return (x_rand());
  CVarRef arg0(a0);
  if (count <= 1) return (x_rand(arg0));
  CVarRef arg1(a1);
  return (x_rand(arg0, arg1));
}
Variant i_rand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rand);
}
Variant ifa_spl_autoload(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("spl_autoload", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_spl_autoload(arg0), null);
  CVarRef arg1(a1);
  return (x_spl_autoload(arg0, arg1), null);
}
Variant i_spl_autoload(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spl_autoload);
}
Variant ifa_sys_get_temp_dir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("sys_get_temp_dir", 0, 1);
  return (x_sys_get_temp_dir());
}
Variant i_sys_get_temp_dir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sys_get_temp_dir);
}
Variant ifa_spliti(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("spliti", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_spliti(arg0, arg1));
  CVarRef arg2(a2);
  return (x_spliti(arg0, arg1, arg2));
}
Variant i_spliti(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spliti);
}
Variant ifa_drawellipse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawellipse", count, 7, 7, 1);
}
Variant i_drawellipse(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 7)) return throw_wrong_arguments("drawellipse", count, 7, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawellipse(arg0, arg1, arg2, arg3, arg4, arg5, arg6), null);
  }
}
Variant ifa_array_walk(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("array_walk", count, 2, 3, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_array_walk(arg0, arg1));
  CVarRef arg2(a2);
  return (x_array_walk(arg0, arg1, arg2));
}
Variant i_array_walk(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_walk);
}
Variant ifa_hphp_stats(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_stats", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_stats(arg0, arg1), null);
}
Variant i_hphp_stats(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_stats);
}
Variant ifa_xml_get_current_byte_index(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xml_get_current_byte_index", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xml_get_current_byte_index(arg0));
}
Variant i_xml_get_current_byte_index(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_get_current_byte_index);
}
Variant ifa_socket_set_blocking(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("socket_set_blocking", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_socket_set_blocking(arg0, arg1));
}
Variant i_socket_set_blocking(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_set_blocking);
}
Variant ifa_iconv_strlen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("iconv_strlen", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_iconv_strlen(arg0));
  CVarRef arg1(a1);
  return (x_iconv_strlen(arg0, arg1));
}
Variant i_iconv_strlen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_strlen);
}
Variant ifa_hphp_get_class_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_get_class_info", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_get_class_info(arg0));
}
Variant i_hphp_get_class_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_class_info);
}
Variant ifa_openssl_decrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("openssl_decrypt", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_decrypt(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_openssl_decrypt(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_openssl_decrypt(arg0, arg1, arg2, arg3, arg4));
}
Variant i_openssl_decrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_decrypt);
}
Variant ifa_mktime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count <= 0) return (x_mktime());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mktime(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mktime(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mktime(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mktime(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_mktime(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_mktime(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_mktime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mktime);
}
Variant ifa_mb_decode_mimeheader(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mb_decode_mimeheader", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mb_decode_mimeheader(arg0));
}
Variant i_mb_decode_mimeheader(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_decode_mimeheader);
}
Variant ifa_cos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("cos", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_cos(arg0));
}
Variant i_cos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_cos);
}
Variant ifa_magickshaveimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickshaveimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickshaveimage(arg0, arg1, arg2));
}
Variant i_magickshaveimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickshaveimage);
}
Variant ifa_getmypid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getmypid", 0, 1);
  return (x_getmypid());
}
Variant i_getmypid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getmypid);
}
Variant ifa_pixelgetiteratorexception(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetiteratorexception", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetiteratorexception(arg0));
}
Variant i_pixelgetiteratorexception(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetiteratorexception);
}
Variant ifa_libxml_use_internal_errors(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("libxml_use_internal_errors", 1, 1);
  if (count <= 0) return (x_libxml_use_internal_errors());
  CVarRef arg0(a0);
  return (x_libxml_use_internal_errors(arg0));
}
Variant i_libxml_use_internal_errors(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_libxml_use_internal_errors);
}
Variant ifa_array_intersect_uassoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_intersect_uassoc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_intersect_uassoc(count, arg0, arg1, arg2, p));
}
Variant i_array_intersect_uassoc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_intersect_uassoc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_array_intersect_uassoc(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_gzinflate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gzinflate", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzinflate(arg0));
  CVarRef arg1(a1);
  return (x_gzinflate(arg0, arg1));
}
Variant i_gzinflate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzinflate);
}
Variant ifa_xml_set_character_data_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_character_data_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_set_character_data_handler(arg0, arg1));
}
Variant i_xml_set_character_data_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_character_data_handler);
}
Variant ifa_hphp_scalar_typehints_enabled(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_scalar_typehints_enabled", 0, 1);
  return (x_hphp_scalar_typehints_enabled());
}
Variant i_hphp_scalar_typehints_enabled(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_scalar_typehints_enabled);
}
Variant ifa_atan(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("atan", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_atan(arg0));
}
Variant i_atan(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_atan);
}
Variant ifa_stream_wrapper_register(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_wrapper_register", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_wrapper_register(arg0, arg1));
}
Variant i_stream_wrapper_register(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_wrapper_register);
}
Variant ifa_ldap_get_option(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_get_option", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  return (x_ldap_get_option(arg0, arg1, arg2));
}
Variant i_ldap_get_option(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_get_option);
}
Variant ifa_magickgetimageindex(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageindex", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageindex(arg0));
}
Variant i_magickgetimageindex(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageindex);
}
Variant ifa_extension_loaded(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("extension_loaded", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_extension_loaded(arg0));
}
Variant i_extension_loaded(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_extension_loaded);
}
Variant ifa_memory_get_peak_usage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("memory_get_peak_usage", 1, 1);
  if (count <= 0) return (x_memory_get_peak_usage());
  CVarRef arg0(a0);
  return (x_memory_get_peak_usage(arg0));
}
Variant i_memory_get_peak_usage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memory_get_peak_usage);
}
Variant ifa_dom_element_set_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_element_set_attribute", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_element_set_attribute(arg0, arg1, arg2));
}
Variant i_dom_element_set_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_set_attribute);
}
Variant ifa_imap_scanmailbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imap_scanmailbox", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imap_scanmailbox(arg0, arg1, arg2, arg3));
}
Variant i_imap_scanmailbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_scanmailbox);
}
Variant ifa_is_nan(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_nan", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_nan(arg0));
}
Variant i_is_nan(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_nan);
}
Variant ifa_popdrawingwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("popdrawingwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_popdrawingwand(arg0), null);
}
Variant i_popdrawingwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_popdrawingwand);
}
Variant ifa_tan(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("tan", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_tan(arg0));
}
Variant i_tan(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_tan);
}
Variant ifa_pixelsetyellow(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetyellow", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetyellow(arg0, arg1), null);
}
Variant i_pixelsetyellow(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetyellow);
}
Variant ifa_bzclose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("bzclose", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_bzclose(arg0));
}
Variant i_bzclose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzclose);
}
Variant ifa_imagesetpixel(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagesetpixel", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagesetpixel(arg0, arg1, arg2, arg3));
}
Variant i_imagesetpixel(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagesetpixel);
}
Variant ifa_ldap_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ldap_error", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ldap_error(arg0));
}
Variant i_ldap_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_error);
}
Variant ifa_hphp_splfileobject_fgets(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_fgets", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_fgets(arg0));
}
Variant i_hphp_splfileobject_fgets(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fgets);
}
Variant ifa_hphp_get_static_property(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_get_static_property", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_get_static_property(arg0, arg1));
}
Variant i_hphp_get_static_property(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_static_property);
}
Variant ifa_thrift_protocol_read_compact(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("thrift_protocol_read_compact", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_thrift_protocol_read_compact(arg0, arg1));
}
Variant i_thrift_protocol_read_compact(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_thrift_protocol_read_compact);
}
Variant ifa_glob(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("glob", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_glob(arg0));
  CVarRef arg1(a1);
  return (x_glob(arg0, arg1));
}
Variant i_glob(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_glob);
}
Variant ifa_decbin(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("decbin", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_decbin(arg0));
}
Variant i_decbin(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_decbin);
}
Variant ifa_symlink(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("symlink", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_symlink(arg0, arg1));
}
Variant i_symlink(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_symlink);
}
Variant ifa_floor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("floor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_floor(arg0));
}
Variant i_floor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_floor);
}
Variant ifa_end_user_func_async(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("end_user_func_async", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_end_user_func_async(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_end_user_func_async(arg0, arg1));
  CVarRef arg2(a2);
  return (x_end_user_func_async(arg0, arg1, arg2));
}
Variant i_end_user_func_async(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_end_user_func_async);
}
Variant ifa_xmlwriter_write_dtd_entity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("xmlwriter_write_dtd_entity", count, 3, 7, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_xmlwriter_write_dtd_entity(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 7)) return throw_wrong_arguments("xmlwriter_write_dtd_entity", count, 3, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_xmlwriter_write_dtd_entity(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_chown(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("chown", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_chown(arg0, arg1));
}
Variant i_chown(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_chown);
}
Variant ifa_magickgetimagecompression(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagecompression", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagecompression(arg0));
}
Variant i_magickgetimagecompression(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagecompression);
}
Variant ifa_imagealphablending(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagealphablending", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagealphablending(arg0, arg1));
}
Variant i_imagealphablending(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagealphablending);
}
Variant ifa_readlink(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("readlink", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_readlink(arg0));
}
Variant i_readlink(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_readlink);
}
Variant ifa_idn_to_ascii(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("idn_to_ascii", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_idn_to_ascii(arg0));
  VRefParam arg1(vref(a1));
  return (x_idn_to_ascii(arg0, arg1));
}
Variant i_idn_to_ascii(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_idn_to_ascii);
}
Variant ifa_xml_parser_free(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xml_parser_free", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xml_parser_free(arg0));
}
Variant i_xml_parser_free(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_parser_free);
}
Variant ifa_mcrypt_ecb(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("mcrypt_ecb", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_mcrypt_ecb(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mcrypt_ecb(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mcrypt_ecb(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_ecb);
}
Variant ifa_posix_getgrgid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_getgrgid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_getgrgid(arg0));
}
Variant i_posix_getgrgid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getgrgid);
}
Variant ifa_hphp_splfileinfo_getpathname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getpathname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getpathname(arg0));
}
Variant i_hphp_splfileinfo_getpathname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getpathname);
}
Variant ifa_zend_version(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("zend_version", 0, 1);
  return (x_zend_version());
}
Variant i_zend_version(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_zend_version);
}
Variant ifa_drawpathcurvetoquadraticbezierrelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("drawpathcurvetoquadraticbezierrelative", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_drawpathcurvetoquadraticbezierrelative(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_drawpathcurvetoquadraticbezierrelative(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathcurvetoquadraticbezierrelative);
}
Variant ifa_gzopen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("gzopen", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_gzopen(arg0, arg1));
  CVarRef arg2(a2);
  return (x_gzopen(arg0, arg1, arg2));
}
Variant i_gzopen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzopen);
}
Variant ifa_socket_select(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("socket_select", count, 4, 5, 1);
  VRefParam arg0(vref(a0));
  VRefParam arg1(vref(a1));
  VRefParam arg2(vref(a2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_socket_select(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_socket_select(arg0, arg1, arg2, arg3, arg4));
}
Variant i_socket_select(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_select);
}
Variant ifa_ini_set(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ini_set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ini_set(arg0, arg1));
}
Variant i_ini_set(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ini_set);
}
Variant ifa_session_set_save_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("session_set_save_handler", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_session_set_save_handler(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_session_set_save_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_set_save_handler);
}
Variant ifa_gzwrite(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("gzwrite", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_gzwrite(arg0, arg1));
  CVarRef arg2(a2);
  return (x_gzwrite(arg0, arg1, arg2));
}
Variant i_gzwrite(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzwrite);
}
Variant ifa_imagearc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagearc", count, 8, 8, 1);
}
Variant i_imagearc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 8)) return throw_wrong_arguments("imagearc", count, 8, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagearc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_hphp_service_thread_stopped(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_service_thread_stopped", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_service_thread_stopped(arg0));
}
Variant i_hphp_service_thread_stopped(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_service_thread_stopped);
}
Variant ifa_fopen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("fopen", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_fopen(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_fopen(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_fopen(arg0, arg1, arg2, arg3));
}
Variant i_fopen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fopen);
}
Variant ifa_magickgetexceptiontype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetexceptiontype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetexceptiontype(arg0));
}
Variant i_magickgetexceptiontype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetexceptiontype);
}
Variant ifa_ob_start(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("ob_start", 3, 1);
  if (count <= 0) return (x_ob_start());
  CVarRef arg0(a0);
  if (count <= 1) return (x_ob_start(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_ob_start(arg0, arg1));
  CVarRef arg2(a2);
  return (x_ob_start(arg0, arg1, arg2));
}
Variant i_ob_start(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_start);
}
Variant ifa_is_writable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_writable", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_writable(arg0));
}
Variant i_is_writable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_writable);
}
Variant ifa_magicksetimagedepth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("magicksetimagedepth", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_magicksetimagedepth(arg0, arg1));
  CVarRef arg2(a2);
  return (x_magicksetimagedepth(arg0, arg1, arg2));
}
Variant i_magicksetimagedepth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagedepth);
}
Variant ifa_socket_listen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("socket_listen", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_socket_listen(arg0));
  CVarRef arg1(a1);
  return (x_socket_listen(arg0, arg1));
}
Variant i_socket_listen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_listen);
}
Variant ifa_openssl_csr_sign(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4)) return throw_wrong_arguments("openssl_csr_sign", count, 4, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_openssl_csr_sign(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_openssl_csr_sign(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_openssl_csr_sign(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_openssl_csr_sign(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_csr_sign);
}
Variant ifa_trait_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("trait_exists", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_trait_exists(arg0));
  CVarRef arg1(a1);
  return (x_trait_exists(arg0, arg1));
}
Variant i_trait_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_trait_exists);
}
Variant ifa_imagecreatefromgd2part(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("imagecreatefromgd2part", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_imagecreatefromgd2part(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imagecreatefromgd2part(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromgd2part);
}
Variant ifa_xmlwriter_start_pi(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_start_pi", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_start_pi(arg0, arg1));
}
Variant i_xmlwriter_start_pi(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_pi);
}
Variant ifa_imap_setflag_full(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("imap_setflag_full", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_setflag_full(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imap_setflag_full(arg0, arg1, arg2, arg3));
}
Variant i_imap_setflag_full(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_setflag_full);
}
Variant ifa_is_infinite(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_infinite", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_infinite(arg0));
}
Variant i_is_infinite(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_infinite);
}
Variant ifa_imap_thread(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imap_thread", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imap_thread(arg0));
  CVarRef arg1(a1);
  return (x_imap_thread(arg0, arg1));
}
Variant i_imap_thread(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_thread);
}
Variant ifa_imap_8bit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_8bit", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_8bit(arg0));
}
Variant i_imap_8bit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_8bit);
}
Variant ifa_hash_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("hash_file", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_hash_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_hash_file(arg0, arg1, arg2));
}
Variant i_hash_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_file);
}
Variant ifa_furchash_hphp_ext(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("furchash_hphp_ext", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_furchash_hphp_ext(arg0, arg1, arg2));
}
Variant i_furchash_hphp_ext(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_furchash_hphp_ext);
}
Variant ifa_acos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("acos", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_acos(arg0));
}
Variant i_acos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_acos);
}
Variant ifa_curl_multi_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("curl_multi_close", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_curl_multi_close(arg0));
}
Variant i_curl_multi_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_multi_close);
}
Variant ifa_hphp_set_error_page(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_set_error_page", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_set_error_page(arg0), null);
}
Variant i_hphp_set_error_page(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_set_error_page);
}
Variant ifa_fmod(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("fmod", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_fmod(arg0, arg1));
}
Variant i_fmod(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fmod);
}
Variant ifa_dom_characterdata_replace_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("dom_characterdata_replace_data", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_dom_characterdata_replace_data(arg0, arg1, arg2, arg3));
}
Variant i_dom_characterdata_replace_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_characterdata_replace_data);
}
Variant ifa_gzpassthru(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gzpassthru", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gzpassthru(arg0));
}
Variant i_gzpassthru(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzpassthru);
}
Variant ifa_openssl_digest(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("openssl_digest", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_openssl_digest(arg0, arg1));
  CVarRef arg2(a2);
  return (x_openssl_digest(arg0, arg1, arg2));
}
Variant i_openssl_digest(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_digest);
}
Variant ifa_curl_multi_getcontent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("curl_multi_getcontent", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_curl_multi_getcontent(arg0));
}
Variant i_curl_multi_getcontent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_multi_getcontent);
}
Variant ifa_fgetss(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("fgetss", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_fgetss(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_fgetss(arg0, arg1));
  CVarRef arg2(a2);
  return (x_fgetss(arg0, arg1, arg2));
}
Variant i_fgetss(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fgetss);
}
Variant ifa_magickresampleimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("magickresampleimage", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_magickresampleimage(arg0, arg1, arg2, arg3, arg4));
}
Variant i_magickresampleimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickresampleimage);
}
Variant ifa_magickaffinetransformimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickaffinetransformimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickaffinetransformimage(arg0, arg1));
}
Variant i_magickaffinetransformimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickaffinetransformimage);
}
Variant ifa_imagepng(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("imagepng", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagepng(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_imagepng(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_imagepng(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imagepng(arg0, arg1, arg2, arg3));
}
Variant i_imagepng(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepng);
}
Variant ifa_imagesettile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagesettile", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagesettile(arg0, arg1));
}
Variant i_imagesettile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagesettile);
}
Variant ifa_bzerror(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("bzerror", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_bzerror(arg0));
}
Variant i_bzerror(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzerror);
}
Variant ifa_metaphone(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("metaphone", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_metaphone(arg0));
  CVarRef arg1(a1);
  return (x_metaphone(arg0, arg1));
}
Variant i_metaphone(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_metaphone);
}
Variant ifa_gzgets(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gzgets", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzgets(arg0));
  CVarRef arg1(a1);
  return (x_gzgets(arg0, arg1));
}
Variant i_gzgets(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzgets);
}
Variant ifa_drawgetfontsize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfontsize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfontsize(arg0));
}
Variant i_drawgetfontsize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfontsize);
}
Variant ifa_drawsetfillrule(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfillrule", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfillrule(arg0, arg1), null);
}
Variant i_drawsetfillrule(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfillrule);
}
Variant ifa_magickgetimagesblob(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagesblob", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagesblob(arg0));
}
Variant i_magickgetimagesblob(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagesblob);
}
Variant ifa_magickaddnoiseimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickaddnoiseimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickaddnoiseimage(arg0, arg1));
}
Variant i_magickaddnoiseimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickaddnoiseimage);
}
Variant ifa_is_float(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_float", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_float(arg0));
}
Variant i_is_float(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_float);
}
Variant ifa_memcache_increment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("memcache_increment", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_increment(arg0, arg1));
  CVarRef arg2(a2);
  return (x_memcache_increment(arg0, arg1, arg2));
}
Variant i_memcache_increment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_increment);
}
Variant ifa_mailparse_rfc822_parse_addresses(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mailparse_rfc822_parse_addresses", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mailparse_rfc822_parse_addresses(arg0));
}
Variant i_mailparse_rfc822_parse_addresses(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_rfc822_parse_addresses);
}
Variant ifa_hphp_recursivedirectoryiterator_current(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_current", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_current(arg0));
}
Variant i_hphp_recursivedirectoryiterator_current(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_current);
}
Variant ifa_next(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("next", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_next(arg0));
}
Variant i_next(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_next);
}
Variant ifa_is_executable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_executable", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_executable(arg0));
}
Variant i_is_executable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_executable);
}
Variant ifa_mailparse_msg_parse_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mailparse_msg_parse_file", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mailparse_msg_parse_file(arg0));
}
Variant i_mailparse_msg_parse_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_parse_file);
}
Variant ifa_mysql_set_timeout(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("mysql_set_timeout", 2, 1);
  if (count <= 0) return (x_mysql_set_timeout());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_set_timeout(arg0));
  CVarRef arg1(a1);
  return (x_mysql_set_timeout(arg0, arg1));
}
Variant i_mysql_set_timeout(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_set_timeout);
}
Variant ifa_socket_write(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("socket_write", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_socket_write(arg0, arg1));
  CVarRef arg2(a2);
  return (x_socket_write(arg0, arg1, arg2));
}
Variant i_socket_write(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_write);
}
Variant ifa_magickradialblurimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickradialblurimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickradialblurimage(arg0, arg1));
}
Variant i_magickradialblurimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickradialblurimage);
}
Variant ifa_magicksetimagecompressionquality(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagecompressionquality", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagecompressionquality(arg0, arg1));
}
Variant i_magicksetimagecompressionquality(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagecompressionquality);
}
Variant ifa_get_required_files(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_required_files", 0, 1);
  return (x_get_required_files());
}
Variant i_get_required_files(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_required_files);
}
Variant ifa_imap_undelete(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("imap_undelete", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_undelete(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imap_undelete(arg0, arg1, arg2));
}
Variant i_imap_undelete(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_undelete);
}
Variant ifa_get_defined_constants(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("get_defined_constants", 1, 1);
  if (count <= 0) return (x_get_defined_constants());
  CVarRef arg0(a0);
  return (x_get_defined_constants(arg0));
}
Variant i_get_defined_constants(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_defined_constants);
}
Variant ifa_pixelgetbluequantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetbluequantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetbluequantum(arg0));
}
Variant i_pixelgetbluequantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetbluequantum);
}
Variant ifa_imagesetstyle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagesetstyle", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagesetstyle(arg0, arg1));
}
Variant i_imagesetstyle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagesetstyle);
}
Variant ifa_pcntl_wifsignaled(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pcntl_wifsignaled", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pcntl_wifsignaled(arg0));
}
Variant i_pcntl_wifsignaled(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_wifsignaled);
}
Variant ifa_jpeg2wbmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("jpeg2wbmp", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_jpeg2wbmp(arg0, arg1, arg2, arg3, arg4));
}
Variant i_jpeg2wbmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_jpeg2wbmp);
}
Variant ifa_date_sunrise(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("date_sunrise", count, 1, 6, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_date_sunrise(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_date_sunrise(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_date_sunrise(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_date_sunrise(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_date_sunrise(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_date_sunrise(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_date_sunrise(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_sunrise);
}
Variant ifa_mcrypt_module_is_block_algorithm(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_module_is_block_algorithm", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_module_is_block_algorithm(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_module_is_block_algorithm(arg0, arg1));
}
Variant i_mcrypt_module_is_block_algorithm(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_is_block_algorithm);
}
Variant ifa_session_register(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("session_register", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_session_register(count, arg0, p));
}
Variant i_session_register(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("session_register", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_session_register(count, arg0, p));
  }
}
Variant ifa_xhprof_sample_enable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xhprof_sample_enable", 0, 1);
  return (x_xhprof_sample_enable(), null);
}
Variant i_xhprof_sample_enable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_sample_enable);
}
Variant ifa_ldap_delete(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_delete", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_delete(arg0, arg1));
}
Variant i_ldap_delete(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_delete);
}
Variant ifa_fb_parallel_query(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("fb_parallel_query", count, 1, 7, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_fb_parallel_query(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_fb_parallel_query(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_fb_parallel_query(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_fb_parallel_query(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_fb_parallel_query(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_fb_parallel_query(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_fb_parallel_query(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 7)) return throw_wrong_arguments("fb_parallel_query", count, 1, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (x_fb_parallel_query(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (x_fb_parallel_query(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_fb_parallel_query(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_fb_parallel_query(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_fb_parallel_query(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_fb_parallel_query(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_fb_parallel_query(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_session_regenerate_id(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("session_regenerate_id", 1, 1);
  if (count <= 0) return (x_session_regenerate_id());
  CVarRef arg0(a0);
  return (x_session_regenerate_id(arg0));
}
Variant i_session_regenerate_id(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_regenerate_id);
}
Variant ifa_imagepsloadfont(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagepsloadfont", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagepsloadfont(arg0));
}
Variant i_imagepsloadfont(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepsloadfont);
}
Variant ifa_pixelgetmagentaquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetmagentaquantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetmagentaquantum(arg0));
}
Variant i_pixelgetmagentaquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetmagentaquantum);
}
Variant ifa_drawgetfontweight(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfontweight", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfontweight(arg0));
}
Variant i_drawgetfontweight(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfontweight);
}
Variant ifa_image2wbmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("image2wbmp", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_image2wbmp(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_image2wbmp(arg0, arg1));
  CVarRef arg2(a2);
  return (x_image2wbmp(arg0, arg1, arg2));
}
Variant i_image2wbmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_image2wbmp);
}
Variant ifa_mcrypt_enc_get_algorithms_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_get_algorithms_name", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_get_algorithms_name(arg0));
}
Variant i_mcrypt_enc_get_algorithms_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_get_algorithms_name);
}
Variant ifa_settype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("settype", count, 2, 2, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  return (x_settype(arg0, arg1));
}
Variant i_settype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_settype);
}
Variant ifa_fb_const_fetch(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_const_fetch", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_const_fetch(arg0));
}
Variant i_fb_const_fetch(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_const_fetch);
}
Variant ifa_socket_recvfrom(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 5)) return throw_wrong_arguments("socket_recvfrom", count, 5, 6, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  VRefParam arg4(vref(a4));
  if (count <= 5) return (x_socket_recvfrom(arg0, arg1, arg2, arg3, arg4));
  VRefParam arg5(vref(a5));
  return (x_socket_recvfrom(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_socket_recvfrom(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_recvfrom);
}
Variant ifa_drawgettextencoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgettextencoding", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgettextencoding(arg0));
}
Variant i_drawgettextencoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgettextencoding);
}
Variant ifa_is_double(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_double", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_double(arg0));
}
Variant i_is_double(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_double);
}
Variant ifa_thrift_protocol_read_binary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("thrift_protocol_read_binary", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_thrift_protocol_read_binary(arg0, arg1, arg2));
}
Variant i_thrift_protocol_read_binary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_thrift_protocol_read_binary);
}
Variant ifa_ldap_compare(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("ldap_compare", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_ldap_compare(arg0, arg1, arg2, arg3));
}
Variant i_ldap_compare(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_compare);
}
Variant ifa_magickaverageimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickaverageimages", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickaverageimages(arg0));
}
Variant i_magickaverageimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickaverageimages);
}
Variant ifa_dom_document_create_element(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("dom_document_create_element", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_dom_document_create_element(arg0, arg1));
  CVarRef arg2(a2);
  return (x_dom_document_create_element(arg0, arg1, arg2));
}
Variant i_dom_document_create_element(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_element);
}
Variant ifa_xbox_task_result(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("xbox_task_result", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  return (x_xbox_task_result(arg0, arg1, arg2));
}
Variant i_xbox_task_result(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_task_result);
}
Variant ifa_localeconv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("localeconv", 0, 1);
  return (x_localeconv());
}
Variant i_localeconv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_localeconv);
}
Variant ifa_imagefilledrectangle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imagefilledrectangle", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imagefilledrectangle(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagefilledrectangle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagefilledrectangle);
}
Variant ifa_openssl_csr_export_to_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("openssl_csr_export_to_file", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_openssl_csr_export_to_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_openssl_csr_export_to_file(arg0, arg1, arg2));
}
Variant i_openssl_csr_export_to_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_csr_export_to_file);
}
Variant ifa_dom_element_set_id_attribute_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("dom_element_set_id_attribute_ns", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_dom_element_set_id_attribute_ns(arg0, arg1, arg2, arg3));
}
Variant i_dom_element_set_id_attribute_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_set_id_attribute_ns);
}
Variant ifa_magickpingimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickpingimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickpingimage(arg0, arg1));
}
Variant i_magickpingimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickpingimage);
}
Variant ifa_magicksetimageindex(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimageindex", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimageindex(arg0, arg1));
}
Variant i_magicksetimageindex(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageindex);
}
Variant ifa_imageantialias(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imageantialias", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imageantialias(arg0, arg1));
}
Variant i_imageantialias(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imageantialias);
}
Variant ifa_hphp_get_call_info_extra(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_get_call_info_extra", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_get_call_info_extra(arg0, arg1));
}
Variant i_hphp_get_call_info_extra(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_call_info_extra);
}
Variant ifa_magickclipimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickclipimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickclipimage(arg0));
}
Variant i_magickclipimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickclipimage);
}
Variant ifa_newdrawingwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("newdrawingwand", 0, 1);
  return (x_newdrawingwand());
}
Variant i_newdrawingwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_newdrawingwand);
}
Variant ifa_magickswirlimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickswirlimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickswirlimage(arg0, arg1));
}
Variant i_magickswirlimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickswirlimage);
}
Variant ifa_pagelet_server_task_result(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("pagelet_server_task_result", count, 3, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  VRefParam arg2(vref(a2));
  return (x_pagelet_server_task_result(arg0, arg1, arg2));
}
Variant i_pagelet_server_task_result(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pagelet_server_task_result);
}
Variant ifa_newpixeliterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("newpixeliterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_newpixeliterator(arg0));
}
Variant i_newpixeliterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_newpixeliterator);
}
Variant ifa_imap_deletemailbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_deletemailbox", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_deletemailbox(arg0, arg1));
}
Variant i_imap_deletemailbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_deletemailbox);
}
Variant ifa_hphp_thread_is_warmup_enabled(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_thread_is_warmup_enabled", 0, 1);
  return (x_hphp_thread_is_warmup_enabled());
}
Variant i_hphp_thread_is_warmup_enabled(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_thread_is_warmup_enabled);
}
Variant ifa_pclose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pclose", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pclose(arg0));
}
Variant i_pclose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pclose);
}
Variant ifa_magicksetimageunits(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimageunits", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimageunits(arg0, arg1));
}
Variant i_magicksetimageunits(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageunits);
}
Variant ifa_xbox_task_start(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xbox_task_start", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xbox_task_start(arg0));
}
Variant i_xbox_task_start(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_task_start);
}
Variant ifa_memcache_delete(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("memcache_delete", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_delete(arg0, arg1));
  CVarRef arg2(a2);
  return (x_memcache_delete(arg0, arg1, arg2));
}
Variant i_memcache_delete(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_delete);
}
Variant ifa_collator_compare(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("collator_compare", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_collator_compare(arg0, arg1, arg2));
}
Variant i_collator_compare(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_compare);
}
Variant ifa_imap_mime_header_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_mime_header_decode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_mime_header_decode(arg0));
}
Variant i_imap_mime_header_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_mime_header_decode);
}
Variant ifa_stream_filter_prepend(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("stream_filter_prepend", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_filter_prepend(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_stream_filter_prepend(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_stream_filter_prepend(arg0, arg1, arg2, arg3));
}
Variant i_stream_filter_prepend(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_filter_prepend);
}
Variant ifa_token_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("token_name", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_token_name(arg0));
}
Variant i_token_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_token_name);
}
Variant ifa_flush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("flush", 0, 1);
  return (x_flush(), null);
}
Variant i_flush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_flush);
}
Variant ifa_ldap_search(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("ldap_search", count, 3, 8, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_ldap_search(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_ldap_search(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_ldap_search(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_ldap_search(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_ldap_search(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 8)) return throw_wrong_arguments("ldap_search", count, 3, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_ldap_search(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_ldap_search(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_ldap_search(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_ldap_search(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 7) return (x_ldap_search(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_ldap_search(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_create_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("create_function", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_create_function(arg0, arg1));
}
Variant i_create_function(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_create_function);
}
Variant ifa_hphp_thread_set_warmup_enabled(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_thread_set_warmup_enabled", 0, 1);
  return (x_hphp_thread_set_warmup_enabled(), null);
}
Variant i_hphp_thread_set_warmup_enabled(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_thread_set_warmup_enabled);
}
Variant ifa_imagecolorresolve(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagecolorresolve", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagecolorresolve(arg0, arg1, arg2, arg3));
}
Variant i_imagecolorresolve(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorresolve);
}
Variant ifa_pixelgetnextiteratorrow(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetnextiteratorrow", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetnextiteratorrow(arg0));
}
Variant i_pixelgetnextiteratorrow(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetnextiteratorrow);
}
Variant ifa_drawsettextdecoration(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsettextdecoration", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsettextdecoration(arg0, arg1), null);
}
Variant i_drawsettextdecoration(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsettextdecoration);
}
Variant ifa_hphp_splfileobject_getcvscontrol(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_getcvscontrol", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_getcvscontrol(arg0));
}
Variant i_hphp_splfileobject_getcvscontrol(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_getcvscontrol);
}
Variant ifa_magickfximage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("magickfximage", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_magickfximage(arg0, arg1));
  CVarRef arg2(a2);
  return (x_magickfximage(arg0, arg1, arg2));
}
Variant i_magickfximage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickfximage);
}
Variant ifa_session_commit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("session_commit", 0, 1);
  return (x_session_commit(), null);
}
Variant i_session_commit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_commit);
}
Variant ifa_openssl_get_privatekey(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("openssl_get_privatekey", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_openssl_get_privatekey(arg0));
  CVarRef arg1(a1);
  return (x_openssl_get_privatekey(arg0, arg1));
}
Variant i_openssl_get_privatekey(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_get_privatekey);
}
Variant ifa_mt_srand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mt_srand", 1, 1);
  if (count <= 0) return (x_mt_srand(), null);
  CVarRef arg0(a0);
  return (x_mt_srand(arg0), null);
}
Variant i_mt_srand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mt_srand);
}
Variant ifa_drawarc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawarc", count, 7, 7, 1);
}
Variant i_drawarc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 7)) return throw_wrong_arguments("drawarc", count, 7, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawarc(arg0, arg1, arg2, arg3, arg4, arg5, arg6), null);
  }
}
Variant ifa_msg_queue_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("msg_queue_exists", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_msg_queue_exists(arg0));
}
Variant i_msg_queue_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_msg_queue_exists);
}
Variant ifa_strtotime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("strtotime", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_strtotime(arg0));
  CVarRef arg1(a1);
  return (x_strtotime(arg0, arg1));
}
Variant i_strtotime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strtotime);
}
Variant ifa_hphp_get_thread_id(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_get_thread_id", 0, 1);
  return (x_hphp_get_thread_id());
}
Variant i_hphp_get_thread_id(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_thread_id);
}
Variant ifa_feof(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("feof", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_feof(arg0));
}
Variant i_feof(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_feof);
}
Variant ifa_magicksteganoimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksteganoimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksteganoimage(arg0, arg1, arg2));
}
Variant i_magicksteganoimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksteganoimage);
}
Variant ifa_hphp_splfileinfo_getfilename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getfilename", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getfilename(arg0));
}
Variant i_hphp_splfileinfo_getfilename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getfilename);
}
Variant ifa_array_pop(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("array_pop", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_array_pop(arg0));
}
Variant i_array_pop(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_pop);
}
Variant ifa_memcache_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("memcache_get", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_get(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_memcache_get(arg0, arg1, arg2));
}
Variant i_memcache_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_get);
}
Variant ifa_magicklevelimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("magicklevelimage", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_magicklevelimage(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_magicklevelimage(arg0, arg1, arg2, arg3, arg4));
}
Variant i_magicklevelimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicklevelimage);
}
Variant ifa_opendir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("opendir", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_opendir(arg0));
  CVarRef arg1(a1);
  return (x_opendir(arg0, arg1));
}
Variant i_opendir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_opendir);
}
Variant ifa_magicksetsamplingfactors(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetsamplingfactors", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetsamplingfactors(arg0, arg1, arg2));
}
Variant i_magicksetsamplingfactors(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetsamplingfactors);
}
Variant ifa_array_pad(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("array_pad", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_array_pad(arg0, arg1, arg2));
}
Variant i_array_pad(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_pad);
}
Variant ifa_split(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("split", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_split(arg0, arg1));
  CVarRef arg2(a2);
  return (x_split(arg0, arg1, arg2));
}
Variant i_split(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_split);
}
Variant ifa_atanh(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("atanh", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_atanh(arg0));
}
Variant i_atanh(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_atanh);
}
Variant ifa_dom_characterdata_append_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_characterdata_append_data", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_characterdata_append_data(arg0, arg1));
}
Variant i_dom_characterdata_append_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_characterdata_append_data);
}
Variant ifa_cleardrawingwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("cleardrawingwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_cleardrawingwand(arg0), null);
}
Variant i_cleardrawingwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_cleardrawingwand);
}
Variant ifa_xml_set_element_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("xml_set_element_handler", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_xml_set_element_handler(arg0, arg1, arg2));
}
Variant i_xml_set_element_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_element_handler);
}
Variant ifa_dechex(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dechex", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dechex(arg0));
}
Variant i_dechex(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dechex);
}
Variant ifa_dom_document_normalize_document(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_document_normalize_document", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_document_normalize_document(arg0));
}
Variant i_dom_document_normalize_document(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_normalize_document);
}
Variant ifa_stream_socket_accept(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("stream_socket_accept", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_stream_socket_accept(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_socket_accept(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_stream_socket_accept(arg0, arg1, arg2));
}
Variant i_stream_socket_accept(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_accept);
}
Variant ifa_pagelet_server_task_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pagelet_server_task_status", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pagelet_server_task_status(arg0));
}
Variant i_pagelet_server_task_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pagelet_server_task_status);
}
Variant ifa_imagettftext(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagettftext", count, 8, 8, 1);
}
Variant i_imagettftext(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 8)) return throw_wrong_arguments("imagettftext", count, 8, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagettftext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_shm_attach(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("shm_attach", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_shm_attach(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_shm_attach(arg0, arg1));
  CVarRef arg2(a2);
  return (x_shm_attach(arg0, arg1, arg2));
}
Variant i_shm_attach(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shm_attach);
}
Variant ifa_magicksetimagecompose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagecompose", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagecompose(arg0, arg1));
}
Variant i_magicksetimagecompose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagecompose);
}
Variant ifa_chdir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("chdir", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_chdir(arg0));
}
Variant i_chdir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_chdir);
}
Variant ifa_magickgetexception(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetexception", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetexception(arg0));
}
Variant i_magickgetexception(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetexception);
}
Variant ifa_mailparse_msg_get_part_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mailparse_msg_get_part_data", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mailparse_msg_get_part_data(arg0));
}
Variant i_mailparse_msg_get_part_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_get_part_data);
}
Variant ifa_chroot(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("chroot", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_chroot(arg0));
}
Variant i_chroot(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_chroot);
}
Variant ifa_exif_tagname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("exif_tagname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_exif_tagname(arg0));
}
Variant i_exif_tagname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_exif_tagname);
}
Variant ifa_crypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("crypt", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_crypt(arg0));
  CVarRef arg1(a1);
  return (x_crypt(arg0, arg1));
}
Variant i_crypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_crypt);
}
Variant ifa_levenshtein(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("levenshtein", count, 2, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_levenshtein(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_levenshtein(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_levenshtein(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_levenshtein(arg0, arg1, arg2, arg3, arg4));
}
Variant i_levenshtein(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_levenshtein);
}
Variant ifa_socket_send(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("socket_send", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_socket_send(arg0, arg1, arg2, arg3));
}
Variant i_socket_send(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_send);
}
Variant ifa_get_resource_type(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_resource_type", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_get_resource_type(arg0));
}
Variant i_get_resource_type(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_resource_type);
}
Variant ifa_ldap_get_dn(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_get_dn", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_get_dn(arg0, arg1));
}
Variant i_ldap_get_dn(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_get_dn);
}
Variant ifa_abs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("abs", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_abs(arg0));
}
Variant i_abs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_abs);
}
Variant ifa_mb_decode_numericentity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_decode_numericentity", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_decode_numericentity(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_decode_numericentity(arg0, arg1, arg2));
}
Variant i_mb_decode_numericentity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_decode_numericentity);
}
Variant ifa_clock_settime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("clock_settime", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_clock_settime(arg0, arg1, arg2));
}
Variant i_clock_settime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clock_settime);
}
Variant ifa_pixelsetiteratorrow(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetiteratorrow", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetiteratorrow(arg0, arg1));
}
Variant i_pixelsetiteratorrow(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetiteratorrow);
}
Variant ifa_drawsetcliprule(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetcliprule", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetcliprule(arg0, arg1), null);
}
Variant i_drawsetcliprule(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetcliprule);
}
Variant ifa_drawsetclippath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetclippath", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetclippath(arg0, arg1));
}
Variant i_drawsetclippath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetclippath);
}
Variant ifa_mb_strrpos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_strrpos", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_strrpos(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_strrpos(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_strrpos(arg0, arg1, arg2, arg3));
}
Variant i_mb_strrpos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strrpos);
}
Variant ifa_ldap_next_entry(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_next_entry", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_next_entry(arg0, arg1));
}
Variant i_ldap_next_entry(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_next_entry);
}
Variant ifa_magickgetfilename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetfilename", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetfilename(arg0));
}
Variant i_magickgetfilename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetfilename);
}
Variant ifa_mysql_free_result(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mysql_free_result", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mysql_free_result(arg0));
}
Variant i_mysql_free_result(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_free_result);
}
Variant ifa_magickgetimagecolorspace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagecolorspace", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagecolorspace(arg0));
}
Variant i_magickgetimagecolorspace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagecolorspace);
}
Variant ifa_mb_convert_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_convert_encoding", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_convert_encoding(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_convert_encoding(arg0, arg1, arg2));
}
Variant i_mb_convert_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_convert_encoding);
}
Variant ifa_error_reporting(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("error_reporting", 1, 1);
  if (count <= 0) return (x_error_reporting());
  CVarRef arg0(a0);
  return (x_error_reporting(arg0));
}
Variant i_error_reporting(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_error_reporting);
}
Variant ifa_get_object_vars(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_object_vars", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_get_object_vars(arg0));
}
Variant i_get_object_vars(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_object_vars);
}
Variant ifa_bindec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("bindec", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_bindec(arg0));
}
Variant i_bindec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bindec);
}
Variant ifa_mcrypt_enc_get_modes_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_get_modes_name", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_get_modes_name(arg0));
}
Variant i_mcrypt_enc_get_modes_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_get_modes_name);
}
Variant ifa_ob_get_clean(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_get_clean", 0, 1);
  return (x_ob_get_clean());
}
Variant i_ob_get_clean(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_get_clean);
}
Variant ifa_magicksetimagedelay(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagedelay", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagedelay(arg0, arg1));
}
Variant i_magicksetimagedelay(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagedelay);
}
Variant ifa_sem_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("sem_get", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_sem_get(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_sem_get(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_sem_get(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_sem_get(arg0, arg1, arg2, arg3));
}
Variant i_sem_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sem_get);
}
Variant ifa_hphp_splfileinfo_iswritable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_iswritable", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_iswritable(arg0));
}
Variant i_hphp_splfileinfo_iswritable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_iswritable);
}
Variant ifa_stream_context_set_option(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("stream_context_set_option", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_context_set_option(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_stream_context_set_option(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_stream_context_set_option(arg0, arg1, arg2, arg3));
}
Variant i_stream_context_set_option(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_context_set_option);
}
Variant ifa_magickgetimageresolution(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageresolution", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageresolution(arg0));
}
Variant i_magickgetimageresolution(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageresolution);
}
Variant ifa_ctype_digit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_digit", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_digit(arg0));
}
Variant i_ctype_digit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_digit);
}
Variant ifa_xml_parse_into_struct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("xml_parse_into_struct", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_xml_parse_into_struct(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  return (x_xml_parse_into_struct(arg0, arg1, arg2, arg3));
}
Variant i_xml_parse_into_struct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_parse_into_struct);
}
Variant ifa_nl_langinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("nl_langinfo", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_nl_langinfo(arg0));
}
Variant i_nl_langinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_nl_langinfo);
}
Variant ifa_each(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("each", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_each(arg0));
}
Variant i_each(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_each);
}
Variant ifa_dns_get_record(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("dns_get_record", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_dns_get_record(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_dns_get_record(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_dns_get_record(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  return (x_dns_get_record(arg0, arg1, arg2, arg3));
}
Variant i_dns_get_record(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dns_get_record);
}
Variant ifa_mysql_list_fields(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mysql_list_fields", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_list_fields(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mysql_list_fields(arg0, arg1, arg2));
}
Variant i_mysql_list_fields(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_list_fields);
}
Variant ifa_mcrypt_ofb(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("mcrypt_ofb", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_mcrypt_ofb(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mcrypt_ofb(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mcrypt_ofb(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_ofb);
}
Variant ifa_imagecolordeallocate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagecolordeallocate", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagecolordeallocate(arg0, arg1));
}
Variant i_imagecolordeallocate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolordeallocate);
}
Variant ifa_drawsetfontsize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfontsize", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfontsize(arg0, arg1), null);
}
Variant i_drawsetfontsize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfontsize);
}
Variant ifa_drawpathcurvetorelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawpathcurvetorelative", count, 7, 7, 1);
}
Variant i_drawpathcurvetorelative(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 7)) return throw_wrong_arguments("drawpathcurvetorelative", count, 7, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawpathcurvetorelative(arg0, arg1, arg2, arg3, arg4, arg5, arg6), null);
  }
}
Variant ifa_imagechar(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imagechar", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imagechar(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagechar(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagechar);
}
Variant ifa_openssl_random_pseudo_bytes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("openssl_random_pseudo_bytes", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_openssl_random_pseudo_bytes(arg0));
  VRefParam arg1(vref(a1));
  return (x_openssl_random_pseudo_bytes(arg0, arg1));
}
Variant i_openssl_random_pseudo_bytes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_random_pseudo_bytes);
}
Variant ifa_session_cache_limiter(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("session_cache_limiter", 1, 1);
  if (count <= 0) return (x_session_cache_limiter());
  CVarRef arg0(a0);
  return (x_session_cache_limiter(arg0));
}
Variant i_session_cache_limiter(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_cache_limiter);
}
Variant ifa_stream_filter_remove(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stream_filter_remove", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stream_filter_remove(arg0));
}
Variant i_stream_filter_remove(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_filter_remove);
}
Variant ifa_imagefttext(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagefttext", count, 8, 9, 1);
}
Variant i_imagefttext(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 8 || count > 9)) return throw_wrong_arguments("imagefttext", count, 8, 9, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 8) return (x_imagefttext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagefttext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
  }
}
Variant ifa_magickgetimagescene(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagescene", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagescene(arg0));
}
Variant i_magickgetimagescene(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagescene);
}
Variant ifa_hypot(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hypot", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hypot(arg0, arg1));
}
Variant i_hypot(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hypot);
}
Variant ifa_magicksetimagewhitepoint(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetimagewhitepoint", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetimagewhitepoint(arg0, arg1, arg2));
}
Variant i_magicksetimagewhitepoint(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagewhitepoint);
}
Variant ifa_arsort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("arsort", count, 1, 3, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (x_arsort(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_arsort(arg0, arg1));
  CVarRef arg2(a2);
  return (x_arsort(arg0, arg1, arg2));
}
Variant i_arsort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_arsort);
}
Variant ifa_simplexml_load_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("simplexml_load_string", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_simplexml_load_string(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_simplexml_load_string(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_simplexml_load_string(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_simplexml_load_string(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_simplexml_load_string(arg0, arg1, arg2, arg3, arg4));
}
Variant i_simplexml_load_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_simplexml_load_string);
}
Variant ifa_array_reverse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("array_reverse", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_array_reverse(arg0));
  CVarRef arg1(a1);
  return (x_array_reverse(arg0, arg1));
}
Variant i_array_reverse(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_reverse);
}
Variant ifa_imagecolorset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("imagecolorset", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_imagecolorset(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imagecolorset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorset);
}
Variant ifa_magicksetlastiterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magicksetlastiterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magicksetlastiterator(arg0), null);
}
Variant i_magicksetlastiterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetlastiterator);
}
Variant ifa_drawpathstart(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawpathstart", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawpathstart(arg0), null);
}
Variant i_drawpathstart(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathstart);
}
Variant ifa_magicklabelimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicklabelimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicklabelimage(arg0, arg1));
}
Variant i_magicklabelimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicklabelimage);
}
Variant ifa_use_soap_error_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("use_soap_error_handler", 1, 1);
  if (count <= 0) return (x_use_soap_error_handler());
  CVarRef arg0(a0);
  return (x_use_soap_error_handler(arg0));
}
Variant i_use_soap_error_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_use_soap_error_handler);
}
Variant ifa_hash_update(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hash_update", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hash_update(arg0, arg1));
}
Variant i_hash_update(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_update);
}
Variant ifa_file_get_contents(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("file_get_contents", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_file_get_contents(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_file_get_contents(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_file_get_contents(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_file_get_contents(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_file_get_contents(arg0, arg1, arg2, arg3, arg4));
}
Variant i_file_get_contents(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_file_get_contents);
}
Variant ifa_session_set_cookie_params(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("session_set_cookie_params", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_session_set_cookie_params(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (x_session_set_cookie_params(arg0, arg1), null);
  CVarRef arg2(a2);
  if (count <= 3) return (x_session_set_cookie_params(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  if (count <= 4) return (x_session_set_cookie_params(arg0, arg1, arg2, arg3), null);
  CVarRef arg4(a4);
  return (x_session_set_cookie_params(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_session_set_cookie_params(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_set_cookie_params);
}
Variant ifa_array_push(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_push", count+1, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_push(count, arg0, arg1, p));
}
Variant i_array_push(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_push", count+1, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    VRefParam arg0(vref(ad->getValueRef(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_push(count, arg0, arg1, p));
  }
}
Variant ifa_drawgetexception(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetexception", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetexception(arg0));
}
Variant i_drawgetexception(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetexception);
}
Variant ifa_ldap_errno(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ldap_errno", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ldap_errno(arg0));
}
Variant i_ldap_errno(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_errno);
}
Variant ifa_move_uploaded_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("move_uploaded_file", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_move_uploaded_file(arg0, arg1));
}
Variant i_move_uploaded_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_move_uploaded_file);
}
Variant ifa_magicksetfirstiterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magicksetfirstiterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magicksetfirstiterator(arg0), null);
}
Variant i_magicksetfirstiterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetfirstiterator);
}
Variant ifa_soundex(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("soundex", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_soundex(arg0));
}
Variant i_soundex(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_soundex);
}
Variant ifa_xml_set_unparsed_entity_decl_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_unparsed_entity_decl_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_set_unparsed_entity_decl_handler(arg0, arg1));
}
Variant i_xml_set_unparsed_entity_decl_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_unparsed_entity_decl_handler);
}
Variant ifa_array_sum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("array_sum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_array_sum(arg0));
}
Variant i_array_sum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_sum);
}
Variant ifa_posix_get_last_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_get_last_error", 0, 1);
  return (x_posix_get_last_error());
}
Variant i_posix_get_last_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_get_last_error);
}
Variant ifa_imap_fetchheader(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("imap_fetchheader", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_fetchheader(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imap_fetchheader(arg0, arg1, arg2));
}
Variant i_imap_fetchheader(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_fetchheader);
}
Variant ifa_file_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("file_exists", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_file_exists(arg0));
}
Variant i_file_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_file_exists);
}
Variant ifa_drawpathcurvetoquadraticbeziersmoothabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawpathcurvetoquadraticbeziersmoothabsolute", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawpathcurvetoquadraticbeziersmoothabsolute(arg0, arg1, arg2), null);
}
Variant i_drawpathcurvetoquadraticbeziersmoothabsolute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathcurvetoquadraticbeziersmoothabsolute);
}
Variant ifa_get_declared_interfaces(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_declared_interfaces", 0, 1);
  return (x_get_declared_interfaces());
}
Variant i_get_declared_interfaces(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_declared_interfaces);
}
Variant ifa_pixelgetcyanquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetcyanquantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetcyanquantum(arg0));
}
Variant i_pixelgetcyanquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetcyanquantum);
}
Variant ifa_array_diff_ukey(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_diff_ukey", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_diff_ukey(count, arg0, arg1, arg2, p));
}
Variant i_array_diff_ukey(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_diff_ukey", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_array_diff_ukey(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_log1p(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("log1p", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_log1p(arg0));
}
Variant i_log1p(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_log1p);
}
Variant ifa_magickmedianfilterimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickmedianfilterimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickmedianfilterimage(arg0, arg1));
}
Variant i_magickmedianfilterimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmedianfilterimage);
}
Variant ifa_hphp_splfileinfo_getowner(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getowner", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getowner(arg0));
}
Variant i_hphp_splfileinfo_getowner(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getowner);
}
Variant ifa_drawgetgravity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetgravity", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetgravity(arg0));
}
Variant i_drawgetgravity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetgravity);
}
Variant ifa_xhprof_frame_begin(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xhprof_frame_begin", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xhprof_frame_begin(arg0), null);
}
Variant i_xhprof_frame_begin(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_frame_begin);
}
Variant ifa_is_uploaded_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_uploaded_file", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_uploaded_file(arg0));
}
Variant i_is_uploaded_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_uploaded_file);
}
Variant ifa_hphp_splfileobject_flock(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileobject_flock", count, 2, 2, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  return (x_hphp_splfileobject_flock(arg0, arg1));
}
Variant i_hphp_splfileobject_flock(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_flock);
}
Variant ifa_curl_setopt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("curl_setopt", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_curl_setopt(arg0, arg1, arg2));
}
Variant i_curl_setopt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_setopt);
}
Variant ifa_mysql_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_error", 1, 1);
  if (count <= 0) return (x_mysql_error());
  CVarRef arg0(a0);
  return (x_mysql_error(arg0));
}
Variant i_mysql_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_error);
}
Variant ifa_mysql_drop_db(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_drop_db", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_drop_db(arg0));
  CVarRef arg1(a1);
  return (x_mysql_drop_db(arg0, arg1));
}
Variant i_mysql_drop_db(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_drop_db);
}
Variant ifa_hphp_is_service_thread(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_is_service_thread", 0, 1);
  return (x_hphp_is_service_thread());
}
Variant i_hphp_is_service_thread(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_is_service_thread);
}
Variant ifa_xbox_set_thread_timeout(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xbox_set_thread_timeout", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xbox_set_thread_timeout(arg0), null);
}
Variant i_xbox_set_thread_timeout(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_set_thread_timeout);
}
Variant ifa_xmlwriter_flush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("xmlwriter_flush", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_xmlwriter_flush(arg0));
  CVarRef arg1(a1);
  return (x_xmlwriter_flush(arg0, arg1));
}
Variant i_xmlwriter_flush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_flush);
}
Variant ifa_posix_getpgid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_getpgid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_getpgid(arg0));
}
Variant i_posix_getpgid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getpgid);
}
Variant ifa_session_destroy(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("session_destroy", 0, 1);
  return (x_session_destroy());
}
Variant i_session_destroy(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_destroy);
}
Variant ifa_sinh(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sinh", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sinh(arg0));
}
Variant i_sinh(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sinh);
}
Variant ifa_doubleval(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("doubleval", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_doubleval(arg0));
}
Variant i_doubleval(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_doubleval);
}
Variant ifa_imap_listmailbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_listmailbox", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_listmailbox(arg0, arg1, arg2));
}
Variant i_imap_listmailbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_listmailbox);
}
Variant ifa_stream_bucket_new(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_bucket_new", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_bucket_new(arg0, arg1));
}
Variant i_stream_bucket_new(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_bucket_new);
}
Variant ifa_hash_hmac_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("hash_hmac_file", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_hash_hmac_file(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_hash_hmac_file(arg0, arg1, arg2, arg3));
}
Variant i_hash_hmac_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_hmac_file);
}
Variant ifa_magicksetpassphrase(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetpassphrase", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetpassphrase(arg0, arg1));
}
Variant i_magicksetpassphrase(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetpassphrase);
}
Variant ifa_array_flip(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("array_flip", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_array_flip(arg0));
}
Variant i_array_flip(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_flip);
}
Variant ifa_fpassthru(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fpassthru", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fpassthru(arg0));
}
Variant i_fpassthru(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fpassthru);
}
Variant ifa_rmdir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("rmdir", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_rmdir(arg0));
  CVarRef arg1(a1);
  return (x_rmdir(arg0, arg1));
}
Variant i_rmdir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rmdir);
}
Variant ifa_xbox_post_message(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("xbox_post_message", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_xbox_post_message(arg0));
  CVarRef arg1(a1);
  return (x_xbox_post_message(arg0, arg1));
}
Variant i_xbox_post_message(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_post_message);
}
Variant ifa_preg_grep(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("preg_grep", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_preg_grep(arg0, arg1));
  CVarRef arg2(a2);
  return (x_preg_grep(arg0, arg1, arg2));
}
Variant i_preg_grep(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_preg_grep);
}
Variant ifa_gzdeflate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gzdeflate", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzdeflate(arg0));
  CVarRef arg1(a1);
  return (x_gzdeflate(arg0, arg1));
}
Variant i_gzdeflate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzdeflate);
}
Variant ifa_headers_sent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("headers_sent", 2, 1);
  if (count <= 0) return (x_headers_sent());
  VRefParam arg0(vref(a0));
  if (count <= 1) return (x_headers_sent(arg0));
  VRefParam arg1(vref(a1));
  return (x_headers_sent(arg0, arg1));
}
Variant i_headers_sent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_headers_sent);
}
Variant ifa_clearpixelwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("clearpixelwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_clearpixelwand(arg0), null);
}
Variant i_clearpixelwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clearpixelwand);
}
Variant ifa_microtime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("microtime", 1, 1);
  if (count <= 0) return (x_microtime());
  CVarRef arg0(a0);
  return (x_microtime(arg0));
}
Variant i_microtime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_microtime);
}
Variant ifa_drawsettextalignment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsettextalignment", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsettextalignment(arg0, arg1), null);
}
Variant i_drawsettextalignment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsettextalignment);
}
Variant ifa_imap_alerts(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("imap_alerts", 0, 1);
  return (x_imap_alerts());
}
Variant i_imap_alerts(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_alerts);
}
Variant ifa_mail(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("mail", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_mail(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mail(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mail(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mail(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mail);
}
Variant ifa_mysql_db_query(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mysql_db_query", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_db_query(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mysql_db_query(arg0, arg1, arg2));
}
Variant i_mysql_db_query(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_db_query);
}
Variant ifa_explode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("explode", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_explode(arg0, arg1));
  CVarRef arg2(a2);
  return (x_explode(arg0, arg1, arg2));
}
Variant i_explode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_explode);
}
Variant ifa_dirname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dirname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dirname(arg0));
}
Variant i_dirname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dirname);
}
Variant ifa_get_called_class(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_called_class", 0, 1);
  return (x_get_called_class());
}
Variant i_get_called_class(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_called_class);
}
Variant ifa_ini_alter(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ini_alter", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ini_alter(arg0, arg1));
}
Variant i_ini_alter(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ini_alter);
}
Variant ifa_php_logo_guid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("php_logo_guid", 0, 1);
  return (x_php_logo_guid());
}
Variant i_php_logo_guid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_php_logo_guid);
}
Variant ifa_set_error_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("set_error_handler", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_set_error_handler(arg0));
  CVarRef arg1(a1);
  return (x_set_error_handler(arg0, arg1));
}
Variant i_set_error_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_set_error_handler);
}
Variant ifa_dom_document_create_text_node(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_create_text_node", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_create_text_node(arg0, arg1));
}
Variant i_dom_document_create_text_node(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_text_node);
}
Variant ifa_libxml_set_streams_context(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("libxml_set_streams_context", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_libxml_set_streams_context(arg0), null);
}
Variant i_libxml_set_streams_context(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_libxml_set_streams_context);
}
Variant ifa_mysql_create_db(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_create_db", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_create_db(arg0));
  CVarRef arg1(a1);
  return (x_mysql_create_db(arg0, arg1));
}
Variant i_mysql_create_db(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_create_db);
}
Variant ifa_socket_create_pair(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("socket_create_pair", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  VRefParam arg3(vref(a3));
  return (x_socket_create_pair(arg0, arg1, arg2, arg3));
}
Variant i_socket_create_pair(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_create_pair);
}
Variant ifa_shm_get_var(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("shm_get_var", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_shm_get_var(arg0, arg1));
}
Variant i_shm_get_var(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shm_get_var);
}
Variant ifa_fgetc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fgetc", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fgetc(arg0));
}
Variant i_fgetc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fgetc);
}
Variant ifa_stream_wrapper_restore(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stream_wrapper_restore", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stream_wrapper_restore(arg0));
}
Variant i_stream_wrapper_restore(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_wrapper_restore);
}
Variant ifa_imagesy(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagesy", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagesy(arg0));
}
Variant i_imagesy(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagesy);
}
Variant ifa_fclose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fclose", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fclose(arg0));
}
Variant i_fclose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fclose);
}
Variant ifa_pixelsetindex(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetindex", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetindex(arg0, arg1), null);
}
Variant i_pixelsetindex(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetindex);
}
Variant ifa_xml_parser_get_option(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_parser_get_option", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_parser_get_option(arg0, arg1));
}
Variant i_xml_parser_get_option(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_parser_get_option);
}
Variant ifa_prev(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("prev", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_prev(arg0));
}
Variant i_prev(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_prev);
}
Variant ifa_hphp_splfileobject_setflags(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileobject_setflags", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileobject_setflags(arg0, arg1), null);
}
Variant i_hphp_splfileobject_setflags(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_setflags);
}
Variant ifa_memcache_set_server_params(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_wrong_arguments("memcache_set_server_params", count, 2, 7, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_set_server_params(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_set_server_params(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_memcache_set_server_params(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_memcache_set_server_params(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_memcache_set_server_params(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_memcache_set_server_params(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 7)) return throw_wrong_arguments("memcache_set_server_params", count, 2, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (x_memcache_set_server_params(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_memcache_set_server_params(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_memcache_set_server_params(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_memcache_set_server_params(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_memcache_set_server_params(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_memcache_set_server_params(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_gztell(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gztell", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gztell(arg0));
}
Variant i_gztell(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gztell);
}
Variant ifa_ltrim(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("ltrim", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_ltrim(arg0));
  CVarRef arg1(a1);
  return (x_ltrim(arg0, arg1));
}
Variant i_ltrim(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ltrim);
}
Variant ifa_magickstripimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickstripimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickstripimage(arg0));
}
Variant i_magickstripimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickstripimage);
}
Variant ifa_hash_update_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("hash_update_file", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_hash_update_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_hash_update_file(arg0, arg1, arg2));
}
Variant i_hash_update_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_update_file);
}
Variant ifa_unlink(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("unlink", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_unlink(arg0));
  CVarRef arg1(a1);
  return (x_unlink(arg0, arg1));
}
Variant i_unlink(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_unlink);
}
Variant ifa_bzdecompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("bzdecompress", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_bzdecompress(arg0));
  CVarRef arg1(a1);
  return (x_bzdecompress(arg0, arg1));
}
Variant i_bzdecompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzdecompress);
}
Variant ifa_pcntl_wait(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("pcntl_wait", count, 1, 2, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (x_pcntl_wait(arg0));
  CVarRef arg1(a1);
  return (x_pcntl_wait(arg0, arg1));
}
Variant i_pcntl_wait(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_wait);
}
Variant ifa_strrchr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strrchr", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strrchr(arg0, arg1));
}
Variant i_strrchr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strrchr);
}
Variant ifa_imagecolorat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imagecolorat", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imagecolorat(arg0, arg1, arg2));
}
Variant i_imagecolorat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorat);
}
Variant ifa_ob_clean(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_clean", 0, 1);
  return (x_ob_clean(), null);
}
Variant i_ob_clean(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_clean);
}
Variant ifa_array_map(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_map", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_map(count, arg0, arg1, p));
}
Variant i_array_map(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_map", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_map(count, arg0, arg1, p));
  }
}
Variant ifa_ldap_parse_reference(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_parse_reference", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  return (x_ldap_parse_reference(arg0, arg1, arg2));
}
Variant i_ldap_parse_reference(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_parse_reference);
}
Variant ifa_mysql_get_proto_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_get_proto_info", 1, 1);
  if (count <= 0) return (x_mysql_get_proto_info());
  CVarRef arg0(a0);
  return (x_mysql_get_proto_info(arg0));
}
Variant i_mysql_get_proto_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_get_proto_info);
}
Variant ifa_libxml_clear_errors(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("libxml_clear_errors", 0, 1);
  return (x_libxml_clear_errors(), null);
}
Variant i_libxml_clear_errors(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_libxml_clear_errors);
}
Variant ifa_drawannotation(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("drawannotation", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_drawannotation(arg0, arg1, arg2, arg3), null);
}
Variant i_drawannotation(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawannotation);
}
Variant ifa_dir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dir", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dir(arg0));
}
Variant i_dir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dir);
}
Variant ifa_gettimeofday(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("gettimeofday", 1, 1);
  if (count <= 0) return (x_gettimeofday());
  CVarRef arg0(a0);
  return (x_gettimeofday(arg0));
}
Variant i_gettimeofday(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gettimeofday);
}
Variant ifa_drawcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("drawcolor", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_drawcolor(arg0, arg1, arg2, arg3), null);
}
Variant i_drawcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawcolor);
}
Variant ifa_fb_disable_code_coverage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fb_disable_code_coverage", 0, 1);
  return (x_fb_disable_code_coverage());
}
Variant i_fb_disable_code_coverage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_disable_code_coverage);
}
Variant ifa_posix_initgroups(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("posix_initgroups", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_posix_initgroups(arg0, arg1));
}
Variant i_posix_initgroups(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_initgroups);
}
Variant ifa_pixelsynciterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelsynciterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelsynciterator(arg0));
}
Variant i_pixelsynciterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsynciterator);
}
Variant ifa_imagesetthickness(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagesetthickness", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagesetthickness(arg0, arg1));
}
Variant i_imagesetthickness(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagesetthickness);
}
Variant ifa_fread(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("fread", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_fread(arg0, arg1));
}
Variant i_fread(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fread);
}
Variant ifa_xbox_task_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xbox_task_status", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xbox_task_status(arg0));
}
Variant i_xbox_task_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_task_status);
}
Variant ifa_magickgetstringheight(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickgetstringheight", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickgetstringheight(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickgetstringheight(arg0, arg1, arg2, arg3));
}
Variant i_magickgetstringheight(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetstringheight);
}
Variant ifa_magickcolorizeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickcolorizeimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickcolorizeimage(arg0, arg1, arg2));
}
Variant i_magickcolorizeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcolorizeimage);
}
Variant ifa_chunk_split(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("chunk_split", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_chunk_split(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_chunk_split(arg0, arg1));
  CVarRef arg2(a2);
  return (x_chunk_split(arg0, arg1, arg2));
}
Variant i_chunk_split(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_chunk_split);
}
Variant ifa_image_type_to_extension(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("image_type_to_extension", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_image_type_to_extension(arg0));
  CVarRef arg1(a1);
  return (x_image_type_to_extension(arg0, arg1));
}
Variant i_image_type_to_extension(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_image_type_to_extension);
}
Variant ifa_krsort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("krsort", count, 1, 2, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (x_krsort(arg0));
  CVarRef arg1(a1);
  return (x_krsort(arg0, arg1));
}
Variant i_krsort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_krsort);
}
Variant ifa_pcntl_wstopsig(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pcntl_wstopsig", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pcntl_wstopsig(arg0));
}
Variant i_pcntl_wstopsig(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_wstopsig);
}
Variant ifa_imagefilledarc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagefilledarc", count, 9, 9, 1);
}
Variant i_imagefilledarc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 9)) return throw_wrong_arguments("imagefilledarc", count, 9, 9, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagefilledarc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
  }
}
Variant ifa_intl_get_error_message(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("intl_get_error_message", 0, 1);
  return (x_intl_get_error_message());
}
Variant i_intl_get_error_message(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_intl_get_error_message);
}
Variant ifa_hphp_splfileobject_fscanf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("hphp_splfileobject_fscanf", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_hphp_splfileobject_fscanf(arg0, arg1, arg2, arg3));
}
Variant i_hphp_splfileobject_fscanf(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fscanf);
}
Variant ifa_eregi_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("eregi_replace", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_eregi_replace(arg0, arg1, arg2));
}
Variant i_eregi_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_eregi_replace);
}
Variant ifa_mcrypt_module_get_supported_key_sizes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_module_get_supported_key_sizes", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_module_get_supported_key_sizes(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_module_get_supported_key_sizes(arg0, arg1));
}
Variant i_mcrypt_module_get_supported_key_sizes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_get_supported_key_sizes);
}
Variant ifa_hebrevc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("hebrevc", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_hebrevc(arg0));
  CVarRef arg1(a1);
  return (x_hebrevc(arg0, arg1));
}
Variant i_hebrevc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hebrevc);
}
Variant ifa_str_rot13(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("str_rot13", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_str_rot13(arg0));
}
Variant i_str_rot13(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_str_rot13);
}
Variant ifa_magickgetimageformat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageformat", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageformat(arg0));
}
Variant i_magickgetimageformat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageformat);
}
Variant ifa_xhprof_sample_disable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xhprof_sample_disable", 0, 1);
  return (x_xhprof_sample_disable());
}
Variant i_xhprof_sample_disable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_sample_disable);
}
Variant ifa_mysql_thread_id(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_thread_id", 1, 1);
  if (count <= 0) return (x_mysql_thread_id());
  CVarRef arg0(a0);
  return (x_mysql_thread_id(arg0));
}
Variant i_mysql_thread_id(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_thread_id);
}
Variant ifa_socket_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("socket_close", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_socket_close(arg0), null);
}
Variant i_socket_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_close);
}
Variant ifa_rawurldecode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("rawurldecode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_rawurldecode(arg0));
}
Variant i_rawurldecode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rawurldecode);
}
Variant ifa_hphp_splfileinfo_getpath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getpath", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getpath(arg0));
}
Variant i_hphp_splfileinfo_getpath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getpath);
}
Variant ifa_imap_getacl(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_getacl", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_getacl(arg0, arg1));
}
Variant i_imap_getacl(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_getacl);
}
Variant ifa_imagefontheight(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagefontheight", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagefontheight(arg0));
}
Variant i_imagefontheight(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagefontheight);
}
Variant ifa_imap_reopen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("imap_reopen", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_reopen(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_reopen(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imap_reopen(arg0, arg1, arg2, arg3));
}
Variant i_imap_reopen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_reopen);
}
Variant ifa_getenv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getenv", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_getenv(arg0));
}
Variant i_getenv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getenv);
}
Variant ifa_virtual(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("virtual", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_virtual(arg0));
}
Variant i_virtual(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_virtual);
}
Variant ifa_hphp_splfileobject_fpassthru(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_fpassthru", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_fpassthru(arg0));
}
Variant i_hphp_splfileobject_fpassthru(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fpassthru);
}
Variant ifa_getlastmod(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getlastmod", 0, 1);
  return (x_getlastmod());
}
Variant i_getlastmod(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getlastmod);
}
Variant ifa_timezone_name_from_abbr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("timezone_name_from_abbr", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_timezone_name_from_abbr(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_timezone_name_from_abbr(arg0, arg1));
  CVarRef arg2(a2);
  return (x_timezone_name_from_abbr(arg0, arg1, arg2));
}
Variant i_timezone_name_from_abbr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_timezone_name_from_abbr);
}
Variant ifa_mb_language(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_language", 1, 1);
  if (count <= 0) return (x_mb_language());
  CVarRef arg0(a0);
  return (x_mb_language(arg0));
}
Variant i_mb_language(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_language);
}
Variant ifa_drawpathlinetohorizontalabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawpathlinetohorizontalabsolute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawpathlinetohorizontalabsolute(arg0, arg1), null);
}
Variant i_drawpathlinetohorizontalabsolute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathlinetohorizontalabsolute);
}
Variant ifa_imap_rfc822_parse_headers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imap_rfc822_parse_headers", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imap_rfc822_parse_headers(arg0));
  CVarRef arg1(a1);
  return (x_imap_rfc822_parse_headers(arg0, arg1));
}
Variant i_imap_rfc822_parse_headers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_rfc822_parse_headers);
}
Variant ifa_curl_multi_remove_handle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("curl_multi_remove_handle", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_curl_multi_remove_handle(arg0, arg1));
}
Variant i_curl_multi_remove_handle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_multi_remove_handle);
}
Variant ifa_bzread(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("bzread", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_bzread(arg0));
  CVarRef arg1(a1);
  return (x_bzread(arg0, arg1));
}
Variant i_bzread(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzread);
}
Variant ifa_hphp_splfileobject_setcsvcontrol(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("hphp_splfileobject_setcsvcontrol", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_hphp_splfileobject_setcsvcontrol(arg0, arg1, arg2, arg3), null);
}
Variant i_hphp_splfileobject_setcsvcontrol(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_setcsvcontrol);
}
Variant ifa_hphp_get_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_get_status", 0, 1);
  return (x_hphp_get_status());
}
Variant i_hphp_get_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_status);
}
Variant ifa_mysql_list_dbs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_list_dbs", 1, 1);
  if (count <= 0) return (x_mysql_list_dbs());
  CVarRef arg0(a0);
  return (x_mysql_list_dbs(arg0));
}
Variant i_mysql_list_dbs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_list_dbs);
}
Variant ifa_apache_get_scoreboard(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apache_get_scoreboard", 0, 1);
  return (x_apache_get_scoreboard());
}
Variant i_apache_get_scoreboard(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apache_get_scoreboard);
}
Variant ifa_interface_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("interface_exists", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_interface_exists(arg0));
  CVarRef arg1(a1);
  return (x_interface_exists(arg0, arg1));
}
Variant i_interface_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_interface_exists);
}
Variant ifa_magickcolorfloodfillimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickcolorfloodfillimage", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickcolorfloodfillimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickcolorfloodfillimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcolorfloodfillimage);
}
Variant ifa_xmlwriter_start_document(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("xmlwriter_start_document", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_xmlwriter_start_document(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_xmlwriter_start_document(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_xmlwriter_start_document(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_xmlwriter_start_document(arg0, arg1, arg2, arg3));
}
Variant i_xmlwriter_start_document(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_document);
}
Variant ifa_hphp_recursivedirectoryiterator___tostring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator___tostring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator___tostring(arg0));
}
Variant i_hphp_recursivedirectoryiterator___tostring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator___tostring);
}
Variant ifa_chr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("chr", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_chr(arg0));
}
Variant i_chr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_chr);
}
Variant ifa_socket_server(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("socket_server", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_socket_server(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_socket_server(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_socket_server(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  return (x_socket_server(arg0, arg1, arg2, arg3));
}
Variant i_socket_server(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_server);
}
Variant ifa_ereg_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ereg_replace", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ereg_replace(arg0, arg1, arg2));
}
Variant i_ereg_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ereg_replace);
}
Variant ifa_openssl_get_publickey(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_get_publickey", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_get_publickey(arg0));
}
Variant i_openssl_get_publickey(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_get_publickey);
}
Variant ifa_hash_update_stream(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("hash_update_stream", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_hash_update_stream(arg0, arg1));
  CVarRef arg2(a2);
  return (x_hash_update_stream(arg0, arg1, arg2));
}
Variant i_hash_update_stream(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_update_stream);
}
Variant ifa_openssl_pkcs7_sign(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 5)) return throw_wrong_arguments("openssl_pkcs7_sign", count, 5, 7, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  if (count <= 5) return (x_openssl_pkcs7_sign(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_openssl_pkcs7_sign(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_openssl_pkcs7_sign(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 5 || count > 7)) return throw_wrong_arguments("openssl_pkcs7_sign", count, 5, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_openssl_pkcs7_sign(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_openssl_pkcs7_sign(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_openssl_pkcs7_sign(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_drawpathlinetoverticalabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawpathlinetoverticalabsolute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawpathlinetoverticalabsolute(arg0, arg1), null);
}
Variant i_drawpathlinetoverticalabsolute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathlinetoverticalabsolute);
}
Variant ifa_array_combine(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("array_combine", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_array_combine(arg0, arg1));
}
Variant i_array_combine(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_combine);
}
Variant ifa_filetype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("filetype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_filetype(arg0));
}
Variant i_filetype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_filetype);
}
Variant ifa_fb_set_taint(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("fb_set_taint", count, 2, 2, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  return (x_fb_set_taint(arg0, arg1), null);
}
Variant i_fb_set_taint(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_set_taint);
}
Variant ifa_key_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("key_exists", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_key_exists(arg0, arg1));
}
Variant i_key_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_key_exists);
}
Variant ifa_memcache_add_server(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_wrong_arguments("memcache_add_server", count, 2, 10, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_add_server(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_add_server(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_memcache_add_server(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_memcache_add_server(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_memcache_add_server(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_memcache_add_server(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 10)) return throw_wrong_arguments("memcache_add_server", count, 2, 10, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (x_memcache_add_server(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_memcache_add_server(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_memcache_add_server(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_memcache_add_server(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_memcache_add_server(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 7) return (x_memcache_add_server(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 8) return (x_memcache_add_server(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 9) return (x_memcache_add_server(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
    CVarRef arg9((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_memcache_add_server(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
  }
}
Variant ifa_is_soap_fault(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_soap_fault", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_soap_fault(arg0));
}
Variant i_is_soap_fault(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_soap_fault);
}
Variant ifa_hphp_directoryiterator_isdot(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_directoryiterator_isdot", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_directoryiterator_isdot(arg0));
}
Variant i_hphp_directoryiterator_isdot(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator_isdot);
}
Variant ifa_imagesavealpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagesavealpha", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagesavealpha(arg0, arg1));
}
Variant i_imagesavealpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagesavealpha);
}
Variant ifa_shm_remove(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("shm_remove", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_shm_remove(arg0));
}
Variant i_shm_remove(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shm_remove);
}
Variant ifa_magickgetimageextrema(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("magickgetimageextrema", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_magickgetimageextrema(arg0));
  CVarRef arg1(a1);
  return (x_magickgetimageextrema(arg0, arg1));
}
Variant i_magickgetimageextrema(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageextrema);
}
Variant ifa_memcache_get_server_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("memcache_get_server_status", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_get_server_status(arg0, arg1));
  CVarRef arg2(a2);
  return (x_memcache_get_server_status(arg0, arg1, arg2));
}
Variant i_memcache_get_server_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_get_server_status);
}
Variant ifa_socket_shutdown(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("socket_shutdown", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_socket_shutdown(arg0));
  CVarRef arg1(a1);
  return (x_socket_shutdown(arg0, arg1));
}
Variant i_socket_shutdown(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_shutdown);
}
Variant ifa_magicksetcompressionquality(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetcompressionquality", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetcompressionquality(arg0, arg1));
}
Variant i_magicksetcompressionquality(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetcompressionquality);
}
Variant ifa_session_is_registered(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("session_is_registered", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_session_is_registered(arg0));
}
Variant i_session_is_registered(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_is_registered);
}
Variant ifa_magicksetimagefilename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("magicksetimagefilename", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_magicksetimagefilename(arg0));
  CVarRef arg1(a1);
  return (x_magicksetimagefilename(arg0, arg1));
}
Variant i_magicksetimagefilename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagefilename);
}
Variant ifa_magickaddimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickaddimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickaddimage(arg0, arg1));
}
Variant i_magickaddimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickaddimage);
}
Variant ifa_mcrypt_enc_get_supported_key_sizes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_get_supported_key_sizes", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_get_supported_key_sizes(arg0));
}
Variant i_mcrypt_enc_get_supported_key_sizes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_get_supported_key_sizes);
}
Variant ifa_fb_get_flush_stat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fb_get_flush_stat", 0, 1);
  return (x_fb_get_flush_stat());
}
Variant i_fb_get_flush_stat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_get_flush_stat);
}
Variant ifa_exif_thumbnail(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("exif_thumbnail", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_exif_thumbnail(arg0));
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_exif_thumbnail(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_exif_thumbnail(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  return (x_exif_thumbnail(arg0, arg1, arg2, arg3));
}
Variant i_exif_thumbnail(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_exif_thumbnail);
}
Variant ifa_mkdir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("mkdir", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mkdir(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mkdir(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mkdir(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mkdir(arg0, arg1, arg2, arg3));
}
Variant i_mkdir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mkdir);
}
Variant ifa_iconv_strpos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("iconv_strpos", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_iconv_strpos(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_iconv_strpos(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_iconv_strpos(arg0, arg1, arg2, arg3));
}
Variant i_iconv_strpos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_strpos);
}
Variant ifa_checkdate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("checkdate", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_checkdate(arg0, arg1, arg2));
}
Variant i_checkdate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_checkdate);
}
Variant ifa_array_udiff_assoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_udiff_assoc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_udiff_assoc(count, arg0, arg1, arg2, p));
}
Variant i_array_udiff_assoc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_udiff_assoc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_array_udiff_assoc(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_msg_stat_queue(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("msg_stat_queue", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_msg_stat_queue(arg0));
}
Variant i_msg_stat_queue(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_msg_stat_queue);
}
Variant ifa_copy(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("copy", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_copy(arg0, arg1));
  CVarRef arg2(a2);
  return (x_copy(arg0, arg1, arg2));
}
Variant i_copy(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_copy);
}
Variant ifa_xhprof_network_disable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xhprof_network_disable", 0, 1);
  return (x_xhprof_network_disable());
}
Variant i_xhprof_network_disable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_network_disable);
}
Variant ifa_json_encode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("json_encode", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_json_encode(arg0));
  CVarRef arg1(a1);
  return (x_json_encode(arg0, arg1));
}
Variant i_json_encode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_json_encode);
}
Variant ifa_getrusage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("getrusage", 1, 1);
  if (count <= 0) return (x_getrusage());
  CVarRef arg0(a0);
  return (x_getrusage(arg0));
}
Variant i_getrusage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getrusage);
}
Variant ifa_socket_read(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("socket_read", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_socket_read(arg0, arg1));
  CVarRef arg2(a2);
  return (x_socket_read(arg0, arg1, arg2));
}
Variant i_socket_read(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_read);
}
Variant ifa_hphp_splfileobject_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_key", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_key(arg0));
}
Variant i_hphp_splfileobject_key(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_key);
}
Variant ifa_posix_setuid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_setuid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_setuid(arg0));
}
Variant i_posix_setuid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_setuid);
}
Variant ifa_xmlwriter_write_attribute_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("xmlwriter_write_attribute_ns", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_xmlwriter_write_attribute_ns(arg0, arg1, arg2, arg3, arg4));
}
Variant i_xmlwriter_write_attribute_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_attribute_ns);
}
Variant ifa_is_finite(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_finite", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_finite(arg0));
}
Variant i_is_finite(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_finite);
}
Variant ifa_destroypixelwandarray(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("destroypixelwandarray", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_destroypixelwandarray(arg0), null);
}
Variant i_destroypixelwandarray(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_destroypixelwandarray);
}
Variant ifa_hphp_clear_hardware_events(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_clear_hardware_events", 0, 1);
  return (x_hphp_clear_hardware_events(), null);
}
Variant i_hphp_clear_hardware_events(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_clear_hardware_events);
}
Variant ifa_drawgettextalignment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgettextalignment", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgettextalignment(arg0));
}
Variant i_drawgettextalignment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgettextalignment);
}
Variant ifa_magicknegateimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("magicknegateimage", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_magicknegateimage(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_magicknegateimage(arg0, arg1));
  CVarRef arg2(a2);
  return (x_magicknegateimage(arg0, arg1, arg2));
}
Variant i_magicknegateimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicknegateimage);
}
Variant ifa_imap_num_msg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_num_msg", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_num_msg(arg0));
}
Variant i_imap_num_msg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_num_msg);
}
Variant ifa_mcrypt_enc_get_block_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_get_block_size", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_get_block_size(arg0));
}
Variant i_mcrypt_enc_get_block_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_get_block_size);
}
Variant ifa_drawsetclipunits(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetclipunits", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetclipunits(arg0, arg1), null);
}
Variant i_drawsetclipunits(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetclipunits);
}
Variant ifa_xhprof_enable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("xhprof_enable", 2, 1);
  if (count <= 0) return (x_xhprof_enable(), null);
  CVarRef arg0(a0);
  if (count <= 1) return (x_xhprof_enable(arg0), null);
  CVarRef arg1(a1);
  return (x_xhprof_enable(arg0, arg1), null);
}
Variant i_xhprof_enable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_enable);
}
Variant ifa_magickdeconstructimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickdeconstructimages", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickdeconstructimages(arg0));
}
Variant i_magickdeconstructimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickdeconstructimages);
}
Variant ifa_hexdec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hexdec", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hexdec(arg0));
}
Variant i_hexdec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hexdec);
}
Variant ifa_imagecolorstotal(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecolorstotal", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecolorstotal(arg0));
}
Variant i_imagecolorstotal(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorstotal);
}
Variant ifa_fb_utf8_substr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("fb_utf8_substr", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_fb_utf8_substr(arg0, arg1));
  CVarRef arg2(a2);
  return (x_fb_utf8_substr(arg0, arg1, arg2));
}
Variant i_fb_utf8_substr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_utf8_substr);
}
Variant ifa_posix_ctermid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_ctermid", 0, 1);
  return (x_posix_ctermid());
}
Variant i_posix_ctermid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_ctermid);
}
Variant ifa_png2wbmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("png2wbmp", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_png2wbmp(arg0, arg1, arg2, arg3, arg4));
}
Variant i_png2wbmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_png2wbmp);
}
Variant ifa_call_user_method(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("call_user_method", count+1, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_call_user_method(count, arg0, arg1, p));
}
Variant i_call_user_method(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("call_user_method", count+1, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    VRefParam arg1(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_call_user_method(count, arg0, arg1, p));
  }
}
Variant ifa_posix_getlogin(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getlogin", 0, 1);
  return (x_posix_getlogin());
}
Variant i_posix_getlogin(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getlogin);
}
Variant ifa_imagecopyresampled(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagecopyresampled", count, 10, 10, 1);
}
Variant i_imagecopyresampled(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 10)) return throw_wrong_arguments("imagecopyresampled", count, 10, 10, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg9((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagecopyresampled(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
  }
}
Variant ifa_proc_nice(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("proc_nice", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_proc_nice(arg0));
}
Variant i_proc_nice(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_proc_nice);
}
Variant ifa_magicksetimagecolorspace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagecolorspace", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagecolorspace(arg0, arg1));
}
Variant i_magicksetimagecolorspace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagecolorspace);
}
Variant ifa_bcscale(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("bcscale", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_bcscale(arg0));
}
Variant i_bcscale(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcscale);
}
Variant ifa_magickgetcopyright(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("magickgetcopyright", 0, 1);
  return (x_magickgetcopyright());
}
Variant i_magickgetcopyright(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetcopyright);
}
Variant ifa_stream_context_get_options(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stream_context_get_options", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stream_context_get_options(arg0));
}
Variant i_stream_context_get_options(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_context_get_options);
}
Variant ifa_getrandmax(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getrandmax", 0, 1);
  return (x_getrandmax());
}
Variant i_getrandmax(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getrandmax);
}
Variant ifa_highlight_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("highlight_file", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_highlight_file(arg0));
  CVarRef arg1(a1);
  return (x_highlight_file(arg0, arg1));
}
Variant i_highlight_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_highlight_file);
}
Variant ifa_mysql_fetch_object(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("mysql_fetch_object", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_fetch_object(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_fetch_object(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mysql_fetch_object(arg0, arg1, arg2));
}
Variant i_mysql_fetch_object(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_fetch_object);
}
Variant ifa_urldecode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("urldecode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_urldecode(arg0));
}
Variant i_urldecode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_urldecode);
}
Variant ifa_array_keys(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("array_keys", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_array_keys(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_array_keys(arg0, arg1));
  CVarRef arg2(a2);
  return (x_array_keys(arg0, arg1, arg2));
}
Variant i_array_keys(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_keys);
}
Variant ifa_hphp_splfileobject_seek(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileobject_seek", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileobject_seek(arg0, arg1), null);
}
Variant i_hphp_splfileobject_seek(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_seek);
}
Variant ifa_imagecolorsforindex(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagecolorsforindex", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagecolorsforindex(arg0, arg1));
}
Variant i_imagecolorsforindex(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorsforindex);
}
Variant ifa_ldap_rename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("ldap_rename", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_ldap_rename(arg0, arg1, arg2, arg3, arg4));
}
Variant i_ldap_rename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_rename);
}
Variant ifa_hphp_directoryiterator_next(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_directoryiterator_next", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_directoryiterator_next(arg0), null);
}
Variant i_hphp_directoryiterator_next(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator_next);
}
Variant ifa_magickgetimagecolormapcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickgetimagecolormapcolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickgetimagecolormapcolor(arg0, arg1));
}
Variant i_magickgetimagecolormapcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagecolormapcolor);
}
Variant ifa_date_sun_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("date_sun_info", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_date_sun_info(arg0, arg1, arg2));
}
Variant i_date_sun_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_sun_info);
}
Variant ifa_stream_select(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("stream_select", count, 4, 5, 1);
  VRefParam arg0(vref(a0));
  VRefParam arg1(vref(a1));
  VRefParam arg2(vref(a2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_stream_select(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_stream_select(arg0, arg1, arg2, arg3, arg4));
}
Variant i_stream_select(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_select);
}
Variant ifa_xml_set_end_namespace_decl_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_end_namespace_decl_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_set_end_namespace_decl_handler(arg0, arg1));
}
Variant i_xml_set_end_namespace_decl_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_end_namespace_decl_handler);
}
Variant ifa_gethostbynamel(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gethostbynamel", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gethostbynamel(arg0));
}
Variant i_gethostbynamel(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gethostbynamel);
}
Variant ifa_curl_version(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("curl_version", 1, 1);
  if (count <= 0) return (x_curl_version());
  CVarRef arg0(a0);
  return (x_curl_version(arg0));
}
Variant i_curl_version(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_version);
}
Variant ifa_ispixeliterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ispixeliterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ispixeliterator(arg0));
}
Variant i_ispixeliterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ispixeliterator);
}
Variant ifa_dom_element_get_elements_by_tag_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_element_get_elements_by_tag_name", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_element_get_elements_by_tag_name(arg0, arg1));
}
Variant i_dom_element_get_elements_by_tag_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_get_elements_by_tag_name);
}
Variant ifa_bzerrstr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("bzerrstr", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_bzerrstr(arg0));
}
Variant i_bzerrstr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzerrstr);
}
Variant ifa_mysql_field_flags(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_field_flags", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_field_flags(arg0));
  CVarRef arg1(a1);
  return (x_mysql_field_flags(arg0, arg1));
}
Variant i_mysql_field_flags(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_field_flags);
}
Variant ifa_hphp_splfileinfo_isreadable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_isreadable", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_isreadable(arg0));
}
Variant i_hphp_splfileinfo_isreadable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_isreadable);
}
Variant ifa_proc_open(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("proc_open", count, 3, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_proc_open(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_proc_open(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_proc_open(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_proc_open(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_proc_open(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_proc_open);
}
Variant ifa_imagettfbbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagettfbbox", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagettfbbox(arg0, arg1, arg2, arg3));
}
Variant i_imagettfbbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagettfbbox);
}
Variant ifa_xmlwriter_open_memory(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xmlwriter_open_memory", 0, 1);
  return (x_xmlwriter_open_memory());
}
Variant i_xmlwriter_open_memory(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_open_memory);
}
Variant ifa_mailparse_determine_best_xfer_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mailparse_determine_best_xfer_encoding", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mailparse_determine_best_xfer_encoding(arg0));
}
Variant i_mailparse_determine_best_xfer_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_determine_best_xfer_encoding);
}
Variant ifa_drawgetvectorgraphics(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetvectorgraphics", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetvectorgraphics(arg0));
}
Variant i_drawgetvectorgraphics(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetvectorgraphics);
}
Variant ifa_getdate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("getdate", 1, 1);
  if (count <= 0) return (x_getdate());
  CVarRef arg0(a0);
  return (x_getdate(arg0));
}
Variant i_getdate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getdate);
}
Variant ifa_imagecreatefromgd2(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefromgd2", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefromgd2(arg0));
}
Variant i_imagecreatefromgd2(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromgd2);
}
Variant ifa_collator_get_locale(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("collator_get_locale", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_collator_get_locale(arg0));
  CVarRef arg1(a1);
  return (x_collator_get_locale(arg0, arg1));
}
Variant i_collator_get_locale(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_get_locale);
}
Variant ifa_pcntl_wexitstatus(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pcntl_wexitstatus", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pcntl_wexitstatus(arg0));
}
Variant i_pcntl_wexitstatus(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_wexitstatus);
}
Variant ifa_apd_set_session_trace_socket(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("apd_set_session_trace_socket", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_apd_set_session_trace_socket(arg0, arg1, arg2, arg3));
}
Variant i_apd_set_session_trace_socket(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apd_set_session_trace_socket);
}
Variant ifa_filectime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("filectime", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_filectime(arg0));
}
Variant i_filectime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_filectime);
}
Variant ifa_getopt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("getopt", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_getopt(arg0));
  CVarRef arg1(a1);
  return (x_getopt(arg0, arg1));
}
Variant i_getopt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getopt);
}
Variant ifa_mcrypt_get_key_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mcrypt_get_key_size", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mcrypt_get_key_size(arg0, arg1));
}
Variant i_mcrypt_get_key_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_get_key_size);
}
Variant ifa_gethostbyname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gethostbyname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gethostbyname(arg0));
}
Variant i_gethostbyname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gethostbyname);
}
Variant ifa_apc_bin_load(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("apc_bin_load", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_bin_load(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_bin_load(arg0, arg1));
  CVarRef arg2(a2);
  return (x_apc_bin_load(arg0, arg1, arg2));
}
Variant i_apc_bin_load(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_bin_load);
}
Variant ifa_stream_context_get_default(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("stream_context_get_default", 1, 1);
  if (count <= 0) return (x_stream_context_get_default());
  CVarRef arg0(a0);
  return (x_stream_context_get_default(arg0));
}
Variant i_stream_context_get_default(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_context_get_default);
}
Variant ifa_qlzuncompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("qlzuncompress", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_qlzuncompress(arg0));
  CVarRef arg1(a1);
  return (x_qlzuncompress(arg0, arg1));
}
Variant i_qlzuncompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_qlzuncompress);
}
Variant ifa_snuncompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("snuncompress", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_snuncompress(arg0));
}
Variant i_snuncompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_snuncompress);
}
Variant ifa_umask(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("umask", 1, 1);
  if (count <= 0) return (x_umask());
  CVarRef arg0(a0);
  return (x_umask(arg0));
}
Variant i_umask(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_umask);
}
Variant ifa_array_udiff_uassoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4)) return throw_missing_arguments("array_udiff_uassoc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  Array p;
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_udiff_uassoc(count, arg0, arg1, arg2, arg3, p));
}
Variant i_array_udiff_uassoc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 4)) return throw_missing_arguments("array_udiff_uassoc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 4 ? params.slice(4, count - 4, false) : Array());
    return (x_array_udiff_uassoc(count, arg0, arg1, arg2, arg3, p));
  }
}
Variant ifa_iconv_set_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("iconv_set_encoding", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_iconv_set_encoding(arg0, arg1));
}
Variant i_iconv_set_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_set_encoding);
}
Variant ifa_imagepsfreefont(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagepsfreefont", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagepsfreefont(arg0));
}
Variant i_imagepsfreefont(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepsfreefont);
}
Variant ifa_magicksetimagedispose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagedispose", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagedispose(arg0, arg1));
}
Variant i_magicksetimagedispose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagedispose);
}
Variant ifa_drawsetstrokewidth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokewidth", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokewidth(arg0, arg1), null);
}
Variant i_drawsetstrokewidth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokewidth);
}
Variant ifa_posix_geteuid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_geteuid", 0, 1);
  return (x_posix_geteuid());
}
Variant i_posix_geteuid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_geteuid);
}
Variant ifa_curl_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("curl_error", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_curl_error(arg0));
}
Variant i_curl_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_error);
}
Variant ifa_curl_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("curl_close", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_curl_close(arg0));
}
Variant i_curl_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_close);
}
Variant ifa_openssl_public_decrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openssl_public_decrypt", count, 3, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_public_decrypt(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_public_decrypt(arg0, arg1, arg2, arg3));
}
Variant i_openssl_public_decrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_public_decrypt);
}
Variant ifa_drawsetvectorgraphics(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetvectorgraphics", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetvectorgraphics(arg0, arg1));
}
Variant i_drawsetvectorgraphics(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetvectorgraphics);
}
Variant ifa_xml_get_current_line_number(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xml_get_current_line_number", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xml_get_current_line_number(arg0));
}
Variant i_xml_get_current_line_number(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_get_current_line_number);
}
Variant ifa_curl_errno(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("curl_errno", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_curl_errno(arg0));
}
Variant i_curl_errno(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_errno);
}
Variant ifa_drawcomment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawcomment", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawcomment(arg0, arg1), null);
}
Variant i_drawcomment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawcomment);
}
Variant ifa_basename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("basename", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_basename(arg0));
  CVarRef arg1(a1);
  return (x_basename(arg0, arg1));
}
Variant i_basename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_basename);
}
Variant ifa_magickmotionblurimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("magickmotionblurimage", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_magickmotionblurimage(arg0, arg1, arg2, arg3));
}
Variant i_magickmotionblurimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmotionblurimage);
}
Variant ifa_magickspreadimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickspreadimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickspreadimage(arg0, arg1));
}
Variant i_magickspreadimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickspreadimage);
}
Variant ifa_pixelsetquantumcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("pixelsetquantumcolor", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_pixelsetquantumcolor(arg0, arg1, arg2, arg3), null);
  CVarRef arg4(a4);
  return (x_pixelsetquantumcolor(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_pixelsetquantumcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetquantumcolor);
}
Variant ifa_fsockopen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("fsockopen", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_fsockopen(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_fsockopen(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_fsockopen(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  if (count <= 4) return (x_fsockopen(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_fsockopen(arg0, arg1, arg2, arg3, arg4));
}
Variant i_fsockopen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fsockopen);
}
Variant ifa_xmlwriter_end_dtd_attlist(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_dtd_attlist", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_dtd_attlist(arg0));
}
Variant i_xmlwriter_end_dtd_attlist(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_dtd_attlist);
}
Variant ifa_msg_get_queue(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("msg_get_queue", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_msg_get_queue(arg0));
  CVarRef arg1(a1);
  return (x_msg_get_queue(arg0, arg1));
}
Variant i_msg_get_queue(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_msg_get_queue);
}
Variant ifa_utf8_encode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("utf8_encode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_utf8_encode(arg0));
}
Variant i_utf8_encode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_utf8_encode);
}
Variant ifa_destroypixeliterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("destroypixeliterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_destroypixeliterator(arg0), null);
}
Variant i_destroypixeliterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_destroypixeliterator);
}
Variant ifa_drawbezier(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawbezier", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawbezier(arg0, arg1), null);
}
Variant i_drawbezier(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawbezier);
}
Variant ifa_substr_compare(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("substr_compare", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_substr_compare(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_substr_compare(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_substr_compare(arg0, arg1, arg2, arg3, arg4));
}
Variant i_substr_compare(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_substr_compare);
}
Variant ifa_hphp_splfileinfo_getmtime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getmtime", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getmtime(arg0));
}
Variant i_hphp_splfileinfo_getmtime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getmtime);
}
Variant ifa_parse_hdf_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("parse_hdf_string", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_parse_hdf_string(arg0));
}
Variant i_parse_hdf_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_parse_hdf_string);
}
Variant ifa_mb_strwidth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mb_strwidth", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_strwidth(arg0));
  CVarRef arg1(a1);
  return (x_mb_strwidth(arg0, arg1));
}
Variant i_mb_strwidth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strwidth);
}
Variant ifa_apc_add(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("apc_add", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_add(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_apc_add(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_apc_add(arg0, arg1, arg2, arg3));
}
Variant i_apc_add(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_add);
}
Variant ifa_drawgetfillcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfillcolor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfillcolor(arg0));
}
Variant i_drawgetfillcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfillcolor);
}
Variant ifa_magickreadimagefile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickreadimagefile", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickreadimagefile(arg0, arg1));
}
Variant i_magickreadimagefile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickreadimagefile);
}
Variant ifa_dom_node_has_child_nodes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_node_has_child_nodes", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_node_has_child_nodes(arg0));
}
Variant i_dom_node_has_child_nodes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_has_child_nodes);
}
Variant ifa_phpversion(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("phpversion", 1, 1);
  if (count <= 0) return (x_phpversion());
  CVarRef arg0(a0);
  return (x_phpversion(arg0));
}
Variant i_phpversion(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_phpversion);
}
Variant ifa_socket_accept(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("socket_accept", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_socket_accept(arg0));
}
Variant i_socket_accept(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_accept);
}
Variant ifa_ftruncate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ftruncate", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ftruncate(arg0, arg1));
}
Variant i_ftruncate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ftruncate);
}
Variant ifa_socket_getsockname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("socket_getsockname", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_socket_getsockname(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_socket_getsockname(arg0, arg1, arg2));
}
Variant i_socket_getsockname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_getsockname);
}
Variant ifa_set_exception_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("set_exception_handler", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_set_exception_handler(arg0));
}
Variant i_set_exception_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_set_exception_handler);
}
Variant ifa_mysql_fetch_result(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_fetch_result", 1, 1);
  if (count <= 0) return (x_mysql_fetch_result());
  CVarRef arg0(a0);
  return (x_mysql_fetch_result(arg0));
}
Variant i_mysql_fetch_result(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_fetch_result);
}
Variant ifa_hphp_recursiveiteratoriterator_getinneriterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursiveiteratoriterator_getinneriterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursiveiteratoriterator_getinneriterator(arg0));
}
Variant i_hphp_recursiveiteratoriterator_getinneriterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursiveiteratoriterator_getinneriterator);
}
Variant ifa_msg_remove_queue(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("msg_remove_queue", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_msg_remove_queue(arg0));
}
Variant i_msg_remove_queue(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_msg_remove_queue);
}
Variant ifa_dom_document_create_comment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_create_comment", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_create_comment(arg0, arg1));
}
Variant i_dom_document_create_comment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_comment);
}
Variant ifa_parse_hdf_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("parse_hdf_file", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_parse_hdf_file(arg0));
}
Variant i_parse_hdf_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_parse_hdf_file);
}
Variant ifa_file_put_contents(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("file_put_contents", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_file_put_contents(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_file_put_contents(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_file_put_contents(arg0, arg1, arg2, arg3));
}
Variant i_file_put_contents(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_file_put_contents);
}
Variant ifa_mcrypt_encrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("mcrypt_encrypt", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_mcrypt_encrypt(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mcrypt_encrypt(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mcrypt_encrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_encrypt);
}
Variant ifa_hphp_debug_caller_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_debug_caller_info", 0, 1);
  return (x_hphp_debug_caller_info());
}
Variant i_hphp_debug_caller_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_debug_caller_info);
}
Variant ifa_getservbyport(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getservbyport", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_getservbyport(arg0, arg1));
}
Variant i_getservbyport(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getservbyport);
}
Variant ifa_ctype_graph(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_graph", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_graph(arg0));
}
Variant i_ctype_graph(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_graph);
}
Variant ifa_magicksetimageprofile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetimageprofile", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetimageprofile(arg0, arg1, arg2));
}
Variant i_magicksetimageprofile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageprofile);
}
Variant ifa_mcrypt_module_get_algo_block_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_module_get_algo_block_size", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_module_get_algo_block_size(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_module_get_algo_block_size(arg0, arg1));
}
Variant i_mcrypt_module_get_algo_block_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_get_algo_block_size);
}
Variant ifa_passthru(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("passthru", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_passthru(arg0), null);
  VRefParam arg1(vref(a1));
  return (x_passthru(arg0, arg1), null);
}
Variant i_passthru(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_passthru);
}
Variant ifa_drawpathellipticarcrelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawpathellipticarcrelative", count, 8, 8, 1);
}
Variant i_drawpathellipticarcrelative(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 8)) return throw_wrong_arguments("drawpathellipticarcrelative", count, 8, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawpathellipticarcrelative(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7), null);
  }
}
Variant ifa_get_defined_functions(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_defined_functions", 0, 1);
  return (x_get_defined_functions());
}
Variant i_get_defined_functions(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_defined_functions);
}
Variant ifa_rename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("rename", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_rename(arg0, arg1));
  CVarRef arg2(a2);
  return (x_rename(arg0, arg1, arg2));
}
Variant i_rename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rename);
}
Variant ifa_wandgetexceptiontype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("wandgetexceptiontype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_wandgetexceptiontype(arg0));
}
Variant i_wandgetexceptiontype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_wandgetexceptiontype);
}
Variant ifa_dom_node_has_attributes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_node_has_attributes", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_node_has_attributes(arg0));
}
Variant i_dom_node_has_attributes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_has_attributes);
}
Variant ifa_imagestring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imagestring", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imagestring(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagestring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagestring);
}
Variant ifa_mb_detect_order(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_detect_order", 1, 1);
  if (count <= 0) return (x_mb_detect_order());
  CVarRef arg0(a0);
  return (x_mb_detect_order(arg0));
}
Variant i_mb_detect_order(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_detect_order);
}
Variant ifa_imagecreatefromgd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefromgd", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefromgd(arg0));
}
Variant i_imagecreatefromgd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromgd);
}
Variant ifa_apc_cas(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("apc_cas", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_apc_cas(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_apc_cas(arg0, arg1, arg2, arg3));
}
Variant i_apc_cas(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_cas);
}
Variant ifa_image_type_to_mime_type(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("image_type_to_mime_type", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_image_type_to_mime_type(arg0));
}
Variant i_image_type_to_mime_type(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_image_type_to_mime_type);
}
Variant ifa_mb_strrchr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_strrchr", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_strrchr(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_strrchr(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_strrchr(arg0, arg1, arg2, arg3));
}
Variant i_mb_strrchr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strrchr);
}
Variant ifa_is_real(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_real", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_real(arg0));
}
Variant i_is_real(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_real);
}
Variant ifa_strncasecmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("strncasecmp", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_strncasecmp(arg0, arg1, arg2));
}
Variant i_strncasecmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strncasecmp);
}
Variant ifa_magicksetimagescene(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagescene", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagescene(arg0, arg1));
}
Variant i_magicksetimagescene(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagescene);
}
Variant ifa_openssl_pkey_export(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("openssl_pkey_export", count, 2, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_openssl_pkey_export(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_pkey_export(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_pkey_export(arg0, arg1, arg2, arg3));
}
Variant i_openssl_pkey_export(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkey_export);
}
Variant ifa_xmlwriter_start_element(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_start_element", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_start_element(arg0, arg1));
}
Variant i_xmlwriter_start_element(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_element);
}
Variant ifa_fgetcsv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("fgetcsv", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_fgetcsv(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_fgetcsv(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_fgetcsv(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_fgetcsv(arg0, arg1, arg2, arg3));
}
Variant i_fgetcsv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fgetcsv);
}
Variant ifa_is_scalar(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_scalar", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_scalar(arg0));
}
Variant i_is_scalar(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_scalar);
}
Variant ifa_getmxrr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("getmxrr", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_getmxrr(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_getmxrr(arg0, arg1, arg2));
}
Variant i_getmxrr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getmxrr);
}
Variant ifa_getimagesize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("getimagesize", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_getimagesize(arg0));
  VRefParam arg1(vref(a1));
  return (x_getimagesize(arg0, arg1));
}
Variant i_getimagesize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getimagesize);
}
Variant ifa_icu_transliterate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("icu_transliterate", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_icu_transliterate(arg0, arg1));
}
Variant i_icu_transliterate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_icu_transliterate);
}
Variant ifa_iconv_mime_decode_headers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("iconv_mime_decode_headers", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_iconv_mime_decode_headers(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_iconv_mime_decode_headers(arg0, arg1));
  CVarRef arg2(a2);
  return (x_iconv_mime_decode_headers(arg0, arg1, arg2));
}
Variant i_iconv_mime_decode_headers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_mime_decode_headers);
}
Variant ifa_apd_continue(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apd_continue", 0, 1);
  return (x_apd_continue());
}
Variant i_apd_continue(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apd_continue);
}
Variant ifa_restore_exception_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("restore_exception_handler", 0, 1);
  return (x_restore_exception_handler());
}
Variant i_restore_exception_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_restore_exception_handler);
}
Variant ifa_openssl_pkcs7_encrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4)) return throw_wrong_arguments("openssl_pkcs7_encrypt", count, 4, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_openssl_pkcs7_encrypt(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_openssl_pkcs7_encrypt(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_openssl_pkcs7_encrypt(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_openssl_pkcs7_encrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkcs7_encrypt);
}
Variant ifa_header_register_callback(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("header_register_callback", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_header_register_callback(arg0));
}
Variant i_header_register_callback(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_header_register_callback);
}
Variant ifa_md5(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("md5", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_md5(arg0));
  CVarRef arg1(a1);
  return (x_md5(arg0, arg1));
}
Variant i_md5(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_md5);
}
Variant ifa_xmlwriter_end_dtd_element(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_dtd_element", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_dtd_element(arg0));
}
Variant i_xmlwriter_end_dtd_element(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_dtd_element);
}
Variant ifa_gethostname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("gethostname", 0, 1);
  return (x_gethostname());
}
Variant i_gethostname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gethostname);
}
Variant ifa_fb_unserialize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("fb_unserialize", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_fb_unserialize(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_fb_unserialize(arg0, arg1, arg2));
}
Variant i_fb_unserialize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_unserialize);
}
Variant ifa_ftok(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ftok", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ftok(arg0, arg1));
}
Variant i_ftok(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ftok);
}
Variant ifa_hphp_get_class_constant(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_get_class_constant", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_get_class_constant(arg0, arg1));
}
Variant i_hphp_get_class_constant(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_class_constant);
}
Variant ifa_str_shuffle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("str_shuffle", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_str_shuffle(arg0));
}
Variant i_str_shuffle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_str_shuffle);
}
Variant ifa_pcntl_wifexited(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pcntl_wifexited", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pcntl_wifexited(arg0));
}
Variant i_pcntl_wifexited(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_wifexited);
}
Variant ifa_asinh(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("asinh", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_asinh(arg0));
}
Variant i_asinh(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_asinh);
}
Variant ifa_dom_characterdata_delete_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_characterdata_delete_data", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_characterdata_delete_data(arg0, arg1, arg2));
}
Variant i_dom_characterdata_delete_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_characterdata_delete_data);
}
Variant ifa_array_intersect_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_intersect_key", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_intersect_key(count, arg0, arg1, p));
}
Variant i_array_intersect_key(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_intersect_key", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_intersect_key(count, arg0, arg1, p));
  }
}
Variant ifa_stream_bucket_prepend(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_bucket_prepend", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_bucket_prepend(arg0, arg1), null);
}
Variant i_stream_bucket_prepend(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_bucket_prepend);
}
Variant ifa_i18n_loc_set_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("i18n_loc_set_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_i18n_loc_set_attribute(arg0, arg1));
}
Variant i_i18n_loc_set_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_i18n_loc_set_attribute);
}
Variant ifa_socket_strerror(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("socket_strerror", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_socket_strerror(arg0));
}
Variant i_socket_strerror(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_strerror);
}
Variant ifa_drawsetviewbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("drawsetviewbox", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_drawsetviewbox(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_drawsetviewbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetviewbox);
}
Variant ifa_get_magic_quotes_runtime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_magic_quotes_runtime", 0, 1);
  return (x_get_magic_quotes_runtime());
}
Variant i_get_magic_quotes_runtime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_magic_quotes_runtime);
}
Variant ifa_pixelgetexceptiontype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetexceptiontype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetexceptiontype(arg0));
}
Variant i_pixelgetexceptiontype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetexceptiontype);
}
Variant ifa_drawsetstrokedasharray(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("drawsetstrokedasharray", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_drawsetstrokedasharray(arg0), null);
  CVarRef arg1(a1);
  return (x_drawsetstrokedasharray(arg0, arg1), null);
}
Variant i_drawsetstrokedasharray(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokedasharray);
}
Variant ifa_libxml_get_errors(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("libxml_get_errors", 0, 1);
  return (x_libxml_get_errors());
}
Variant i_libxml_get_errors(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_libxml_get_errors);
}
Variant ifa_magickgetimagewidth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagewidth", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagewidth(arg0));
}
Variant i_magickgetimagewidth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagewidth);
}
Variant ifa_time(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("time", 0, 1);
  return (x_time());
}
Variant i_time(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_time);
}
Variant ifa_apc_compile_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("apc_compile_file", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_compile_file(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_compile_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_apc_compile_file(arg0, arg1, arg2));
}
Variant i_apc_compile_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_compile_file);
}
Variant ifa_hphp_splfileinfo___construct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileinfo___construct", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileinfo___construct(arg0, arg1));
}
Variant i_hphp_splfileinfo___construct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo___construct);
}
Variant ifa_apc_define_constants(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("apc_define_constants", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_define_constants(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_apc_define_constants(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_apc_define_constants(arg0, arg1, arg2, arg3));
}
Variant i_apc_define_constants(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_define_constants);
}
Variant ifa_hphp_service_thread_started(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_service_thread_started", 0, 1);
  return (x_hphp_service_thread_started(), null);
}
Variant i_hphp_service_thread_started(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_service_thread_started);
}
Variant ifa_trigger_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("trigger_error", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_trigger_error(arg0));
  CVarRef arg1(a1);
  return (x_trigger_error(arg0, arg1));
}
Variant i_trigger_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_trigger_error);
}
Variant ifa_mb_convert_variables(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("mb_convert_variables", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_mb_convert_variables(count, arg0, arg1, arg2, p));
}
Variant i_mb_convert_variables(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("mb_convert_variables", count+1, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    VRefParam arg2(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_mb_convert_variables(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_nzuncompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("nzuncompress", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_nzuncompress(arg0));
}
Variant i_nzuncompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_nzuncompress);
}
Variant ifa_mb_internal_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_internal_encoding", 1, 1);
  if (count <= 0) return (x_mb_internal_encoding());
  CVarRef arg0(a0);
  return (x_mb_internal_encoding(arg0));
}
Variant i_mb_internal_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_internal_encoding);
}
Variant ifa_magicksetfilename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("magicksetfilename", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_magicksetfilename(arg0));
  CVarRef arg1(a1);
  return (x_magicksetfilename(arg0, arg1));
}
Variant i_magicksetfilename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetfilename);
}
Variant ifa_xhprof_disable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xhprof_disable", 0, 1);
  return (x_xhprof_disable());
}
Variant i_xhprof_disable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_disable);
}
Variant ifa_drawgetfontfamily(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfontfamily", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfontfamily(arg0));
}
Variant i_drawgetfontfamily(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfontfamily);
}
Variant ifa_register_cleanup_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("register_cleanup_function", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_register_cleanup_function(count, arg0, p), null);
}
Variant i_register_cleanup_function(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("register_cleanup_function", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_register_cleanup_function(count, arg0, p), null);
  }
}
Variant ifa_ftell(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ftell", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ftell(arg0));
}
Variant i_ftell(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ftell);
}
Variant ifa_pcntl_wifstopped(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pcntl_wifstopped", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pcntl_wifstopped(arg0));
}
Variant i_pcntl_wifstopped(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_wifstopped);
}
Variant ifa_memcache_add(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("memcache_add", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_add(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_memcache_add(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_memcache_add(arg0, arg1, arg2, arg3, arg4));
}
Variant i_memcache_add(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_add);
}
Variant ifa_magickgetimagebackgroundcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagebackgroundcolor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagebackgroundcolor(arg0));
}
Variant i_magickgetimagebackgroundcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagebackgroundcolor);
}
Variant ifa_openssl_csr_get_subject(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("openssl_csr_get_subject", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_openssl_csr_get_subject(arg0));
  CVarRef arg1(a1);
  return (x_openssl_csr_get_subject(arg0, arg1));
}
Variant i_openssl_csr_get_subject(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_csr_get_subject);
}
Variant ifa_posix_isatty(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_isatty", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_isatty(arg0));
}
Variant i_posix_isatty(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_isatty);
}
Variant ifa_dom_document_schema_validate_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_schema_validate_file", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_schema_validate_file(arg0, arg1));
}
Variant i_dom_document_schema_validate_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_schema_validate_file);
}
Variant ifa_drawrectangle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("drawrectangle", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_drawrectangle(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_drawrectangle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawrectangle);
}
Variant ifa_is_array(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_array", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_array(arg0));
}
Variant i_is_array(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_array);
}
Variant ifa_stream_copy_to_stream(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("stream_copy_to_stream", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_copy_to_stream(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_stream_copy_to_stream(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_stream_copy_to_stream(arg0, arg1, arg2, arg3));
}
Variant i_stream_copy_to_stream(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_copy_to_stream);
}
Variant ifa_openssl_pkcs7_decrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openssl_pkcs7_decrypt", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_pkcs7_decrypt(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_pkcs7_decrypt(arg0, arg1, arg2, arg3));
}
Variant i_openssl_pkcs7_decrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkcs7_decrypt);
}
Variant ifa_round(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("round", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_round(arg0));
  CVarRef arg1(a1);
  return (x_round(arg0, arg1));
}
Variant i_round(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_round);
}
Variant ifa_bcdiv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bcdiv", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_bcdiv(arg0, arg1));
  CVarRef arg2(a2);
  return (x_bcdiv(arg0, arg1, arg2));
}
Variant i_bcdiv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcdiv);
}
Variant ifa_hphp_get_iostatus(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_get_iostatus", 0, 1);
  return (x_hphp_get_iostatus());
}
Variant i_hphp_get_iostatus(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_iostatus);
}
Variant ifa_openssl_x509_check_private_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("openssl_x509_check_private_key", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_openssl_x509_check_private_key(arg0, arg1));
}
Variant i_openssl_x509_check_private_key(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_x509_check_private_key);
}
Variant ifa_imagegd2(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("imagegd2", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagegd2(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_imagegd2(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_imagegd2(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imagegd2(arg0, arg1, arg2, arg3));
}
Variant i_imagegd2(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagegd2);
}
Variant ifa_substr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("substr", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_substr(arg0, arg1));
  CVarRef arg2(a2);
  return (x_substr(arg0, arg1, arg2));
}
Variant i_substr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_substr);
}
Variant ifa_base64_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("base64_decode", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_base64_decode(arg0));
  CVarRef arg1(a1);
  return (x_base64_decode(arg0, arg1));
}
Variant i_base64_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_base64_decode);
}
Variant ifa_magickpreviewimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickpreviewimages", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickpreviewimages(arg0, arg1));
}
Variant i_magickpreviewimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickpreviewimages);
}
Variant ifa_date_isodate_set(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("date_isodate_set", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_date_isodate_set(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  return (x_date_isodate_set(arg0, arg1, arg2, arg3), null);
}
Variant i_date_isodate_set(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_isodate_set);
}
Variant ifa_mcrypt_generic(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mcrypt_generic", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mcrypt_generic(arg0, arg1));
}
Variant i_mcrypt_generic(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_generic);
}
Variant ifa_linkinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("linkinfo", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_linkinfo(arg0));
}
Variant i_linkinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_linkinfo);
}
Variant ifa_mysql_set_charset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_set_charset", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_set_charset(arg0));
  CVarRef arg1(a1);
  return (x_mysql_set_charset(arg0, arg1));
}
Variant i_mysql_set_charset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_set_charset);
}
Variant ifa_drawsetstrokepatternurl(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokepatternurl", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokepatternurl(arg0, arg1));
}
Variant i_drawsetstrokepatternurl(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokepatternurl);
}
Variant ifa_mysql_fetch_array(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_fetch_array", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_fetch_array(arg0));
  CVarRef arg1(a1);
  return (x_mysql_fetch_array(arg0, arg1));
}
Variant i_mysql_fetch_array(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_fetch_array);
}
Variant ifa_fputs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("fputs", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_fputs(arg0, arg1));
  CVarRef arg2(a2);
  return (x_fputs(arg0, arg1, arg2));
}
Variant i_fputs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fputs);
}
Variant ifa_imap_fetchbody(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("imap_fetchbody", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_fetchbody(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imap_fetchbody(arg0, arg1, arg2, arg3));
}
Variant i_imap_fetchbody(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_fetchbody);
}
Variant ifa_drawskewx(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawskewx", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawskewx(arg0, arg1), null);
}
Variant i_drawskewx(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawskewx);
}
Variant ifa_date_format(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("date_format", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_date_format(arg0, arg1));
}
Variant i_date_format(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_format);
}
Variant ifa_call_user_func_rpc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 5)) return throw_missing_arguments("call_user_func_rpc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  Array p;
  if (count >= 6) p.append(ref(a5));
  return (x_call_user_func_rpc(count, arg0, arg1, arg2, arg3, arg4, p));
}
Variant i_call_user_func_rpc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 5)) return throw_missing_arguments("call_user_func_rpc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 5 ? params.slice(5, count - 5, false) : Array());
    return (x_call_user_func_rpc(count, arg0, arg1, arg2, arg3, arg4, p));
  }
}
Variant ifa_dom_document_save(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("dom_document_save", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_dom_document_save(arg0, arg1));
  CVarRef arg2(a2);
  return (x_dom_document_save(arg0, arg1, arg2));
}
Variant i_dom_document_save(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_save);
}
Variant ifa_mcrypt_generic_deinit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_generic_deinit", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_generic_deinit(arg0));
}
Variant i_mcrypt_generic_deinit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_generic_deinit);
}
Variant ifa_socket_last_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("socket_last_error", 1, 1);
  if (count <= 0) return (x_socket_last_error());
  CVarRef arg0(a0);
  return (x_socket_last_error(arg0));
}
Variant i_socket_last_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_last_error);
}
Variant ifa_dom_node_lookup_namespace_uri(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_node_lookup_namespace_uri", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_node_lookup_namespace_uri(arg0, arg1));
}
Variant i_dom_node_lookup_namespace_uri(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_lookup_namespace_uri);
}
Variant ifa_pixelgetred(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetred", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetred(arg0));
}
Variant i_pixelgetred(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetred);
}
Variant ifa_evhttp_set_cache(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("evhttp_set_cache", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_evhttp_set_cache(arg0, arg1), null);
  CVarRef arg2(a2);
  return (x_evhttp_set_cache(arg0, arg1, arg2), null);
}
Variant i_evhttp_set_cache(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_evhttp_set_cache);
}
Variant ifa_mb_strimwidth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("mb_strimwidth", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_strimwidth(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mb_strimwidth(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mb_strimwidth(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mb_strimwidth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strimwidth);
}
Variant ifa_posix_access(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("posix_access", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_posix_access(arg0));
  CVarRef arg1(a1);
  return (x_posix_access(arg0, arg1));
}
Variant i_posix_access(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_access);
}
Variant ifa_imagepalettecopy(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagepalettecopy", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagepalettecopy(arg0, arg1), null);
}
Variant i_imagepalettecopy(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepalettecopy);
}
Variant ifa_drawsetstrokecolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokecolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokecolor(arg0, arg1), null);
}
Variant i_drawsetstrokecolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokecolor);
}
Variant ifa_gmstrftime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gmstrftime", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gmstrftime(arg0));
  CVarRef arg1(a1);
  return (x_gmstrftime(arg0, arg1));
}
Variant i_gmstrftime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gmstrftime);
}
Variant ifa_imap_savebody(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("imap_savebody", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_savebody(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_imap_savebody(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_imap_savebody(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imap_savebody(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_savebody);
}
Variant ifa_popen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("popen", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_popen(arg0, arg1));
}
Variant i_popen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_popen);
}
Variant ifa_strcmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strcmp", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strcmp(arg0, arg1));
}
Variant i_strcmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strcmp);
}
Variant ifa_magickgetimagecompressionquality(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagecompressionquality", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagecompressionquality(arg0));
}
Variant i_magickgetimagecompressionquality(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagecompressionquality);
}
Variant ifa_evhttp_async_post(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("evhttp_async_post", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_evhttp_async_post(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_evhttp_async_post(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_evhttp_async_post(arg0, arg1, arg2, arg3));
}
Variant i_evhttp_async_post(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_evhttp_async_post);
}
Variant ifa_mysql_pconnect_with_db(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count <= 0) return (x_mysql_pconnect_with_db());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_pconnect_with_db(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_pconnect_with_db(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mysql_pconnect_with_db(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mysql_pconnect_with_db(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_mysql_pconnect_with_db(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_mysql_pconnect_with_db(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_mysql_pconnect_with_db(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 7)) return throw_toomany_arguments("mysql_pconnect_with_db", 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (x_mysql_pconnect_with_db());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (x_mysql_pconnect_with_db(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (x_mysql_pconnect_with_db(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_mysql_pconnect_with_db(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_mysql_pconnect_with_db(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_mysql_pconnect_with_db(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_mysql_pconnect_with_db(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_mysql_pconnect_with_db(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_hphp_splfileinfo_getsize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getsize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getsize(arg0));
}
Variant i_hphp_splfileinfo_getsize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getsize);
}
Variant ifa_get_class_constants(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_class_constants", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_get_class_constants(arg0));
}
Variant i_get_class_constants(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_class_constants);
}
Variant ifa_drawpathfinish(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawpathfinish", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawpathfinish(arg0), null);
}
Variant i_drawpathfinish(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathfinish);
}
Variant ifa_imap_mail_compose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_mail_compose", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_mail_compose(arg0, arg1));
}
Variant i_imap_mail_compose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_mail_compose);
}
Variant ifa_imap_check(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_check", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_check(arg0));
}
Variant i_imap_check(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_check);
}
Variant ifa_magickmorphimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickmorphimages", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickmorphimages(arg0, arg1));
}
Variant i_magickmorphimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmorphimages);
}
Variant ifa_ob_list_handlers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_list_handlers", 0, 1);
  return (x_ob_list_handlers());
}
Variant i_ob_list_handlers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_list_handlers);
}
Variant ifa_get_include_path(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_include_path", 0, 1);
  return (x_get_include_path());
}
Variant i_get_include_path(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_include_path);
}
Variant ifa_hebrev(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("hebrev", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_hebrev(arg0));
  CVarRef arg1(a1);
  return (x_hebrev(arg0, arg1));
}
Variant i_hebrev(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hebrev);
}
Variant ifa_mailparse_msg_get_structure(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mailparse_msg_get_structure", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mailparse_msg_get_structure(arg0));
}
Variant i_mailparse_msg_get_structure(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_get_structure);
}
Variant ifa_time_nanosleep(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("time_nanosleep", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_time_nanosleep(arg0, arg1));
}
Variant i_time_nanosleep(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_time_nanosleep);
}
Variant ifa_magickgetnumberimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetnumberimages", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetnumberimages(arg0));
}
Variant i_magickgetnumberimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetnumberimages);
}
Variant ifa_pi(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("pi", 0, 1);
  return (x_pi());
}
Variant i_pi(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pi);
}
Variant ifa_openssl_pkey_new(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("openssl_pkey_new", 1, 1);
  if (count <= 0) return (x_openssl_pkey_new());
  CVarRef arg0(a0);
  return (x_openssl_pkey_new(arg0));
}
Variant i_openssl_pkey_new(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkey_new);
}
Variant ifa_get_declared_classes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_declared_classes", 0, 1);
  return (x_get_declared_classes());
}
Variant i_get_declared_classes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_declared_classes);
}
Variant ifa_get_headers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("get_headers", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_get_headers(arg0));
  CVarRef arg1(a1);
  return (x_get_headers(arg0, arg1));
}
Variant i_get_headers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_headers);
}
Variant ifa_drawpathcurvetoabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawpathcurvetoabsolute", count, 7, 7, 1);
}
Variant i_drawpathcurvetoabsolute(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 7)) return throw_wrong_arguments("drawpathcurvetoabsolute", count, 7, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawpathcurvetoabsolute(arg0, arg1, arg2, arg3, arg4, arg5, arg6), null);
  }
}
Variant ifa_imap_uid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_uid", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_uid(arg0, arg1));
}
Variant i_imap_uid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_uid);
}
Variant ifa_inet_ntop(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("inet_ntop", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_inet_ntop(arg0));
}
Variant i_inet_ntop(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_inet_ntop);
}
Variant ifa_mb_detect_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("mb_detect_encoding", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_detect_encoding(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_detect_encoding(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_detect_encoding(arg0, arg1, arg2));
}
Variant i_mb_detect_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_detect_encoding);
}
Variant ifa_xmlwriter_end_comment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_comment", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_comment(arg0));
}
Variant i_xmlwriter_end_comment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_comment);
}
Variant ifa_hphp_recursiveiteratoriterator_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursiveiteratoriterator_key", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursiveiteratoriterator_key(arg0));
}
Variant i_hphp_recursiveiteratoriterator_key(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursiveiteratoriterator_key);
}
Variant ifa_pixelgetblack(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetblack", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetblack(arg0));
}
Variant i_pixelgetblack(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetblack);
}
Variant ifa_ctype_lower(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_lower", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_lower(arg0));
}
Variant i_ctype_lower(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_lower);
}
Variant ifa_magickgetimageunits(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageunits", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageunits(arg0));
}
Variant i_magickgetimageunits(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageunits);
}
Variant ifa_strrev(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("strrev", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_strrev(arg0));
}
Variant i_strrev(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strrev);
}
Variant ifa_clearmagickwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("clearmagickwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_clearmagickwand(arg0), null);
}
Variant i_clearmagickwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clearmagickwand);
}
Variant ifa_xmlwriter_end_pi(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_pi", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_pi(arg0));
}
Variant i_xmlwriter_end_pi(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_pi);
}
Variant ifa_nl2br(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("nl2br", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_nl2br(arg0));
}
Variant i_nl2br(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_nl2br);
}
Variant ifa_pixelgetiteratorexceptiontype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetiteratorexceptiontype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetiteratorexceptiontype(arg0));
}
Variant i_pixelgetiteratorexceptiontype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetiteratorexceptiontype);
}
Variant ifa_get_defined_vars(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_defined_vars", 0, 1);
  return (x_get_defined_vars());
}
Variant i_get_defined_vars(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_defined_vars);
}
Variant ifa_imagecolorexact(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagecolorexact", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagecolorexact(arg0, arg1, arg2, arg3));
}
Variant i_imagecolorexact(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorexact);
}
Variant ifa_wandgetexceptionstring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("wandgetexceptionstring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_wandgetexceptionstring(arg0));
}
Variant i_wandgetexceptionstring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_wandgetexceptionstring);
}
Variant ifa_imagegd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imagegd", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagegd(arg0));
  CVarRef arg1(a1);
  return (x_imagegd(arg0, arg1));
}
Variant i_imagegd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagegd);
}
Variant ifa_magickposterizeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickposterizeimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickposterizeimage(arg0, arg1, arg2));
}
Variant i_magickposterizeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickposterizeimage);
}
Variant ifa_usleep(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("usleep", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_usleep(arg0), null);
}
Variant i_usleep(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_usleep);
}
Variant ifa_hphp_directoryiterator_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_directoryiterator_key", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_directoryiterator_key(arg0));
}
Variant i_hphp_directoryiterator_key(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator_key);
}
Variant ifa_current(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("current", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_current(arg0));
}
Variant i_current(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_current);
}
Variant ifa_stream_socket_sendto(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("stream_socket_sendto", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_socket_sendto(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_stream_socket_sendto(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_stream_socket_sendto(arg0, arg1, arg2, arg3));
}
Variant i_stream_socket_sendto(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_sendto);
}
Variant ifa_imap_body(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("imap_body", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_body(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imap_body(arg0, arg1, arg2));
}
Variant i_imap_body(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_body);
}
Variant ifa_iconv_get_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("iconv_get_encoding", 1, 1);
  if (count <= 0) return (x_iconv_get_encoding());
  CVarRef arg0(a0);
  return (x_iconv_get_encoding(arg0));
}
Variant i_iconv_get_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_get_encoding);
}
Variant ifa_drawgetstrokealpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokealpha", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokealpha(arg0));
}
Variant i_drawgetstrokealpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokealpha);
}
Variant ifa_count(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("count", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_count(arg0));
  CVarRef arg1(a1);
  return (x_count(arg0, arg1));
}
Variant i_count(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_count);
}
Variant ifa_bcmod(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("bcmod", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_bcmod(arg0, arg1));
}
Variant i_bcmod(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcmod);
}
Variant ifa_magickgetcharheight(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickgetcharheight", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickgetcharheight(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickgetcharheight(arg0, arg1, arg2, arg3));
}
Variant i_magickgetcharheight(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetcharheight);
}
Variant ifa_call_user_func_async(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("call_user_func_async", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(ref(a1));
  if (count >= 3) p.append(ref(a2));
  if (count >= 4) p.append(ref(a3));
  if (count >= 5) p.append(ref(a4));
  if (count >= 6) p.append(ref(a5));
  return (x_call_user_func_async(count, arg0, p));
}
Variant i_call_user_func_async(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("call_user_func_async", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_call_user_func_async(count, arg0, p));
  }
}
Variant ifa_urlencode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("urlencode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_urlencode(arg0));
}
Variant i_urlencode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_urlencode);
}
Variant ifa_drawgetstrokecolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokecolor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokecolor(arg0));
}
Variant i_drawgetstrokecolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokecolor);
}
Variant ifa_ldap_first_entry(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_first_entry", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_first_entry(arg0, arg1));
}
Variant i_ldap_first_entry(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_first_entry);
}
Variant ifa_stream_context_create(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("stream_context_create", 2, 1);
  if (count <= 0) return (x_stream_context_create());
  CVarRef arg0(a0);
  if (count <= 1) return (x_stream_context_create(arg0));
  CVarRef arg1(a1);
  return (x_stream_context_create(arg0, arg1));
}
Variant i_stream_context_create(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_context_create);
}
Variant ifa_magickgetmaxtextadvance(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickgetmaxtextadvance", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickgetmaxtextadvance(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickgetmaxtextadvance(arg0, arg1, arg2, arg3));
}
Variant i_magickgetmaxtextadvance(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetmaxtextadvance);
}
Variant ifa_drawsetfillcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfillcolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfillcolor(arg0, arg1), null);
}
Variant i_drawsetfillcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfillcolor);
}
Variant ifa_getaddrinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_wrong_arguments("getaddrinfo", count, 2, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_getaddrinfo(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_getaddrinfo(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_getaddrinfo(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_getaddrinfo(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_getaddrinfo(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_getaddrinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getaddrinfo);
}
Variant ifa_preg_quote(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("preg_quote", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_preg_quote(arg0));
  CVarRef arg1(a1);
  return (x_preg_quote(arg0, arg1));
}
Variant i_preg_quote(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_preg_quote);
}
Variant ifa_magickblurimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickblurimage", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickblurimage(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickblurimage(arg0, arg1, arg2, arg3));
}
Variant i_magickblurimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickblurimage);
}
Variant ifa_get_parent_class(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("get_parent_class", 1, 1);
  if (count <= 0) return (x_get_parent_class());
  CVarRef arg0(a0);
  return (x_get_parent_class(arg0));
}
Variant i_get_parent_class(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_parent_class);
}
Variant ifa_imagefilltoborder(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("imagefilltoborder", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_imagefilltoborder(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imagefilltoborder(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagefilltoborder);
}
Variant ifa_convert_uudecode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("convert_uudecode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_convert_uudecode(arg0));
}
Variant i_convert_uudecode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_convert_uudecode);
}
Variant ifa_define_syslog_variables(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("define_syslog_variables", 0, 1);
  return (x_define_syslog_variables(), null);
}
Variant i_define_syslog_variables(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_define_syslog_variables);
}
Variant ifa_strtolower(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("strtolower", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_strtolower(arg0));
}
Variant i_strtolower(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strtolower);
}
Variant ifa_expm1(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("expm1", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_expm1(arg0));
}
Variant i_expm1(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_expm1);
}
Variant ifa_spl_autoload_extensions(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("spl_autoload_extensions", 1, 1);
  if (count <= 0) return (x_spl_autoload_extensions());
  CVarRef arg0(a0);
  return (x_spl_autoload_extensions(arg0));
}
Variant i_spl_autoload_extensions(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spl_autoload_extensions);
}
Variant ifa_posix_getpid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getpid", 0, 1);
  return (x_posix_getpid());
}
Variant i_posix_getpid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getpid);
}
Variant ifa_imap_list(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_list", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_list(arg0, arg1, arg2));
}
Variant i_imap_list(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_list);
}
Variant ifa_sem_acquire(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sem_acquire", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sem_acquire(arg0));
}
Variant i_sem_acquire(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sem_acquire);
}
Variant ifa_magickgetimagegamma(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagegamma", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagegamma(arg0));
}
Variant i_magickgetimagegamma(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagegamma);
}
Variant ifa_xmlwriter_end_document(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_document", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_document(arg0));
}
Variant i_xmlwriter_end_document(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_document);
}
Variant ifa_sys_getloadavg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("sys_getloadavg", 0, 1);
  return (x_sys_getloadavg());
}
Variant i_sys_getloadavg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sys_getloadavg);
}
Variant ifa_strncmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("strncmp", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_strncmp(arg0, arg1, arg2));
}
Variant i_strncmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strncmp);
}
Variant ifa_dom_node_remove_child(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_node_remove_child", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_node_remove_child(arg0, arg1));
}
Variant i_dom_node_remove_child(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_remove_child);
}
Variant ifa_headers_list(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("headers_list", 0, 1);
  return (x_headers_list());
}
Variant i_headers_list(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_headers_list);
}
Variant ifa_imagejpeg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("imagejpeg", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagejpeg(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_imagejpeg(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imagejpeg(arg0, arg1, arg2));
}
Variant i_imagejpeg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagejpeg);
}
Variant ifa_pixelsetred(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetred", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetred(arg0, arg1), null);
}
Variant i_pixelsetred(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetred);
}
Variant ifa_hash_init(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("hash_init", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_hash_init(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_hash_init(arg0, arg1));
  CVarRef arg2(a2);
  return (x_hash_init(arg0, arg1, arg2));
}
Variant i_hash_init(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_init);
}
Variant ifa_mysql_get_server_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_get_server_info", 1, 1);
  if (count <= 0) return (x_mysql_get_server_info());
  CVarRef arg0(a0);
  return (x_mysql_get_server_info(arg0));
}
Variant i_mysql_get_server_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_get_server_info);
}
Variant ifa_drawtranslate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawtranslate", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawtranslate(arg0, arg1, arg2), null);
}
Variant i_drawtranslate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawtranslate);
}
Variant ifa_drawgetstrokewidth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokewidth", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokewidth(arg0));
}
Variant i_drawgetstrokewidth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokewidth);
}
Variant ifa_hphp_recursivedirectoryiterator_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_key", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_key(arg0));
}
Variant i_hphp_recursivedirectoryiterator_key(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_key);
}
Variant ifa_readfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("readfile", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_readfile(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_readfile(arg0, arg1));
  CVarRef arg2(a2);
  return (x_readfile(arg0, arg1, arg2));
}
Variant i_readfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_readfile);
}
Variant ifa_ob_get_flush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_get_flush", 0, 1);
  return (x_ob_get_flush());
}
Variant i_ob_get_flush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_get_flush);
}
Variant ifa_mb_send_mail(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("mb_send_mail", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_send_mail(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mb_send_mail(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mb_send_mail(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mb_send_mail(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_send_mail);
}
Variant ifa_gzgetc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gzgetc", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gzgetc(arg0));
}
Variant i_gzgetc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzgetc);
}
Variant ifa_fputcsv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("fputcsv", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_fputcsv(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_fputcsv(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_fputcsv(arg0, arg1, arg2, arg3));
}
Variant i_fputcsv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fputcsv);
}
Variant ifa_var_dump(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("var_dump", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_var_dump(count, arg0, p), null);
}
Variant i_var_dump(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("var_dump", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_var_dump(count, arg0, p), null);
  }
}
Variant ifa_xml_get_error_code(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xml_get_error_code", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xml_get_error_code(arg0));
}
Variant i_xml_get_error_code(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_get_error_code);
}
Variant ifa_mysql_connect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count <= 0) return (x_mysql_connect());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_connect(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_connect(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mysql_connect(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mysql_connect(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_mysql_connect(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_mysql_connect(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_mysql_connect(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 7)) return throw_toomany_arguments("mysql_connect", 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (x_mysql_connect());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (x_mysql_connect(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (x_mysql_connect(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_mysql_connect(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_mysql_connect(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_mysql_connect(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_mysql_connect(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_mysql_connect(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_evhttp_recv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("evhttp_recv", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_evhttp_recv(arg0));
}
Variant i_evhttp_recv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_evhttp_recv);
}
Variant ifa_posix_getcwd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getcwd", 0, 1);
  return (x_posix_getcwd());
}
Variant i_posix_getcwd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getcwd);
}
Variant ifa_sqrt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sqrt", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sqrt(arg0));
}
Variant i_sqrt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sqrt);
}
Variant ifa_pixelsetcyanquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetcyanquantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetcyanquantum(arg0, arg1), null);
}
Variant i_pixelsetcyanquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetcyanquantum);
}
Variant ifa_magickgetquantumdepth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("magickgetquantumdepth", 0, 1);
  return (x_magickgetquantumdepth());
}
Variant i_magickgetquantumdepth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetquantumdepth);
}
Variant ifa_class_parents(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("class_parents", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_class_parents(arg0));
  CVarRef arg1(a1);
  return (x_class_parents(arg0, arg1));
}
Variant i_class_parents(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_class_parents);
}
Variant ifa_unserialize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("unserialize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_unserialize(arg0));
}
Variant i_unserialize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_unserialize);
}
Variant ifa_memcache_set(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("memcache_set", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_set(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_memcache_set(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_memcache_set(arg0, arg1, arg2, arg3, arg4));
}
Variant i_memcache_set(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_set);
}
Variant ifa_mysql_field_table(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_field_table", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_field_table(arg0));
  CVarRef arg1(a1);
  return (x_mysql_field_table(arg0, arg1));
}
Variant i_mysql_field_table(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_field_table);
}
Variant ifa_pixelsetbluequantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetbluequantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetbluequantum(arg0, arg1), null);
}
Variant i_pixelsetbluequantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetbluequantum);
}
Variant ifa_ldap_get_values_len(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_get_values_len", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_get_values_len(arg0, arg1, arg2));
}
Variant i_ldap_get_values_len(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_get_values_len);
}
Variant ifa_magicksetinterlacescheme(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetinterlacescheme", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetinterlacescheme(arg0, arg1));
}
Variant i_magicksetinterlacescheme(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetinterlacescheme);
}
Variant ifa_strpos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("strpos", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_strpos(arg0, arg1));
  CVarRef arg2(a2);
  return (x_strpos(arg0, arg1, arg2));
}
Variant i_strpos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strpos);
}
Variant ifa_magickhaspreviousimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickhaspreviousimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickhaspreviousimage(arg0));
}
Variant i_magickhaspreviousimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickhaspreviousimage);
}
Variant ifa_magickdespeckleimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickdespeckleimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickdespeckleimage(arg0));
}
Variant i_magickdespeckleimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickdespeckleimage);
}
Variant ifa_strptime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strptime", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strptime(arg0, arg1));
}
Variant i_strptime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strptime);
}
Variant ifa_intl_get_error_code(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("intl_get_error_code", 0, 1);
  return (x_intl_get_error_code());
}
Variant i_intl_get_error_code(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_intl_get_error_code);
}
Variant ifa_rename_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("rename_function", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_rename_function(arg0, arg1));
}
Variant i_rename_function(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rename_function);
}
Variant ifa_apd_set_pprof_trace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("apd_set_pprof_trace", 2, 1);
  if (count <= 0) return (x_apd_set_pprof_trace());
  CVarRef arg0(a0);
  if (count <= 1) return (x_apd_set_pprof_trace(arg0));
  CVarRef arg1(a1);
  return (x_apd_set_pprof_trace(arg0, arg1));
}
Variant i_apd_set_pprof_trace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apd_set_pprof_trace);
}
Variant ifa_openssl_public_encrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openssl_public_encrypt", count, 3, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_public_encrypt(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_public_encrypt(arg0, arg1, arg2, arg3));
}
Variant i_openssl_public_encrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_public_encrypt);
}
Variant ifa_fnmatch(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("fnmatch", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_fnmatch(arg0, arg1));
  CVarRef arg2(a2);
  return (x_fnmatch(arg0, arg1, arg2));
}
Variant i_fnmatch(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fnmatch);
}
Variant ifa_xbox_process_call_message(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xbox_process_call_message", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xbox_process_call_message(arg0));
}
Variant i_xbox_process_call_message(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_process_call_message);
}
Variant ifa_forward_static_call_array(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("forward_static_call_array", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_forward_static_call_array(arg0, arg1));
}
Variant i_forward_static_call_array(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_forward_static_call_array);
}
Variant ifa_xmlwriter_write_dtd_element(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("xmlwriter_write_dtd_element", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_xmlwriter_write_dtd_element(arg0, arg1, arg2));
}
Variant i_xmlwriter_write_dtd_element(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_dtd_element);
}
Variant ifa_fb_utf8_strlen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_utf8_strlen", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_utf8_strlen(arg0));
}
Variant i_fb_utf8_strlen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_utf8_strlen);
}
Variant ifa_intval(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("intval", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_intval(arg0));
  CVarRef arg1(a1);
  return (x_intval(arg0, arg1));
}
Variant i_intval(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_intval);
}
Variant ifa_mysql_more_results(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_more_results", 1, 1);
  if (count <= 0) return (x_mysql_more_results());
  CVarRef arg0(a0);
  return (x_mysql_more_results(arg0));
}
Variant i_mysql_more_results(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_more_results);
}
Variant ifa_gzrewind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gzrewind", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gzrewind(arg0));
}
Variant i_gzrewind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzrewind);
}
Variant ifa_mb_split(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_split", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_split(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_split(arg0, arg1, arg2));
}
Variant i_mb_split(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_split);
}
Variant ifa_magickgetimageprofile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickgetimageprofile", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickgetimageprofile(arg0, arg1));
}
Variant i_magickgetimageprofile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageprofile);
}
Variant ifa_openssl_pkey_get_private(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("openssl_pkey_get_private", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_openssl_pkey_get_private(arg0));
  CVarRef arg1(a1);
  return (x_openssl_pkey_get_private(arg0, arg1));
}
Variant i_openssl_pkey_get_private(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkey_get_private);
}
Variant ifa_evhttp_post(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("evhttp_post", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_evhttp_post(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_evhttp_post(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_evhttp_post(arg0, arg1, arg2, arg3));
}
Variant i_evhttp_post(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_evhttp_post);
}
Variant ifa_socket_sendto(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 5)) return throw_wrong_arguments("socket_sendto", count, 5, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  if (count <= 5) return (x_socket_sendto(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_socket_sendto(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_socket_sendto(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_sendto);
}
Variant ifa_dom_namednodemap_get_named_item_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_namednodemap_get_named_item_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_namednodemap_get_named_item_ns(arg0, arg1, arg2));
}
Variant i_dom_namednodemap_get_named_item_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_namednodemap_get_named_item_ns);
}
Variant ifa_hphp_splfileinfo_getrealpath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getrealpath", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getrealpath(arg0));
}
Variant i_hphp_splfileinfo_getrealpath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getrealpath);
}
Variant ifa_mb_ereg_search_init(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("mb_ereg_search_init", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_ereg_search_init(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_ereg_search_init(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_ereg_search_init(arg0, arg1, arg2));
}
Variant i_mb_ereg_search_init(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_search_init);
}
Variant ifa_trim(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("trim", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_trim(arg0));
  CVarRef arg1(a1);
  return (x_trim(arg0, arg1));
}
Variant i_trim(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_trim);
}
Variant ifa_php_strip_whitespace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("php_strip_whitespace", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_php_strip_whitespace(arg0));
}
Variant i_php_strip_whitespace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_php_strip_whitespace);
}
Variant ifa_fb_serialize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_serialize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_serialize(arg0));
}
Variant i_fb_serialize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_serialize);
}
Variant ifa_array_filter(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("array_filter", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_array_filter(arg0));
  CVarRef arg1(a1);
  return (x_array_filter(arg0, arg1));
}
Variant i_array_filter(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_filter);
}
Variant ifa_preg_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("preg_replace", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_preg_replace(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_preg_replace(arg0, arg1, arg2, arg3));
  VRefParam arg4(vref(a4));
  return (x_preg_replace(arg0, arg1, arg2, arg3, arg4));
}
Variant i_preg_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_preg_replace);
}
Variant ifa_mcrypt_get_block_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_get_block_size", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_get_block_size(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_get_block_size(arg0, arg1));
}
Variant i_mcrypt_get_block_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_get_block_size);
}
Variant ifa_mysql_field_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_field_name", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_field_name(arg0));
  CVarRef arg1(a1);
  return (x_mysql_field_name(arg0, arg1));
}
Variant i_mysql_field_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_field_name);
}
Variant ifa_mailparse_msg_get_part(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mailparse_msg_get_part", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mailparse_msg_get_part(arg0, arg1));
}
Variant i_mailparse_msg_get_part(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_get_part);
}
Variant ifa_magickgetversionstring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("magickgetversionstring", 0, 1);
  return (x_magickgetversionstring());
}
Variant i_magickgetversionstring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetversionstring);
}
Variant ifa_furchash_hphp_ext_supported(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("furchash_hphp_ext_supported", 0, 1);
  return (x_furchash_hphp_ext_supported());
}
Variant i_furchash_hphp_ext_supported(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_furchash_hphp_ext_supported);
}
Variant ifa_drawsettextantialias(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("drawsettextantialias", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_drawsettextantialias(arg0), null);
  CVarRef arg1(a1);
  return (x_drawsettextantialias(arg0, arg1), null);
}
Variant i_drawsettextantialias(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsettextantialias);
}
Variant ifa_mcrypt_enc_is_block_algorithm_mode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_is_block_algorithm_mode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_is_block_algorithm_mode(arg0));
}
Variant i_mcrypt_enc_is_block_algorithm_mode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_is_block_algorithm_mode);
}
Variant ifa_i18n_loc_set_strength(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("i18n_loc_set_strength", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_i18n_loc_set_strength(arg0));
}
Variant i_i18n_loc_set_strength(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_i18n_loc_set_strength);
}
Variant ifa_natcasesort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("natcasesort", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_natcasesort(arg0));
}
Variant i_natcasesort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_natcasesort);
}
Variant ifa_header_remove(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("header_remove", 1, 1);
  if (count <= 0) return (x_header_remove(), null);
  CVarRef arg0(a0);
  return (x_header_remove(arg0), null);
}
Variant i_header_remove(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_header_remove);
}
Variant ifa_posix_getgid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getgid", 0, 1);
  return (x_posix_getgid());
}
Variant i_posix_getgid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getgid);
}
Variant ifa_xmlwriter_start_cdata(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_start_cdata", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_start_cdata(arg0));
}
Variant i_xmlwriter_start_cdata(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_cdata);
}
Variant ifa_iterator_apply(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("iterator_apply", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_iterator_apply(arg0, arg1));
  CVarRef arg2(a2);
  return (x_iterator_apply(arg0, arg1, arg2));
}
Variant i_iterator_apply(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iterator_apply);
}
Variant ifa_bcmul(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bcmul", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_bcmul(arg0, arg1));
  CVarRef arg2(a2);
  return (x_bcmul(arg0, arg1, arg2));
}
Variant i_bcmul(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcmul);
}
Variant ifa_php_sapi_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("php_sapi_name", 0, 1);
  return (x_php_sapi_name());
}
Variant i_php_sapi_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_php_sapi_name);
}
Variant ifa_magickcontrastimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickcontrastimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickcontrastimage(arg0, arg1));
}
Variant i_magickcontrastimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcontrastimage);
}
Variant ifa_destroymagickwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("destroymagickwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_destroymagickwand(arg0), null);
}
Variant i_destroymagickwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_destroymagickwand);
}
Variant ifa_preg_replace_callback(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("preg_replace_callback", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_preg_replace_callback(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_preg_replace_callback(arg0, arg1, arg2, arg3));
  VRefParam arg4(vref(a4));
  return (x_preg_replace_callback(arg0, arg1, arg2, arg3, arg4));
}
Variant i_preg_replace_callback(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_preg_replace_callback);
}
Variant ifa_ldap_mod_del(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_mod_del", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_mod_del(arg0, arg1, arg2));
}
Variant i_ldap_mod_del(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_mod_del);
}
Variant ifa_apache_response_headers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apache_response_headers", 0, 1);
  return (x_apache_response_headers());
}
Variant i_apache_response_headers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apache_response_headers);
}
Variant ifa_wandhasexception(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("wandhasexception", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_wandhasexception(arg0));
}
Variant i_wandhasexception(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_wandhasexception);
}
Variant ifa_stream_bucket_make_writeable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stream_bucket_make_writeable", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stream_bucket_make_writeable(arg0));
}
Variant i_stream_bucket_make_writeable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_bucket_make_writeable);
}
Variant ifa_mcrypt_decrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("mcrypt_decrypt", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_mcrypt_decrypt(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mcrypt_decrypt(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mcrypt_decrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_decrypt);
}
Variant ifa_zend_thread_id(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("zend_thread_id", 0, 1);
  return (x_zend_thread_id());
}
Variant i_zend_thread_id(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_zend_thread_id);
}
Variant ifa_ctype_punct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_punct", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_punct(arg0));
}
Variant i_ctype_punct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_punct);
}
Variant ifa_magickgetsize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetsize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetsize(arg0));
}
Variant i_magickgetsize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetsize);
}
Variant ifa_destroypixelwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("destroypixelwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_destroypixelwand(arg0), null);
}
Variant i_destroypixelwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_destroypixelwand);
}
Variant ifa_mcrypt_module_is_block_mode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_module_is_block_mode", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_module_is_block_mode(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_module_is_block_mode(arg0, arg1));
}
Variant i_mcrypt_module_is_block_mode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_is_block_mode);
}
Variant ifa_mb_strcut(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_strcut", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_strcut(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_strcut(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_strcut(arg0, arg1, arg2, arg3));
}
Variant i_mb_strcut(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strcut);
}
Variant ifa_magicksetimagerenderingintent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagerenderingintent", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagerenderingintent(arg0, arg1));
}
Variant i_magicksetimagerenderingintent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagerenderingintent);
}
Variant ifa_dom_node_normalize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_node_normalize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_node_normalize(arg0));
}
Variant i_dom_node_normalize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_normalize);
}
Variant ifa_magicksetimagevirtualpixelmethod(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagevirtualpixelmethod", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagevirtualpixelmethod(arg0, arg1));
}
Variant i_magicksetimagevirtualpixelmethod(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagevirtualpixelmethod);
}
Variant ifa_drawgettextundercolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgettextundercolor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgettextundercolor(arg0));
}
Variant i_drawgettextundercolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgettextundercolor);
}
Variant ifa_sha1(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("sha1", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_sha1(arg0));
  CVarRef arg1(a1);
  return (x_sha1(arg0, arg1));
}
Variant i_sha1(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sha1);
}
Variant ifa_magickqueryfonts(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickqueryfonts", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickqueryfonts(arg0));
}
Variant i_magickqueryfonts(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickqueryfonts);
}
Variant ifa_iconv_mime_encode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("iconv_mime_encode", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_iconv_mime_encode(arg0, arg1));
  CVarRef arg2(a2);
  return (x_iconv_mime_encode(arg0, arg1, arg2));
}
Variant i_iconv_mime_encode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_mime_encode);
}
Variant ifa_fb_stubout_intercept_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("fb_stubout_intercept_handler", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  VRefParam arg4(vref(a4));
  return (x_fb_stubout_intercept_handler(arg0, arg1, arg2, arg3, arg4));
}
Variant i_fb_stubout_intercept_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_stubout_intercept_handler);
}
Variant ifa_socket_create_listen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("socket_create_listen", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_socket_create_listen(arg0));
  CVarRef arg1(a1);
  return (x_socket_create_listen(arg0, arg1));
}
Variant i_socket_create_listen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_create_listen);
}
Variant ifa_ob_end_clean(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_end_clean", 0, 1);
  return (x_ob_end_clean());
}
Variant i_ob_end_clean(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_end_clean);
}
Variant ifa_drawpoint(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawpoint", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawpoint(arg0, arg1, arg2), null);
}
Variant i_drawpoint(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpoint);
}
Variant ifa_hphp_recursivedirectoryiterator_getchildren(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_getchildren", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_getchildren(arg0));
}
Variant i_hphp_recursivedirectoryiterator_getchildren(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_getchildren);
}
Variant ifa_imagepsencodefont(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagepsencodefont", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagepsencodefont(arg0, arg1));
}
Variant i_imagepsencodefont(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepsencodefont);
}
Variant ifa_ucwords(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ucwords", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ucwords(arg0));
}
Variant i_ucwords(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ucwords);
}
Variant ifa_dom_element_remove_attribute_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_element_remove_attribute_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_element_remove_attribute_ns(arg0, arg1, arg2));
}
Variant i_dom_element_remove_attribute_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_remove_attribute_ns);
}
Variant ifa_imagepsextendfont(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagepsextendfont", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagepsextendfont(arg0, arg1));
}
Variant i_imagepsextendfont(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagepsextendfont);
}
Variant ifa_magickgetresourcelimit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetresourcelimit", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetresourcelimit(arg0));
}
Variant i_magickgetresourcelimit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetresourcelimit);
}
Variant ifa_drawgetfont(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfont", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfont(arg0));
}
Variant i_drawgetfont(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfont);
}
Variant ifa_unpack(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("unpack", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_unpack(arg0, arg1));
}
Variant i_unpack(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_unpack);
}
Variant ifa_compact(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("compact", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_compact(count, arg0, p));
}
Variant i_compact(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("compact", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_compact(count, arg0, p));
  }
}
Variant ifa_pixelgetgreen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetgreen", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetgreen(arg0));
}
Variant i_pixelgetgreen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetgreen);
}
Variant ifa_dom_node_lookup_prefix(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_node_lookup_prefix", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_node_lookup_prefix(arg0, arg1));
}
Variant i_dom_node_lookup_prefix(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_lookup_prefix);
}
Variant ifa_pixelsetcyan(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetcyan", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetcyan(arg0, arg1), null);
}
Variant i_pixelsetcyan(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetcyan);
}
Variant ifa_apc_sma_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("apc_sma_info", 1, 1);
  if (count <= 0) return (x_apc_sma_info());
  CVarRef arg0(a0);
  return (x_apc_sma_info(arg0));
}
Variant i_apc_sma_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_sma_info);
}
Variant ifa_magickseparateimagechannel(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickseparateimagechannel", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickseparateimagechannel(arg0, arg1));
}
Variant i_magickseparateimagechannel(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickseparateimagechannel);
}
Variant ifa_drawpathlinetoverticalrelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawpathlinetoverticalrelative", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawpathlinetoverticalrelative(arg0, arg1), null);
}
Variant i_drawpathlinetoverticalrelative(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathlinetoverticalrelative);
}
Variant ifa_magickthresholdimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("magickthresholdimage", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_magickthresholdimage(arg0, arg1));
  CVarRef arg2(a2);
  return (x_magickthresholdimage(arg0, arg1, arg2));
}
Variant i_magickthresholdimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickthresholdimage);
}
Variant ifa_max(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("max", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_max(count, arg0, p));
}
Variant i_max(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("max", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_max(count, arg0, p));
  }
}
Variant ifa_end(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("end", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_end(arg0));
}
Variant i_end(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_end);
}
Variant ifa_imagexbm(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("imagexbm", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagexbm(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_imagexbm(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imagexbm(arg0, arg1, arg2));
}
Variant i_imagexbm(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagexbm);
}
Variant ifa_mysql_multi_query(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_multi_query", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_multi_query(arg0));
  CVarRef arg1(a1);
  return (x_mysql_multi_query(arg0, arg1));
}
Variant i_mysql_multi_query(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_multi_query);
}
Variant ifa_stream_filter_register(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_filter_register", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_filter_register(arg0, arg1));
}
Variant i_stream_filter_register(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_filter_register);
}
Variant ifa_mysql_client_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_client_encoding", 1, 1);
  if (count <= 0) return (x_mysql_client_encoding());
  CVarRef arg0(a0);
  return (x_mysql_client_encoding(arg0));
}
Variant i_mysql_client_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_client_encoding);
}
Variant ifa_ldap_get_values(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_get_values", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_get_values(arg0, arg1, arg2));
}
Variant i_ldap_get_values(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_get_values);
}
Variant ifa_xmlwriter_open_uri(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_open_uri", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_open_uri(arg0));
}
Variant i_xmlwriter_open_uri(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_open_uri);
}
Variant ifa_collator_set_strength(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("collator_set_strength", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_collator_set_strength(arg0, arg1));
}
Variant i_collator_set_strength(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_set_strength);
}
Variant ifa_pixelsetredquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetredquantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetredquantum(arg0, arg1), null);
}
Variant i_pixelsetredquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetredquantum);
}
Variant ifa_hphp_splfileinfo_getgroup(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getgroup", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getgroup(arg0));
}
Variant i_hphp_splfileinfo_getgroup(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getgroup);
}
Variant ifa_exit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("exit", 1, 1);
  if (count <= 0) return (x_exit());
  CVarRef arg0(a0);
  return (x_exit(arg0));
}
Variant i_exit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_exit);
}
Variant ifa_magickwriteimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("magickwriteimages", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_magickwriteimages(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_magickwriteimages(arg0, arg1));
  CVarRef arg2(a2);
  return (x_magickwriteimages(arg0, arg1, arg2));
}
Variant i_magickwriteimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickwriteimages);
}
Variant ifa_hphp_splfileinfo_getpathinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileinfo_getpathinfo", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileinfo_getpathinfo(arg0, arg1));
}
Variant i_hphp_splfileinfo_getpathinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getpathinfo);
}
Variant ifa_fb_enable_code_coverage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fb_enable_code_coverage", 0, 1);
  return (x_fb_enable_code_coverage(), null);
}
Variant i_fb_enable_code_coverage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_enable_code_coverage);
}
Variant ifa_imagecolorresolvealpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("imagecolorresolvealpha", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_imagecolorresolvealpha(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imagecolorresolvealpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorresolvealpha);
}
Variant ifa_magicknewimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magicknewimage", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magicknewimage(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magicknewimage(arg0, arg1, arg2, arg3));
}
Variant i_magicknewimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicknewimage);
}
Variant ifa_tempnam(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("tempnam", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_tempnam(arg0, arg1));
}
Variant i_tempnam(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_tempnam);
}
Variant ifa_dom_element_get_elements_by_tag_name_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_element_get_elements_by_tag_name_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_element_get_elements_by_tag_name_ns(arg0, arg1, arg2));
}
Variant i_dom_element_get_elements_by_tag_name_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_get_elements_by_tag_name_ns);
}
Variant ifa_imap_expunge(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_expunge", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_expunge(arg0));
}
Variant i_imap_expunge(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_expunge);
}
Variant ifa_idn_to_utf8(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("idn_to_utf8", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_idn_to_utf8(arg0));
  VRefParam arg1(vref(a1));
  return (x_idn_to_utf8(arg0, arg1));
}
Variant i_idn_to_utf8(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_idn_to_utf8);
}
Variant ifa_pixelsetyellowquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetyellowquantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetyellowquantum(arg0, arg1), null);
}
Variant i_pixelsetyellowquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetyellowquantum);
}
Variant ifa_magickframeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickframeimage", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickframeimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickframeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickframeimage);
}
Variant ifa_magickgetreleasedate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("magickgetreleasedate", 0, 1);
  return (x_magickgetreleasedate());
}
Variant i_magickgetreleasedate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetreleasedate);
}
Variant ifa_parse_ini_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("parse_ini_file", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_parse_ini_file(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_parse_ini_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_parse_ini_file(arg0, arg1, arg2));
}
Variant i_parse_ini_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_parse_ini_file);
}
Variant ifa_pixelgetalphaquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetalphaquantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetalphaquantum(arg0));
}
Variant i_pixelgetalphaquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetalphaquantum);
}
Variant ifa_magickminifyimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickminifyimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickminifyimage(arg0));
}
Variant i_magickminifyimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickminifyimage);
}
Variant ifa_stream_get_line(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("stream_get_line", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_stream_get_line(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_get_line(arg0, arg1));
  CVarRef arg2(a2);
  return (x_stream_get_line(arg0, arg1, arg2));
}
Variant i_stream_get_line(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_get_line);
}
Variant ifa_exp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("exp", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_exp(arg0));
}
Variant i_exp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_exp);
}
Variant ifa_imap_unsubscribe(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imap_unsubscribe", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imap_unsubscribe(arg0, arg1));
}
Variant i_imap_unsubscribe(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_unsubscribe);
}
Variant ifa_apache_get_rewrite_rules(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apache_get_rewrite_rules", 0, 1);
  return (x_apache_get_rewrite_rules());
}
Variant i_apache_get_rewrite_rules(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apache_get_rewrite_rules);
}
Variant ifa__soap_active_version(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("_soap_active_version", 0, 1);
  return (x__soap_active_version());
}
Variant i__soap_active_version(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa__soap_active_version);
}
Variant ifa_bcsqrt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("bcsqrt", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_bcsqrt(arg0));
  CVarRef arg1(a1);
  return (x_bcsqrt(arg0, arg1));
}
Variant i_bcsqrt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcsqrt);
}
Variant ifa_ob_flush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_flush", 0, 1);
  return (x_ob_flush(), null);
}
Variant i_ob_flush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_flush);
}
Variant ifa_substr_count(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("substr_count", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_substr_count(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_substr_count(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_substr_count(arg0, arg1, arg2, arg3));
}
Variant i_substr_count(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_substr_count);
}
Variant ifa_mailparse_msg_create(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("mailparse_msg_create", 0, 1);
  return (x_mailparse_msg_create());
}
Variant i_mailparse_msg_create(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_create);
}
Variant ifa_ldap_first_reference(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_first_reference", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_first_reference(arg0, arg1));
}
Variant i_ldap_first_reference(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_first_reference);
}
Variant ifa_magickmagnifyimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickmagnifyimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickmagnifyimage(arg0));
}
Variant i_magickmagnifyimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmagnifyimage);
}
Variant ifa_pixelsetblack(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetblack", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetblack(arg0, arg1), null);
}
Variant i_pixelsetblack(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetblack);
}
Variant ifa_strcasecmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strcasecmp", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strcasecmp(arg0, arg1));
}
Variant i_strcasecmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strcasecmp);
}
Variant ifa_array_key_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("array_key_exists", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_array_key_exists(arg0, arg1));
}
Variant i_array_key_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_key_exists);
}
Variant ifa_ldap_add(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_add", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_add(arg0, arg1, arg2));
}
Variant i_ldap_add(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_add);
}
Variant ifa_icu_tokenize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("icu_tokenize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_icu_tokenize(arg0));
}
Variant i_icu_tokenize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_icu_tokenize);
}
Variant ifa_hphp_set_property(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("hphp_set_property", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_hphp_set_property(arg0, arg1, arg2, arg3), null);
}
Variant i_hphp_set_property(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_set_property);
}
Variant ifa_drawgetstrokeopacity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokeopacity", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokeopacity(arg0));
}
Variant i_drawgetstrokeopacity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokeopacity);
}
Variant ifa_socket_recv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("socket_recv", count, 4, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_socket_recv(arg0, arg1, arg2, arg3));
}
Variant i_socket_recv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_recv);
}
Variant ifa_magickgetimagehistogram(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagehistogram", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagehistogram(arg0));
}
Variant i_magickgetimagehistogram(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagehistogram);
}
Variant ifa_getmygid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getmygid", 0, 1);
  return (x_getmygid());
}
Variant i_getmygid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getmygid);
}
Variant ifa_evhttp_async_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("evhttp_async_get", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_evhttp_async_get(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_evhttp_async_get(arg0, arg1));
  CVarRef arg2(a2);
  return (x_evhttp_async_get(arg0, arg1, arg2));
}
Variant i_evhttp_async_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_evhttp_async_get);
}
Variant ifa_magickgetimagedepth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("magickgetimagedepth", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_magickgetimagedepth(arg0));
  CVarRef arg1(a1);
  return (x_magickgetimagedepth(arg0, arg1));
}
Variant i_magickgetimagedepth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagedepth);
}
Variant ifa_imagegif(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imagegif", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imagegif(arg0));
  CVarRef arg1(a1);
  return (x_imagegif(arg0, arg1));
}
Variant i_imagegif(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagegif);
}
Variant ifa_xmlwriter_set_indent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_set_indent", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_set_indent(arg0, arg1));
}
Variant i_xmlwriter_set_indent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_set_indent);
}
Variant ifa_dom_document_create_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_create_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_create_attribute(arg0, arg1));
}
Variant i_dom_document_create_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_attribute);
}
Variant ifa_ob_get_level(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_get_level", 0, 1);
  return (x_ob_get_level());
}
Variant i_ob_get_level(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_get_level);
}
Variant ifa_xbox_send_message(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("xbox_send_message", count, 3, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_xbox_send_message(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_xbox_send_message(arg0, arg1, arg2, arg3));
}
Variant i_xbox_send_message(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_send_message);
}
Variant ifa_rawurlencode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("rawurlencode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_rawurlencode(arg0));
}
Variant i_rawurlencode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rawurlencode);
}
Variant ifa_magickblackthresholdimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickblackthresholdimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickblackthresholdimage(arg0, arg1));
}
Variant i_magickblackthresholdimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickblackthresholdimage);
}
Variant ifa_dom_node_is_same_node(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_node_is_same_node", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_node_is_same_node(arg0, arg1));
}
Variant i_dom_node_is_same_node(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_is_same_node);
}
Variant ifa_hphp_create_continuation(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("hphp_create_continuation", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_hphp_create_continuation(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_hphp_create_continuation(arg0, arg1, arg2, arg3));
}
Variant i_hphp_create_continuation(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_create_continuation);
}
Variant ifa_magicktransformimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicktransformimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicktransformimage(arg0, arg1, arg2));
}
Variant i_magicktransformimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicktransformimage);
}
Variant ifa_hphp_log(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_log", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_log(arg0, arg1));
}
Variant i_hphp_log(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_log);
}
Variant ifa_array_search(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("array_search", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_array_search(arg0, arg1));
  CVarRef arg2(a2);
  return (x_array_search(arg0, arg1, arg2));
}
Variant i_array_search(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_search);
}
Variant ifa_mailparse_msg_extract_part(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mailparse_msg_extract_part", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mailparse_msg_extract_part(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mailparse_msg_extract_part(arg0, arg1, arg2));
}
Variant i_mailparse_msg_extract_part(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_extract_part);
}
Variant ifa_magickspliceimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("magickspliceimage", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_magickspliceimage(arg0, arg1, arg2, arg3, arg4));
}
Variant i_magickspliceimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickspliceimage);
}
Variant ifa_hphp_splfileinfo_getperms(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getperms", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getperms(arg0));
}
Variant i_hphp_splfileinfo_getperms(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getperms);
}
Variant ifa_mb_substr_count(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_substr_count", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_substr_count(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_substr_count(arg0, arg1, arg2));
}
Variant i_mb_substr_count(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_substr_count);
}
Variant ifa_xmlwriter_set_indent_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_set_indent_string", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_set_indent_string(arg0, arg1));
}
Variant i_xmlwriter_set_indent_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_set_indent_string);
}
Variant ifa_hphp_recursivedirectoryiterator_haschildren(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_haschildren", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_haschildren(arg0));
}
Variant i_hphp_recursivedirectoryiterator_haschildren(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_haschildren);
}
Variant ifa_xmlwriter_start_comment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_start_comment", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_start_comment(arg0));
}
Variant i_xmlwriter_start_comment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_comment);
}
Variant ifa_hphp_recursivedirectoryiterator_next(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_next", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_next(arg0), null);
}
Variant i_hphp_recursivedirectoryiterator_next(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_next);
}
Variant ifa_bzwrite(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bzwrite", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_bzwrite(arg0, arg1));
  CVarRef arg2(a2);
  return (x_bzwrite(arg0, arg1, arg2));
}
Variant i_bzwrite(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzwrite);
}
Variant ifa_output_reset_rewrite_vars(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("output_reset_rewrite_vars", 0, 1);
  return (x_output_reset_rewrite_vars());
}
Variant i_output_reset_rewrite_vars(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_output_reset_rewrite_vars);
}
Variant ifa_mcrypt_create_iv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_create_iv", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_create_iv(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_create_iv(arg0, arg1));
}
Variant i_mcrypt_create_iv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_create_iv);
}
Variant ifa_magickgettextascent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickgettextascent", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickgettextascent(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickgettextascent(arg0, arg1, arg2, arg3));
}
Variant i_magickgettextascent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgettextascent);
}
Variant ifa_strtoupper(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("strtoupper", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_strtoupper(arg0));
}
Variant i_strtoupper(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strtoupper);
}
Variant ifa_session_cache_expire(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("session_cache_expire", 1, 1);
  if (count <= 0) return (x_session_cache_expire());
  CVarRef arg0(a0);
  return (x_session_cache_expire(arg0));
}
Variant i_session_cache_expire(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_cache_expire);
}
Variant ifa_socket_set_timeout(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("socket_set_timeout", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_socket_set_timeout(arg0, arg1));
  CVarRef arg2(a2);
  return (x_socket_set_timeout(arg0, arg1, arg2));
}
Variant i_socket_set_timeout(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_set_timeout);
}
Variant ifa_magickgetexceptionstring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetexceptionstring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetexceptionstring(arg0));
}
Variant i_magickgetexceptionstring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetexceptionstring);
}
Variant ifa_hphp_get_stats(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_get_stats", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_get_stats(arg0));
}
Variant i_hphp_get_stats(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_stats);
}
Variant ifa_stream_get_filters(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("stream_get_filters", 0, 1);
  return (x_stream_get_filters());
}
Variant i_stream_get_filters(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_get_filters);
}
Variant ifa_hphp_set_iostatus_address(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_set_iostatus_address", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_set_iostatus_address(arg0), null);
}
Variant i_hphp_set_iostatus_address(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_set_iostatus_address);
}
Variant ifa_fb_unset_taint(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("fb_unset_taint", count, 2, 2, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  return (x_fb_unset_taint(arg0, arg1), null);
}
Variant i_fb_unset_taint(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_unset_taint);
}
Variant ifa_date_parse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("date_parse", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_date_parse(arg0));
}
Variant i_date_parse(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_parse);
}
Variant ifa_json_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("json_decode", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_json_decode(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_json_decode(arg0, arg1));
  CVarRef arg2(a2);
  return (x_json_decode(arg0, arg1, arg2));
}
Variant i_json_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_json_decode);
}
Variant ifa_mailparse_msg_parse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mailparse_msg_parse", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mailparse_msg_parse(arg0, arg1));
}
Variant i_mailparse_msg_parse(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_parse);
}
Variant ifa_is_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_string", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_string(arg0));
}
Variant i_is_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_string);
}
Variant ifa_imap_num_recent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_num_recent", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_num_recent(arg0));
}
Variant i_imap_num_recent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_num_recent);
}
Variant ifa_mailparse_stream_encode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("mailparse_stream_encode", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_mailparse_stream_encode(arg0, arg1, arg2));
}
Variant i_mailparse_stream_encode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_stream_encode);
}
Variant ifa_curl_exec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("curl_exec", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_curl_exec(arg0));
}
Variant i_curl_exec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_exec);
}
Variant ifa_hphp_splfileinfo_getfileinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileinfo_getfileinfo", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileinfo_getfileinfo(arg0, arg1));
}
Variant i_hphp_splfileinfo_getfileinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getfileinfo);
}
Variant ifa_mb_convert_kana(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("mb_convert_kana", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_convert_kana(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_convert_kana(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_convert_kana(arg0, arg1, arg2));
}
Variant i_mb_convert_kana(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_convert_kana);
}
Variant ifa_chgrp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("chgrp", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_chgrp(arg0, arg1));
}
Variant i_chgrp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_chgrp);
}
Variant ifa_posix_getsid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_getsid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_getsid(arg0));
}
Variant i_posix_getsid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getsid);
}
Variant ifa_mcrypt_module_is_block_algorithm_mode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_module_is_block_algorithm_mode", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_module_is_block_algorithm_mode(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_module_is_block_algorithm_mode(arg0, arg1));
}
Variant i_mcrypt_module_is_block_algorithm_mode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_is_block_algorithm_mode);
}
Variant ifa_fb_lazy_lstat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_lazy_lstat", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_lazy_lstat(arg0));
}
Variant i_fb_lazy_lstat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_lazy_lstat);
}
Variant ifa_fb_utf8ize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_utf8ize", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_fb_utf8ize(arg0));
}
Variant i_fb_utf8ize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_utf8ize);
}
Variant ifa_hphp_splfileobject_eof(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_eof", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_eof(arg0));
}
Variant i_hphp_splfileobject_eof(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_eof);
}
Variant ifa_imap_getmailboxes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_getmailboxes", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_getmailboxes(arg0, arg1, arg2));
}
Variant i_imap_getmailboxes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_getmailboxes);
}
Variant ifa_drawpopdefs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawpopdefs", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawpopdefs(arg0), null);
}
Variant i_drawpopdefs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpopdefs);
}
Variant ifa_vprintf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("vprintf", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_vprintf(arg0, arg1));
}
Variant i_vprintf(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_vprintf);
}
Variant ifa_xmlwriter_write_pi(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("xmlwriter_write_pi", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_xmlwriter_write_pi(arg0, arg1, arg2));
}
Variant i_xmlwriter_write_pi(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_pi);
}
Variant ifa_magickgetimagechannelmean(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickgetimagechannelmean", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickgetimagechannelmean(arg0, arg1));
}
Variant i_magickgetimagechannelmean(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagechannelmean);
}
Variant ifa_xmlwriter_end_dtd_entity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_dtd_entity", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_dtd_entity(arg0));
}
Variant i_xmlwriter_end_dtd_entity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_dtd_entity);
}
Variant ifa_libxml_disable_entity_loader(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("libxml_disable_entity_loader", 1, 1);
  if (count <= 0) return (x_libxml_disable_entity_loader());
  CVarRef arg0(a0);
  return (x_libxml_disable_entity_loader(arg0));
}
Variant i_libxml_disable_entity_loader(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_libxml_disable_entity_loader);
}
Variant ifa_method_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("method_exists", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_method_exists(arg0, arg1));
}
Variant i_method_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_method_exists);
}
Variant ifa_openssl_csr_new(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("openssl_csr_new", count, 2, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_openssl_csr_new(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_csr_new(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_csr_new(arg0, arg1, arg2, arg3));
}
Variant i_openssl_csr_new(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_csr_new);
}
Variant ifa_gzeof(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gzeof", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gzeof(arg0));
}
Variant i_gzeof(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzeof);
}
Variant ifa_array_intersect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_intersect", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_intersect(count, arg0, arg1, p));
}
Variant i_array_intersect(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_intersect", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_intersect(count, arg0, arg1, p));
  }
}
Variant ifa_array_change_key_case(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("array_change_key_case", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_array_change_key_case(arg0));
  CVarRef arg1(a1);
  return (x_array_change_key_case(arg0, arg1));
}
Variant i_array_change_key_case(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_change_key_case);
}
Variant ifa_mysql_list_processes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_list_processes", 1, 1);
  if (count <= 0) return (x_mysql_list_processes());
  CVarRef arg0(a0);
  return (x_mysql_list_processes(arg0));
}
Variant i_mysql_list_processes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_list_processes);
}
Variant ifa_pixelsetalphaquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetalphaquantum", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetalphaquantum(arg0, arg1), null);
}
Variant i_pixelsetalphaquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetalphaquantum);
}
Variant ifa_filegroup(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("filegroup", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_filegroup(arg0));
}
Variant i_filegroup(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_filegroup);
}
Variant ifa_posix_mkfifo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("posix_mkfifo", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_posix_mkfifo(arg0, arg1));
}
Variant i_posix_mkfifo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_mkfifo);
}
Variant ifa_imap_utf8(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_utf8", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_utf8(arg0));
}
Variant i_imap_utf8(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_utf8);
}
Variant ifa_import_request_variables(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("import_request_variables", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_import_request_variables(arg0));
  CVarRef arg1(a1);
  return (x_import_request_variables(arg0, arg1));
}
Variant i_import_request_variables(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_import_request_variables);
}
Variant ifa_magickedgeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickedgeimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickedgeimage(arg0, arg1));
}
Variant i_magickedgeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickedgeimage);
}
Variant ifa_array_diff_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_diff_key", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_diff_key(count, arg0, arg1, p));
}
Variant i_array_diff_key(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_diff_key", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_diff_key(count, arg0, arg1, p));
  }
}
Variant ifa_magickresizeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("magickresizeimage", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_magickresizeimage(arg0, arg1, arg2, arg3, arg4));
}
Variant i_magickresizeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickresizeimage);
}
Variant ifa_clearpixeliterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("clearpixeliterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_clearpixeliterator(arg0), null);
}
Variant i_clearpixeliterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clearpixeliterator);
}
Variant ifa_hphp_recursiveiteratoriterator_next(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursiveiteratoriterator_next", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursiveiteratoriterator_next(arg0), null);
}
Variant i_hphp_recursiveiteratoriterator_next(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursiveiteratoriterator_next);
}
Variant ifa_disk_total_space(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("disk_total_space", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_disk_total_space(arg0));
}
Variant i_disk_total_space(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_disk_total_space);
}
Variant ifa_stripos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("stripos", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stripos(arg0, arg1));
  CVarRef arg2(a2);
  return (x_stripos(arg0, arg1, arg2));
}
Variant i_stripos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stripos);
}
Variant ifa_acosh(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("acosh", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_acosh(arg0));
}
Variant i_acosh(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_acosh);
}
Variant ifa_posix_setegid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_setegid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_setegid(arg0));
}
Variant i_posix_setegid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_setegid);
}
Variant ifa_pixelsetcolorcount(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetcolorcount", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetcolorcount(arg0, arg1), null);
}
Variant i_pixelsetcolorcount(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetcolorcount);
}
Variant ifa_apc_bin_loadfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("apc_bin_loadfile", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_bin_loadfile(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_bin_loadfile(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_apc_bin_loadfile(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_apc_bin_loadfile(arg0, arg1, arg2, arg3));
}
Variant i_apc_bin_loadfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_bin_loadfile);
}
Variant ifa_pixelgetcolorasstring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetcolorasstring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetcolorasstring(arg0));
}
Variant i_pixelgetcolorasstring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetcolorasstring);
}
Variant ifa_connection_timeout(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("connection_timeout", 0, 1);
  return (x_connection_timeout());
}
Variant i_connection_timeout(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_connection_timeout);
}
Variant ifa_strchr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strchr", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strchr(arg0, arg1));
}
Variant i_strchr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strchr);
}
Variant ifa_posix_uname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_uname", 0, 1);
  return (x_posix_uname());
}
Variant i_posix_uname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_uname);
}
Variant ifa_mb_stristr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_stristr", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_stristr(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_stristr(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_stristr(arg0, arg1, arg2, arg3));
}
Variant i_mb_stristr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_stristr);
}
Variant ifa_sem_release(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sem_release", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sem_release(arg0));
}
Variant i_sem_release(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sem_release);
}
Variant ifa_imap_headers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_headers", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_headers(arg0));
}
Variant i_imap_headers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_headers);
}
Variant ifa_magickremoveimageprofile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickremoveimageprofile", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickremoveimageprofile(arg0, arg1));
}
Variant i_magickremoveimageprofile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickremoveimageprofile);
}
Variant ifa_imagefill(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagefill", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagefill(arg0, arg1, arg2, arg3));
}
Variant i_imagefill(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagefill);
}
Variant ifa_hphp_splfileobject_ftruncate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileobject_ftruncate", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileobject_ftruncate(arg0, arg1));
}
Variant i_hphp_splfileobject_ftruncate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_ftruncate);
}
Variant ifa_imagecolorexactalpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("imagecolorexactalpha", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_imagecolorexactalpha(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imagecolorexactalpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorexactalpha);
}
Variant ifa_restore_include_path(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("restore_include_path", 0, 1);
  return (x_restore_include_path(), null);
}
Variant i_restore_include_path(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_restore_include_path);
}
Variant ifa_stream_wrapper_unregister(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("stream_wrapper_unregister", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_stream_wrapper_unregister(arg0));
}
Variant i_stream_wrapper_unregister(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_wrapper_unregister);
}
Variant ifa_unregister_tick_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("unregister_tick_function", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_unregister_tick_function(arg0), null);
}
Variant i_unregister_tick_function(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_unregister_tick_function);
}
Variant ifa_sort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("sort", count, 1, 3, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (x_sort(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_sort(arg0, arg1));
  CVarRef arg2(a2);
  return (x_sort(arg0, arg1, arg2));
}
Variant i_sort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sort);
}
Variant ifa_shm_remove_var(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("shm_remove_var", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_shm_remove_var(arg0, arg1));
}
Variant i_shm_remove_var(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shm_remove_var);
}
Variant ifa_md5_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("md5_file", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_md5_file(arg0));
  CVarRef arg1(a1);
  return (x_md5_file(arg0, arg1));
}
Variant i_md5_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_md5_file);
}
Variant ifa_decoct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("decoct", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_decoct(arg0));
}
Variant i_decoct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_decoct);
}
Variant ifa_ob_gzhandler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ob_gzhandler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ob_gzhandler(arg0, arg1));
}
Variant i_ob_gzhandler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_gzhandler);
}
Variant ifa_write_hdf_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("write_hdf_string", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_write_hdf_string(arg0));
}
Variant i_write_hdf_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_write_hdf_string);
}
Variant ifa_bzerrno(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("bzerrno", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_bzerrno(arg0));
}
Variant i_bzerrno(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzerrno);
}
Variant ifa_getcwd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getcwd", 0, 1);
  return (x_getcwd());
}
Variant i_getcwd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getcwd);
}
Variant ifa_dom_element_set_attribute_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("dom_element_set_attribute_ns", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_dom_element_set_attribute_ns(arg0, arg1, arg2, arg3));
}
Variant i_dom_element_set_attribute_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_set_attribute_ns);
}
Variant ifa_drawgetstrokedasharray(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokedasharray", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokedasharray(arg0));
}
Variant i_drawgetstrokedasharray(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokedasharray);
}
Variant ifa_hphp_splfileobject_fwrite(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("hphp_splfileobject_fwrite", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_hphp_splfileobject_fwrite(arg0, arg1, arg2));
}
Variant i_hphp_splfileobject_fwrite(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fwrite);
}
Variant ifa_magickannotateimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickannotateimage", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickannotateimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickannotateimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickannotateimage);
}
Variant ifa_ctype_alnum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_alnum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_alnum(arg0));
}
Variant i_ctype_alnum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_alnum);
}
Variant ifa_mysql_select_db(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_select_db", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_select_db(arg0));
  CVarRef arg1(a1);
  return (x_mysql_select_db(arg0, arg1));
}
Variant i_mysql_select_db(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_select_db);
}
Variant ifa_mysql_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_close", 1, 1);
  if (count <= 0) return (x_mysql_close());
  CVarRef arg0(a0);
  return (x_mysql_close(arg0));
}
Variant i_mysql_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_close);
}
Variant ifa_htmlspecialchars(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("htmlspecialchars", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_htmlspecialchars(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_htmlspecialchars(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_htmlspecialchars(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_htmlspecialchars(arg0, arg1, arg2, arg3));
}
Variant i_htmlspecialchars(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_htmlspecialchars);
}
Variant ifa_time_sleep_until(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("time_sleep_until", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_time_sleep_until(arg0));
}
Variant i_time_sleep_until(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_time_sleep_until);
}
Variant ifa_imagecolorclosest(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagecolorclosest", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagecolorclosest(arg0, arg1, arg2, arg3));
}
Variant i_imagecolorclosest(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorclosest);
}
Variant ifa_token_get_all(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("token_get_all", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_token_get_all(arg0));
}
Variant i_token_get_all(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_token_get_all);
}
Variant ifa_magickquantizeimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickquantizeimages", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickquantizeimages(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickquantizeimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickquantizeimages);
}
Variant ifa_collator_sort_with_sort_keys(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("collator_sort_with_sort_keys", count, 2, 2, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  return (x_collator_sort_with_sort_keys(arg0, arg1));
}
Variant i_collator_sort_with_sort_keys(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_sort_with_sort_keys);
}
Variant ifa_destroydrawingwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("destroydrawingwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_destroydrawingwand(arg0), null);
}
Variant i_destroydrawingwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_destroydrawingwand);
}
Variant ifa_msg_receive(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 5)) return throw_wrong_arguments("msg_receive", count, 5, 8, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  CVarRef arg3(a3);
  VRefParam arg4(vref(a4));
  if (count <= 5) return (x_msg_receive(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_msg_receive(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_msg_receive(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 5 || count > 8)) return throw_wrong_arguments("msg_receive", count, 5, 8, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    VRefParam arg2(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    VRefParam arg4(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_msg_receive(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_msg_receive(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 7) return (x_msg_receive(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
    VRefParam arg7(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    return (x_msg_receive(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_xml_error_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xml_error_string", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xml_error_string(arg0));
}
Variant i_xml_error_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_error_string);
}
Variant ifa_spl_autoload_unregister(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("spl_autoload_unregister", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_spl_autoload_unregister(arg0));
}
Variant i_spl_autoload_unregister(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spl_autoload_unregister);
}
Variant ifa_posix_kill(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("posix_kill", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_posix_kill(arg0, arg1));
}
Variant i_posix_kill(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_kill);
}
Variant ifa_imagerotate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("imagerotate", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imagerotate(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imagerotate(arg0, arg1, arg2, arg3));
}
Variant i_imagerotate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagerotate);
}
Variant ifa_magickpaintopaqueimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickpaintopaqueimage", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickpaintopaqueimage(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickpaintopaqueimage(arg0, arg1, arg2, arg3));
}
Variant i_magickpaintopaqueimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickpaintopaqueimage);
}
Variant ifa_sscanf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("sscanf", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(ref(a2));
  if (count >= 4) p.append(ref(a3));
  if (count >= 5) p.append(ref(a4));
  if (count >= 6) p.append(ref(a5));
  return (x_sscanf(count, arg0, arg1, p));
}
Variant i_sscanf(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("sscanf", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_sscanf(count, arg0, arg1, p));
  }
}
Variant ifa_mb_http_output(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_http_output", 1, 1);
  if (count <= 0) return (x_mb_http_output());
  CVarRef arg0(a0);
  return (x_mb_http_output(arg0));
}
Variant i_mb_http_output(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_http_output);
}
Variant ifa_hash_hmac(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("hash_hmac", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_hash_hmac(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_hash_hmac(arg0, arg1, arg2, arg3));
}
Variant i_hash_hmac(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_hmac);
}
Variant ifa_imagedestroy(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagedestroy", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagedestroy(arg0));
}
Variant i_imagedestroy(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagedestroy);
}
Variant ifa_ldap_set_option(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_set_option", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_set_option(arg0, arg1, arg2));
}
Variant i_ldap_set_option(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_set_option);
}
Variant ifa_sleep(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sleep", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sleep(arg0));
}
Variant i_sleep(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sleep);
}
Variant ifa_pcntl_setpriority(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("pcntl_setpriority", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_pcntl_setpriority(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_pcntl_setpriority(arg0, arg1));
  CVarRef arg2(a2);
  return (x_pcntl_setpriority(arg0, arg1, arg2));
}
Variant i_pcntl_setpriority(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_setpriority);
}
Variant ifa_strnatcmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strnatcmp", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strnatcmp(arg0, arg1));
}
Variant i_strnatcmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strnatcmp);
}
Variant ifa_drawsetstrokelinejoin(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokelinejoin", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokelinejoin(arg0, arg1), null);
}
Variant i_drawsetstrokelinejoin(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokelinejoin);
}
Variant ifa_isdrawingwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("isdrawingwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_isdrawingwand(arg0));
}
Variant i_isdrawingwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_isdrawingwand);
}
Variant ifa_stream_filter_append(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("stream_filter_append", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_filter_append(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_stream_filter_append(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_stream_filter_append(arg0, arg1, arg2, arg3));
}
Variant i_stream_filter_append(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_filter_append);
}
Variant ifa_magicksetimagemattecolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagemattecolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagemattecolor(arg0, arg1));
}
Variant i_magicksetimagemattecolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagemattecolor);
}
Variant ifa_class_uses(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("class_uses", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_class_uses(arg0));
  CVarRef arg1(a1);
  return (x_class_uses(arg0, arg1));
}
Variant i_class_uses(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_class_uses);
}
Variant ifa_magickcompareimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickcompareimages", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickcompareimages(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickcompareimages(arg0, arg1, arg2, arg3));
}
Variant i_magickcompareimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcompareimages);
}
Variant ifa_fb_thrift_unserialize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("fb_thrift_unserialize", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_fb_thrift_unserialize(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_fb_thrift_unserialize(arg0, arg1, arg2));
}
Variant i_fb_thrift_unserialize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_thrift_unserialize);
}
Variant ifa_gzclose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gzclose", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gzclose(arg0));
}
Variant i_gzclose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzclose);
}
Variant ifa_mt_rand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("mt_rand", 2, 1);
  if (count <= 0) return (x_mt_rand());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mt_rand(arg0));
  CVarRef arg1(a1);
  return (x_mt_rand(arg0, arg1));
}
Variant i_mt_rand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mt_rand);
}
Variant ifa_mcrypt_enc_get_key_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_get_key_size", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_get_key_size(arg0));
}
Variant i_mcrypt_enc_get_key_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_get_key_size);
}
Variant ifa_collator_get_error_message(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("collator_get_error_message", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_collator_get_error_message(arg0));
}
Variant i_collator_get_error_message(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_get_error_message);
}
Variant ifa_flock(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("flock", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_flock(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_flock(arg0, arg1, arg2));
}
Variant i_flock(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_flock);
}
Variant ifa_gethostbyaddr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gethostbyaddr", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gethostbyaddr(arg0));
}
Variant i_gethostbyaddr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gethostbyaddr);
}
Variant ifa_exif_read_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("exif_read_data", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_exif_read_data(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_exif_read_data(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_exif_read_data(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_exif_read_data(arg0, arg1, arg2, arg3));
}
Variant i_exif_read_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_exif_read_data);
}
Variant ifa_openssl_pkcs12_export_to_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("openssl_pkcs12_export_to_file", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_openssl_pkcs12_export_to_file(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_openssl_pkcs12_export_to_file(arg0, arg1, arg2, arg3, arg4));
}
Variant i_openssl_pkcs12_export_to_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkcs12_export_to_file);
}
Variant ifa_mb_strpos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_strpos", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_strpos(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_strpos(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_strpos(arg0, arg1, arg2, arg3));
}
Variant i_mb_strpos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strpos);
}
Variant ifa_hphp_invoke_method(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("hphp_invoke_method", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_hphp_invoke_method(arg0, arg1, arg2, arg3));
}
Variant i_hphp_invoke_method(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_invoke_method);
}
Variant ifa_openssl_verify(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openssl_verify", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_verify(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_verify(arg0, arg1, arg2, arg3));
}
Variant i_openssl_verify(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_verify);
}
Variant ifa_mysql_get_client_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("mysql_get_client_info", 0, 1);
  return (x_mysql_get_client_info());
}
Variant i_mysql_get_client_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_get_client_info);
}
Variant ifa_strip_tags(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("strip_tags", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_strip_tags(arg0));
  CVarRef arg1(a1);
  return (x_strip_tags(arg0, arg1));
}
Variant i_strip_tags(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strip_tags);
}
Variant ifa_hphp_directoryiterator_rewind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_directoryiterator_rewind", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_directoryiterator_rewind(arg0), null);
}
Variant i_hphp_directoryiterator_rewind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator_rewind);
}
Variant ifa_dangling_server_proxy_old_request(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("dangling_server_proxy_old_request", 0, 1);
  return (x_dangling_server_proxy_old_request());
}
Variant i_dangling_server_proxy_old_request(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dangling_server_proxy_old_request);
}
Variant ifa_mcrypt_enc_is_block_mode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_is_block_mode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_is_block_mode(arg0));
}
Variant i_mcrypt_enc_is_block_mode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_is_block_mode);
}
Variant ifa_pixelgetquantumcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetquantumcolor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetquantumcolor(arg0));
}
Variant i_pixelgetquantumcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetquantumcolor);
}
Variant ifa_xbox_get_thread_time(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xbox_get_thread_time", 0, 1);
  return (x_xbox_get_thread_time());
}
Variant i_xbox_get_thread_time(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_get_thread_time);
}
Variant ifa_diskfreespace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("diskfreespace", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_diskfreespace(arg0));
}
Variant i_diskfreespace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_diskfreespace);
}
Variant ifa_xmlwriter_write_raw(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_write_raw", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_write_raw(arg0, arg1));
}
Variant i_xmlwriter_write_raw(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_raw);
}
Variant ifa_dom_characterdata_substring_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_characterdata_substring_data", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_characterdata_substring_data(arg0, arg1, arg2));
}
Variant i_dom_characterdata_substring_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_characterdata_substring_data);
}
Variant ifa_mcrypt_module_open(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("mcrypt_module_open", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_mcrypt_module_open(arg0, arg1, arg2, arg3));
}
Variant i_mcrypt_module_open(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_open);
}
Variant ifa_pow(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pow", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pow(arg0, arg1));
}
Variant i_pow(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pow);
}
Variant ifa_openssl_x509_checkpurpose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("openssl_x509_checkpurpose", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_openssl_x509_checkpurpose(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_x509_checkpurpose(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_openssl_x509_checkpurpose(arg0, arg1, arg2, arg3));
}
Variant i_openssl_x509_checkpurpose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_x509_checkpurpose);
}
Variant ifa_php_uname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("php_uname", 1, 1);
  if (count <= 0) return (x_php_uname());
  CVarRef arg0(a0);
  return (x_php_uname(arg0));
}
Variant i_php_uname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_php_uname);
}
Variant ifa_header(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("header", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_header(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (x_header(arg0, arg1), null);
  CVarRef arg2(a2);
  return (x_header(arg0, arg1, arg2), null);
}
Variant i_header(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_header);
}
Variant ifa_socket_bind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("socket_bind", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_socket_bind(arg0, arg1));
  CVarRef arg2(a2);
  return (x_socket_bind(arg0, arg1, arg2));
}
Variant i_socket_bind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_bind);
}
Variant ifa_magickgetimagetype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagetype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagetype(arg0));
}
Variant i_magickgetimagetype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagetype);
}
Variant ifa_asort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("asort", count, 1, 3, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (x_asort(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_asort(arg0, arg1));
  CVarRef arg2(a2);
  return (x_asort(arg0, arg1, arg2));
}
Variant i_asort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_asort);
}
Variant ifa_imagesetbrush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagesetbrush", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagesetbrush(arg0, arg1));
}
Variant i_imagesetbrush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagesetbrush);
}
Variant ifa_hphp_unpack_continuation(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_unpack_continuation", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_unpack_continuation(arg0), null);
}
Variant i_hphp_unpack_continuation(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_unpack_continuation);
}
Variant ifa_xhprof_network_enable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xhprof_network_enable", 0, 1);
  return (x_xhprof_network_enable(), null);
}
Variant i_xhprof_network_enable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_network_enable);
}
Variant ifa_xmlwriter_start_attribute_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("xmlwriter_start_attribute_ns", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_xmlwriter_start_attribute_ns(arg0, arg1, arg2, arg3));
}
Variant i_xmlwriter_start_attribute_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_attribute_ns);
}
Variant ifa_xmlwriter_start_dtd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("xmlwriter_start_dtd", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_xmlwriter_start_dtd(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_xmlwriter_start_dtd(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_xmlwriter_start_dtd(arg0, arg1, arg2, arg3));
}
Variant i_xmlwriter_start_dtd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_dtd);
}
Variant ifa_getallheaders(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getallheaders", 0, 1);
  return (x_getallheaders());
}
Variant i_getallheaders(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getallheaders);
}
Variant ifa_gzdecode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gzdecode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gzdecode(arg0));
}
Variant i_gzdecode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzdecode);
}
Variant ifa_gzgetss(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("gzgetss", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzgetss(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_gzgetss(arg0, arg1));
  CVarRef arg2(a2);
  return (x_gzgetss(arg0, arg1, arg2));
}
Variant i_gzgetss(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzgetss);
}
Variant ifa_magickqueryformats(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickqueryformats", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickqueryformats(arg0));
}
Variant i_magickqueryformats(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickqueryformats);
}
Variant ifa_mysql_insert_id(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_insert_id", 1, 1);
  if (count <= 0) return (x_mysql_insert_id());
  CVarRef arg0(a0);
  return (x_mysql_insert_id(arg0));
}
Variant i_mysql_insert_id(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_insert_id);
}
Variant ifa_magickunsharpmaskimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 5)) return throw_wrong_arguments("magickunsharpmaskimage", count, 5, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  if (count <= 5) return (x_magickunsharpmaskimage(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_magickunsharpmaskimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickunsharpmaskimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickunsharpmaskimage);
}
Variant ifa_uksort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("uksort", count, 2, 2, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  return (x_uksort(arg0, arg1));
}
Variant i_uksort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_uksort);
}
Variant ifa_dns_check_record(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("dns_check_record", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_dns_check_record(arg0));
  CVarRef arg1(a1);
  return (x_dns_check_record(arg0, arg1));
}
Variant i_dns_check_record(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dns_check_record);
}
Variant ifa_natsort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("natsort", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_natsort(arg0));
}
Variant i_natsort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_natsort);
}
Variant ifa_phpinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("phpinfo", 1, 1);
  if (count <= 0) return (x_phpinfo());
  CVarRef arg0(a0);
  return (x_phpinfo(arg0));
}
Variant i_phpinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_phpinfo);
}
Variant ifa_date_create(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("date_create", 2, 1);
  if (count <= 0) return (x_date_create());
  CVarRef arg0(a0);
  if (count <= 1) return (x_date_create(arg0));
  CVarRef arg1(a1);
  return (x_date_create(arg0, arg1));
}
Variant i_date_create(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_create);
}
Variant ifa_serialize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("serialize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_serialize(arg0));
}
Variant i_serialize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_serialize);
}
Variant ifa_dom_xpath_evaluate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("dom_xpath_evaluate", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_dom_xpath_evaluate(arg0, arg1));
  CVarRef arg2(a2);
  return (x_dom_xpath_evaluate(arg0, arg1, arg2));
}
Variant i_dom_xpath_evaluate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_xpath_evaluate);
}
Variant ifa_magickcyclecolormapimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickcyclecolormapimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickcyclecolormapimage(arg0, arg1));
}
Variant i_magickcyclecolormapimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcyclecolormapimage);
}
Variant ifa_magickgetimagemimetype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagemimetype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagemimetype(arg0));
}
Variant i_magickgetimagemimetype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagemimetype);
}
Variant ifa_socket_set_nonblock(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("socket_set_nonblock", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_socket_set_nonblock(arg0));
}
Variant i_socket_set_nonblock(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_set_nonblock);
}
Variant ifa_magickcommentimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickcommentimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickcommentimage(arg0, arg1));
}
Variant i_magickcommentimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcommentimage);
}
Variant ifa_wordwrap(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("wordwrap", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_wordwrap(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_wordwrap(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_wordwrap(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_wordwrap(arg0, arg1, arg2, arg3));
}
Variant i_wordwrap(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_wordwrap);
}
Variant ifa_pixelgetredquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetredquantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetredquantum(arg0));
}
Variant i_pixelgetredquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetredquantum);
}
Variant ifa_get_extension_funcs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_extension_funcs", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_get_extension_funcs(arg0));
}
Variant i_get_extension_funcs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_extension_funcs);
}
Variant ifa_xbox_get_thread_timeout(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xbox_get_thread_timeout", 0, 1);
  return (x_xbox_get_thread_timeout());
}
Variant i_xbox_get_thread_timeout(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_get_thread_timeout);
}
Variant ifa_session_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("session_decode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_session_decode(arg0));
}
Variant i_session_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_decode);
}
Variant ifa_posix_getgroups(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getgroups", 0, 1);
  return (x_posix_getgroups());
}
Variant i_posix_getgroups(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getgroups);
}
Variant ifa_drawsetstrokealpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokealpha", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokealpha(arg0, arg1), null);
}
Variant i_drawsetstrokealpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokealpha);
}
Variant ifa_openssl_csr_export(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("openssl_csr_export", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_openssl_csr_export(arg0, arg1));
  CVarRef arg2(a2);
  return (x_openssl_csr_export(arg0, arg1, arg2));
}
Variant i_openssl_csr_export(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_csr_export);
}
Variant ifa_shm_has_var(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("shm_has_var", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_shm_has_var(arg0, arg1));
}
Variant i_shm_has_var(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shm_has_var);
}
Variant ifa_defined(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("defined", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_defined(arg0));
}
Variant i_defined(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_defined);
}
Variant ifa_ldap_parse_result(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("ldap_parse_result", count, 3, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_ldap_parse_result(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  if (count <= 4) return (x_ldap_parse_result(arg0, arg1, arg2, arg3));
  VRefParam arg4(vref(a4));
  if (count <= 5) return (x_ldap_parse_result(arg0, arg1, arg2, arg3, arg4));
  VRefParam arg5(vref(a5));
  return (x_ldap_parse_result(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_ldap_parse_result(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_parse_result);
}
Variant ifa_pushdrawingwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pushdrawingwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pushdrawingwand(arg0), null);
}
Variant i_pushdrawingwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pushdrawingwand);
}
Variant ifa_drawsetstrokemiterlimit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokemiterlimit", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokemiterlimit(arg0, arg1), null);
}
Variant i_drawsetstrokemiterlimit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokemiterlimit);
}
Variant ifa_magicktintimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicktintimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicktintimage(arg0, arg1, arg2));
}
Variant i_magicktintimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicktintimage);
}
Variant ifa_intl_is_failure(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("intl_is_failure", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_intl_is_failure(arg0));
}
Variant i_intl_is_failure(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_intl_is_failure);
}
Variant ifa_socket_getpeername(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("socket_getpeername", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_socket_getpeername(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_socket_getpeername(arg0, arg1, arg2));
}
Variant i_socket_getpeername(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_getpeername);
}
Variant ifa_sncompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sncompress", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sncompress(arg0));
}
Variant i_sncompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sncompress);
}
Variant ifa_xmlwriter_end_dtd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_dtd", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_dtd(arg0));
}
Variant i_xmlwriter_end_dtd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_dtd);
}
Variant ifa_magickgammaimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("magickgammaimage", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_magickgammaimage(arg0, arg1));
  CVarRef arg2(a2);
  return (x_magickgammaimage(arg0, arg1, arg2));
}
Variant i_magickgammaimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgammaimage);
}
Variant ifa_mcrypt_module_get_algo_key_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_module_get_algo_key_size", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_module_get_algo_key_size(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_module_get_algo_key_size(arg0, arg1));
}
Variant i_mcrypt_module_get_algo_key_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_get_algo_key_size);
}
Variant ifa_array_count_values(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("array_count_values", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_array_count_values(arg0));
}
Variant i_array_count_values(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_count_values);
}
Variant ifa_imagecreatefromjpeg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefromjpeg", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefromjpeg(arg0));
}
Variant i_imagecreatefromjpeg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromjpeg);
}
Variant ifa_func_get_args(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("func_get_args", 0, 1);
  return (x_func_get_args());
}
Variant i_func_get_args(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_func_get_args);
}
Variant ifa_drawgetfontstretch(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfontstretch", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfontstretch(arg0));
}
Variant i_drawgetfontstretch(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfontstretch);
}
Variant ifa_hphp_splfileinfo_setfileclass(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileinfo_setfileclass", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileinfo_setfileclass(arg0, arg1), null);
}
Variant i_hphp_splfileinfo_setfileclass(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_setfileclass);
}
Variant ifa_socket_get_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("socket_get_status", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_socket_get_status(arg0));
}
Variant i_socket_get_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_get_status);
}
Variant ifa_magickgetimagerenderingintent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagerenderingintent", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagerenderingintent(arg0));
}
Variant i_magickgetimagerenderingintent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagerenderingintent);
}
Variant ifa_mcrypt_cfb(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("mcrypt_cfb", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_mcrypt_cfb(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mcrypt_cfb(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mcrypt_cfb(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_cfb);
}
Variant ifa_ini_restore(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ini_restore", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ini_restore(arg0), null);
}
Variant i_ini_restore(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ini_restore);
}
Variant ifa_dom_document_import_node(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("dom_document_import_node", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_dom_document_import_node(arg0, arg1));
  CVarRef arg2(a2);
  return (x_dom_document_import_node(arg0, arg1, arg2));
}
Variant i_dom_document_import_node(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_import_node);
}
Variant ifa_posix_ttyname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_ttyname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_ttyname(arg0));
}
Variant i_posix_ttyname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_ttyname);
}
Variant ifa_hphp_splfileobject_fgetcsv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("hphp_splfileobject_fgetcsv", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_hphp_splfileobject_fgetcsv(arg0, arg1, arg2, arg3));
}
Variant i_hphp_splfileobject_fgetcsv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fgetcsv);
}
Variant ifa_escapeshellarg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("escapeshellarg", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_escapeshellarg(arg0));
}
Variant i_escapeshellarg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_escapeshellarg);
}
Variant ifa_drawline(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("drawline", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_drawline(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_drawline(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawline);
}
Variant ifa_ldap_list(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("ldap_list", count, 3, 8, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_ldap_list(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_ldap_list(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_ldap_list(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_ldap_list(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_ldap_list(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 8)) return throw_wrong_arguments("ldap_list", count, 3, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_ldap_list(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_ldap_list(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_ldap_list(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_ldap_list(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 7) return (x_ldap_list(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_ldap_list(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_dom_element_get_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_element_get_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_element_get_attribute(arg0, arg1));
}
Variant i_dom_element_get_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_get_attribute);
}
Variant ifa_imageconvolution(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imageconvolution", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imageconvolution(arg0, arg1, arg2, arg3));
}
Variant i_imageconvolution(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imageconvolution);
}
Variant ifa_magickmosaicimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickmosaicimages", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickmosaicimages(arg0));
}
Variant i_magickmosaicimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmosaicimages);
}
Variant ifa_get_meta_tags(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("get_meta_tags", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_get_meta_tags(arg0));
  CVarRef arg1(a1);
  return (x_get_meta_tags(arg0, arg1));
}
Variant i_get_meta_tags(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_meta_tags);
}
Variant ifa_ldap_unbind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ldap_unbind", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ldap_unbind(arg0));
}
Variant i_ldap_unbind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_unbind);
}
Variant ifa_magickdescribeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickdescribeimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickdescribeimage(arg0));
}
Variant i_magickdescribeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickdescribeimage);
}
Variant ifa_hash(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("hash", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_hash(arg0, arg1));
  CVarRef arg2(a2);
  return (x_hash(arg0, arg1, arg2));
}
Variant i_hash(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash);
}
Variant ifa_timezone_abbreviations_list(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("timezone_abbreviations_list", 0, 1);
  return (x_timezone_abbreviations_list());
}
Variant i_timezone_abbreviations_list(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_timezone_abbreviations_list);
}
Variant ifa_iconv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("iconv", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_iconv(arg0, arg1, arg2));
}
Variant i_iconv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv);
}
Variant ifa_sizeof(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("sizeof", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_sizeof(arg0));
  CVarRef arg1(a1);
  return (x_sizeof(arg0, arg1));
}
Variant i_sizeof(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sizeof);
}
Variant ifa_mcrypt_enc_is_block_algorithm(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_is_block_algorithm", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_is_block_algorithm(arg0));
}
Variant i_mcrypt_enc_is_block_algorithm(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_is_block_algorithm);
}
Variant ifa_xbox_schedule_thread_reset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xbox_schedule_thread_reset", 0, 1);
  return (x_xbox_schedule_thread_reset(), null);
}
Variant i_xbox_schedule_thread_reset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xbox_schedule_thread_reset);
}
Variant ifa_gettype(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("gettype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_gettype(arg0));
}
Variant i_gettype(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gettype);
}
Variant ifa_strnatcasecmp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strnatcasecmp", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strnatcasecmp(arg0, arg1));
}
Variant i_strnatcasecmp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strnatcasecmp);
}
Variant ifa_imagecreatefromxbm(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefromxbm", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefromxbm(arg0));
}
Variant i_imagecreatefromxbm(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromxbm);
}
Variant ifa_pcntl_alarm(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pcntl_alarm", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pcntl_alarm(arg0));
}
Variant i_pcntl_alarm(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_alarm);
}
Variant ifa_is_object(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_object", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_object(arg0));
}
Variant i_is_object(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_object);
}
Variant ifa_xml_set_start_namespace_decl_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_start_namespace_decl_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_set_start_namespace_decl_handler(arg0, arg1));
}
Variant i_xml_set_start_namespace_decl_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_start_namespace_decl_handler);
}
Variant ifa_array_diff_assoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_diff_assoc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_diff_assoc(count, arg0, arg1, p));
}
Variant i_array_diff_assoc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_diff_assoc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_diff_assoc(count, arg0, arg1, p));
  }
}
Variant ifa_memcache_get_version(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("memcache_get_version", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_memcache_get_version(arg0));
}
Variant i_memcache_get_version(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_get_version);
}
Variant ifa_ucfirst(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ucfirst", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ucfirst(arg0));
}
Variant i_ucfirst(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ucfirst);
}
Variant ifa_hphp_recursivedirectoryiterator_getsubpathname(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursivedirectoryiterator_getsubpathname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursivedirectoryiterator_getsubpathname(arg0));
}
Variant i_hphp_recursivedirectoryiterator_getsubpathname(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursivedirectoryiterator_getsubpathname);
}
Variant ifa_magickgetimagesignature(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagesignature", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagesignature(arg0));
}
Variant i_magickgetimagesignature(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagesignature);
}
Variant ifa_set_file_buffer(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("set_file_buffer", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_set_file_buffer(arg0, arg1));
}
Variant i_set_file_buffer(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_set_file_buffer);
}
Variant ifa_forward_static_call(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("forward_static_call", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_forward_static_call(count, arg0, p));
}
Variant i_forward_static_call(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("forward_static_call", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_forward_static_call(count, arg0, p));
  }
}
Variant ifa_ctype_cntrl(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_cntrl", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_cntrl(arg0));
}
Variant i_ctype_cntrl(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_cntrl);
}
Variant ifa_hphp_splfileobject_setmaxlinelen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileobject_setmaxlinelen", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileobject_setmaxlinelen(arg0, arg1), null);
}
Variant i_hphp_splfileobject_setmaxlinelen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_setmaxlinelen);
}
Variant ifa_ldap_err2str(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ldap_err2str", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ldap_err2str(arg0));
}
Variant i_ldap_err2str(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_err2str);
}
Variant ifa_xhprof_frame_end(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("xhprof_frame_end", 0, 1);
  return (x_xhprof_frame_end(), null);
}
Variant i_xhprof_frame_end(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_frame_end);
}
Variant ifa_magickqueryconfigureoptions(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickqueryconfigureoptions", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickqueryconfigureoptions(arg0));
}
Variant i_magickqueryconfigureoptions(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickqueryconfigureoptions);
}
Variant ifa_imap_lsub(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_lsub", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_lsub(arg0, arg1, arg2));
}
Variant i_imap_lsub(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_lsub);
}
Variant ifa_date_modify(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("date_modify", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_date_modify(arg0, arg1), null);
}
Variant i_date_modify(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_modify);
}
Variant ifa_base_convert(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("base_convert", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_base_convert(arg0, arg1, arg2));
}
Variant i_base_convert(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_base_convert);
}
Variant ifa_ldap_bind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("ldap_bind", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_ldap_bind(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_ldap_bind(arg0, arg1));
  CVarRef arg2(a2);
  return (x_ldap_bind(arg0, arg1, arg2));
}
Variant i_ldap_bind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_bind);
}
Variant ifa_dom_document_create_processing_instruction(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("dom_document_create_processing_instruction", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_dom_document_create_processing_instruction(arg0, arg1));
  CVarRef arg2(a2);
  return (x_dom_document_create_processing_instruction(arg0, arg1, arg2));
}
Variant i_dom_document_create_processing_instruction(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_processing_instruction);
}
Variant ifa_http_build_query(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("http_build_query", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_http_build_query(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_http_build_query(arg0, arg1));
  CVarRef arg2(a2);
  return (x_http_build_query(arg0, arg1, arg2));
}
Variant i_http_build_query(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_http_build_query);
}
Variant ifa_session_start(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("session_start", 0, 1);
  return (x_session_start());
}
Variant i_session_start(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_start);
}
Variant ifa_is_link(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_link", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_link(arg0));
}
Variant i_is_link(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_link);
}
Variant ifa_ldap_start_tls(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ldap_start_tls", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ldap_start_tls(arg0));
}
Variant i_ldap_start_tls(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_start_tls);
}
Variant ifa_array_multisort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_multisort", count+1, 1);
  VRefParam arg0(vref(a0));
  Array p;
  if (count >= 2) p.append(ref(a1));
  if (count >= 3) p.append(ref(a2));
  if (count >= 4) p.append(ref(a3));
  if (count >= 5) p.append(ref(a4));
  if (count >= 6) p.append(ref(a5));
  return (x_array_multisort(count, arg0, p));
}
Variant i_array_multisort(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_multisort", count+1, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    VRefParam arg0(vref(ad->getValueRef(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_array_multisort(count, arg0, p));
  }
}
Variant ifa_mb_strripos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_strripos", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_strripos(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_strripos(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_strripos(arg0, arg1, arg2, arg3));
}
Variant i_mb_strripos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strripos);
}
Variant ifa_ldap_set_rebind_proc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_set_rebind_proc", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_set_rebind_proc(arg0, arg1));
}
Variant i_ldap_set_rebind_proc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_set_rebind_proc);
}
Variant ifa_fileowner(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fileowner", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fileowner(arg0));
}
Variant i_fileowner(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fileowner);
}
Variant ifa_apd_echo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("apd_echo", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_apd_echo(arg0));
}
Variant i_apd_echo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apd_echo);
}
Variant ifa_extract(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("extract", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_extract(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_extract(arg0, arg1));
  CVarRef arg2(a2);
  return (x_extract(arg0, arg1, arg2));
}
Variant i_extract(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_extract);
}
Variant ifa_ob_end_flush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_end_flush", 0, 1);
  return (x_ob_end_flush());
}
Variant i_ob_end_flush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_end_flush);
}
Variant ifa_iterator_count(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("iterator_count", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_iterator_count(arg0));
}
Variant i_iterator_count(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iterator_count);
}
Variant ifa_xmlwriter_text(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_text", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_text(arg0, arg1));
}
Variant i_xmlwriter_text(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_text);
}
Variant ifa_fb_lazy_realpath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_lazy_realpath", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_lazy_realpath(arg0));
}
Variant i_fb_lazy_realpath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_lazy_realpath);
}
Variant ifa_magickgetimageblueprimary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageblueprimary", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageblueprimary(arg0));
}
Variant i_magickgetimageblueprimary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageblueprimary);
}
Variant ifa_magickflattenimages(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickflattenimages", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickflattenimages(arg0));
}
Variant i_magickflattenimages(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickflattenimages);
}
Variant ifa_get_browser(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("get_browser", 2, 1);
  if (count <= 0) return (x_get_browser());
  CVarRef arg0(a0);
  if (count <= 1) return (x_get_browser(arg0));
  CVarRef arg1(a1);
  return (x_get_browser(arg0, arg1));
}
Variant i_get_browser(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_browser);
}
Variant ifa_gzcompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gzcompress", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzcompress(arg0));
  CVarRef arg1(a1);
  return (x_gzcompress(arg0, arg1));
}
Variant i_gzcompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzcompress);
}
Variant ifa_dom_document_get_elements_by_tag_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_get_elements_by_tag_name", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_get_elements_by_tag_name(arg0, arg1));
}
Variant i_dom_document_get_elements_by_tag_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_get_elements_by_tag_name);
}
Variant ifa_get_loaded_extensions(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("get_loaded_extensions", 1, 1);
  if (count <= 0) return (x_get_loaded_extensions());
  CVarRef arg0(a0);
  return (x_get_loaded_extensions(arg0));
}
Variant i_get_loaded_extensions(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_loaded_extensions);
}
Variant ifa_imap_timeout(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imap_timeout", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imap_timeout(arg0));
  CVarRef arg1(a1);
  return (x_imap_timeout(arg0, arg1));
}
Variant i_imap_timeout(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_timeout);
}
Variant ifa_restore_error_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("restore_error_handler", 0, 1);
  return (x_restore_error_handler());
}
Variant i_restore_error_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_restore_error_handler);
}
Variant ifa_pcntl_getpriority(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("pcntl_getpriority", 2, 1);
  if (count <= 0) return (x_pcntl_getpriority());
  CVarRef arg0(a0);
  if (count <= 1) return (x_pcntl_getpriority(arg0));
  CVarRef arg1(a1);
  return (x_pcntl_getpriority(arg0, arg1));
}
Variant i_pcntl_getpriority(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_getpriority);
}
Variant ifa_openlog(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("openlog", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_openlog(arg0, arg1, arg2));
}
Variant i_openlog(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openlog);
}
Variant ifa_inet_pton(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("inet_pton", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_inet_pton(arg0));
}
Variant i_inet_pton(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_inet_pton);
}
Variant ifa_pagelet_server_flush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("pagelet_server_flush", 0, 1);
  return (x_pagelet_server_flush(), null);
}
Variant i_pagelet_server_flush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pagelet_server_flush);
}
Variant ifa_mb_strlen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mb_strlen", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_strlen(arg0));
  CVarRef arg1(a1);
  return (x_mb_strlen(arg0, arg1));
}
Variant i_mb_strlen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_strlen);
}
Variant ifa_magickquantizeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickquantizeimage", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickquantizeimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickquantizeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickquantizeimage);
}
Variant ifa_hphp_splfileinfo_setinfoclass(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_splfileinfo_setinfoclass", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_splfileinfo_setinfoclass(arg0, arg1), null);
}
Variant i_hphp_splfileinfo_setinfoclass(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_setinfoclass);
}
Variant ifa_spl_autoload_functions(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("spl_autoload_functions", 0, 1);
  return (x_spl_autoload_functions());
}
Variant i_spl_autoload_functions(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spl_autoload_functions);
}
Variant ifa_thrift_protocol_write_compact(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("thrift_protocol_write_compact", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_thrift_protocol_write_compact(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_thrift_protocol_write_compact(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_thrift_protocol_write_compact);
}
Variant ifa_ldap_next_reference(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_next_reference", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_next_reference(arg0, arg1));
}
Variant i_ldap_next_reference(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_next_reference);
}
Variant ifa_is_integer(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_integer", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_integer(arg0));
}
Variant i_is_integer(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_integer);
}
Variant ifa_addcslashes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("addcslashes", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_addcslashes(arg0, arg1));
}
Variant i_addcslashes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_addcslashes);
}
Variant ifa_pixelgetcolorcount(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetcolorcount", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetcolorcount(arg0));
}
Variant i_pixelgetcolorcount(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetcolorcount);
}
Variant ifa_xmlwriter_output_memory(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("xmlwriter_output_memory", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_xmlwriter_output_memory(arg0));
  CVarRef arg1(a1);
  return (x_xmlwriter_output_memory(arg0, arg1));
}
Variant i_xmlwriter_output_memory(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_output_memory);
}
Variant ifa_call_user_func_serialized(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("call_user_func_serialized", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_call_user_func_serialized(arg0));
}
Variant i_call_user_func_serialized(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_call_user_func_serialized);
}
Variant ifa_magickgetimagemattecolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagemattecolor", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagemattecolor(arg0));
}
Variant i_magickgetimagemattecolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagemattecolor);
}
Variant ifa_posix_getpgrp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getpgrp", 0, 1);
  return (x_posix_getpgrp());
}
Variant i_posix_getpgrp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getpgrp);
}
Variant ifa_socket_create(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("socket_create", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_socket_create(arg0, arg1, arg2));
}
Variant i_socket_create(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_create);
}
Variant ifa_hphpd_get_client(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("hphpd_get_client", 1, 1);
  if (count <= 0) return (x_hphpd_get_client());
  CVarRef arg0(a0);
  return (x_hphpd_get_client(arg0));
}
Variant i_hphpd_get_client(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphpd_get_client);
}
Variant ifa_magicksetimageinterlacescheme(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimageinterlacescheme", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimageinterlacescheme(arg0, arg1));
}
Variant i_magicksetimageinterlacescheme(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageinterlacescheme);
}
Variant ifa_debug_backtrace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("debug_backtrace", 1, 1);
  if (count <= 0) return (x_debug_backtrace());
  CVarRef arg0(a0);
  return (x_debug_backtrace(arg0));
}
Variant i_debug_backtrace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_debug_backtrace);
}
Variant ifa_stream_set_timeout(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("stream_set_timeout", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_set_timeout(arg0, arg1));
  CVarRef arg2(a2);
  return (x_stream_set_timeout(arg0, arg1, arg2));
}
Variant i_stream_set_timeout(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_set_timeout);
}
Variant ifa_highlight_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("highlight_string", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_highlight_string(arg0));
  CVarRef arg1(a1);
  return (x_highlight_string(arg0, arg1));
}
Variant i_highlight_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_highlight_string);
}
Variant ifa_ldap_modify(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_modify", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_modify(arg0, arg1, arg2));
}
Variant i_ldap_modify(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_modify);
}
Variant ifa_imap_rfc822_write_address(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_rfc822_write_address", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_rfc822_write_address(arg0, arg1, arg2));
}
Variant i_imap_rfc822_write_address(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_rfc822_write_address);
}
Variant ifa_memcache_setoptimeout(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("memcache_setoptimeout", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_memcache_setoptimeout(arg0, arg1));
}
Variant i_memcache_setoptimeout(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_setoptimeout);
}
Variant ifa_pixelresetiterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelresetiterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelresetiterator(arg0), null);
}
Variant i_pixelresetiterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelresetiterator);
}
Variant ifa_magickreadimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickreadimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickreadimage(arg0, arg1));
}
Variant i_magickreadimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickreadimage);
}
Variant ifa_ob_get_contents(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ob_get_contents", 0, 1);
  return (x_ob_get_contents());
}
Variant i_ob_get_contents(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_get_contents);
}
Variant ifa_drawsetstrokelinecap(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokelinecap", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokelinecap(arg0, arg1), null);
}
Variant i_drawsetstrokelinecap(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokelinecap);
}
Variant ifa_strlen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("strlen", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_strlen(arg0));
}
Variant i_strlen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strlen);
}
Variant ifa_drawpushclippath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawpushclippath", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawpushclippath(arg0, arg1), null);
}
Variant i_drawpushclippath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpushclippath);
}
Variant ifa_call_user_func(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("call_user_func", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_call_user_func(count, arg0, p));
}
Variant i_call_user_func(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("call_user_func", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_call_user_func(count, arg0, p));
  }
}
Variant ifa_dl(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dl", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dl(arg0));
}
Variant i_dl(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dl);
}
Variant ifa_cpu_get_count(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("cpu_get_count", 0, 1);
  return (x_cpu_get_count());
}
Variant i_cpu_get_count(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_cpu_get_count);
}
Variant ifa_dom_document_save_html_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_save_html_file", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_save_html_file(arg0, arg1));
}
Variant i_dom_document_save_html_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_save_html_file);
}
Variant ifa_posix_strerror(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_strerror", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_strerror(arg0));
}
Variant i_posix_strerror(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_strerror);
}
Variant ifa_magickreducenoiseimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickreducenoiseimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickreducenoiseimage(arg0, arg1));
}
Variant i_magickreducenoiseimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickreducenoiseimage);
}
Variant ifa_drawgetfillalpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfillalpha", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfillalpha(arg0));
}
Variant i_drawgetfillalpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfillalpha);
}
Variant ifa_mysql_unbuffered_query(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_unbuffered_query", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_unbuffered_query(arg0));
  CVarRef arg1(a1);
  return (x_mysql_unbuffered_query(arg0, arg1));
}
Variant i_mysql_unbuffered_query(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_unbuffered_query);
}
Variant ifa_magickgetimageiterations(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageiterations", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageiterations(arg0));
}
Variant i_magickgetimageiterations(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageiterations);
}
Variant ifa_timezone_name_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("timezone_name_get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_timezone_name_get(arg0));
}
Variant i_timezone_name_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_timezone_name_get);
}
Variant ifa_fb_crossall_query(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("fb_crossall_query", count, 1, 6, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_fb_crossall_query(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_fb_crossall_query(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_fb_crossall_query(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_fb_crossall_query(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_fb_crossall_query(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_fb_crossall_query(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_fb_crossall_query(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_crossall_query);
}
Variant ifa_magickdrawimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickdrawimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickdrawimage(arg0, arg1));
}
Variant i_magickdrawimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickdrawimage);
}
Variant ifa_date(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("date", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_date(arg0));
  CVarRef arg1(a1);
  return (x_date(arg0, arg1));
}
Variant i_date(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date);
}
Variant ifa_magickchopimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("magickchopimage", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_magickchopimage(arg0, arg1, arg2, arg3, arg4));
}
Variant i_magickchopimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickchopimage);
}
Variant ifa_mcrypt_module_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_module_close", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_module_close(arg0));
}
Variant i_mcrypt_module_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_close);
}
Variant ifa_pixelgetindex(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetindex", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetindex(arg0));
}
Variant i_pixelgetindex(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetindex);
}
Variant ifa_debug_print_backtrace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("debug_print_backtrace", 0, 1);
  return (x_debug_print_backtrace(), null);
}
Variant i_debug_print_backtrace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_debug_print_backtrace);
}
Variant ifa_str_pad(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("str_pad", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_str_pad(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_str_pad(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_str_pad(arg0, arg1, arg2, arg3));
}
Variant i_str_pad(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_str_pad);
}
Variant ifa_mb_check_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("mb_check_encoding", 2, 1);
  if (count <= 0) return (x_mb_check_encoding());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_check_encoding(arg0));
  CVarRef arg1(a1);
  return (x_mb_check_encoding(arg0, arg1));
}
Variant i_mb_check_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_check_encoding);
}
Variant ifa_magickremoveimageprofiles(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickremoveimageprofiles", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickremoveimageprofiles(arg0));
}
Variant i_magickremoveimageprofiles(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickremoveimageprofiles);
}
Variant ifa_magickborderimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("magickborderimage", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_magickborderimage(arg0, arg1, arg2, arg3));
}
Variant i_magickborderimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickborderimage);
}
Variant ifa_hphp_clear_unflushed(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_clear_unflushed", 0, 1);
  return (x_hphp_clear_unflushed(), null);
}
Variant i_hphp_clear_unflushed(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_clear_unflushed);
}
Variant ifa_hphp_get_this(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_get_this", 0, 1);
  return (x_hphp_get_this());
}
Variant i_hphp_get_this(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_this);
}
Variant ifa_array_udiff(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_udiff", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_udiff(count, arg0, arg1, arg2, p));
}
Variant i_array_udiff(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_udiff", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_array_udiff(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_write_hdf_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("write_hdf_file", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_write_hdf_file(arg0, arg1));
}
Variant i_write_hdf_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_write_hdf_file);
}
Variant ifa_array_uintersect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_uintersect", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_uintersect(count, arg0, arg1, arg2, p));
}
Variant i_array_uintersect(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_uintersect", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_array_uintersect(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_syslog(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("syslog", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_syslog(arg0, arg1));
}
Variant i_syslog(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_syslog);
}
Variant ifa_vsprintf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("vsprintf", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_vsprintf(arg0, arg1));
}
Variant i_vsprintf(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_vsprintf);
}
Variant ifa_pos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pos", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_pos(arg0));
}
Variant i_pos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pos);
}
Variant ifa_parse_url(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("parse_url", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_parse_url(arg0));
  CVarRef arg1(a1);
  return (x_parse_url(arg0, arg1));
}
Variant i_parse_url(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_parse_url);
}
Variant ifa_error_get_last(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("error_get_last", 0, 1);
  return (x_error_get_last());
}
Variant i_error_get_last(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_error_get_last);
}
Variant ifa_mcrypt_generic_end(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_generic_end", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_generic_end(arg0));
}
Variant i_mcrypt_generic_end(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_generic_end);
}
Variant ifa_apc_inc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("apc_inc", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_inc(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_inc(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_apc_inc(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_apc_inc(arg0, arg1, arg2, arg3));
}
Variant i_apc_inc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_inc);
}
Variant ifa_gmmktime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count <= 0) return (x_gmmktime());
  CVarRef arg0(a0);
  if (count <= 1) return (x_gmmktime(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_gmmktime(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_gmmktime(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_gmmktime(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_gmmktime(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_gmmktime(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_gmmktime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gmmktime);
}
Variant ifa_drawpathclose(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawpathclose", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawpathclose(arg0), null);
}
Variant i_drawpathclose(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathclose);
}
Variant ifa_mysql_errno(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_errno", 1, 1);
  if (count <= 0) return (x_mysql_errno());
  CVarRef arg0(a0);
  return (x_mysql_errno(arg0));
}
Variant i_mysql_errno(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_errno);
}
Variant ifa_drawsetfillopacity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfillopacity", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfillopacity(arg0, arg1), null);
}
Variant i_drawsetfillopacity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfillopacity);
}
Variant ifa_array_diff_uassoc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_diff_uassoc", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_diff_uassoc(count, arg0, arg1, arg2, p));
}
Variant i_array_diff_uassoc(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_diff_uassoc", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_array_diff_uassoc(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_iconv_mime_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("iconv_mime_decode", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_iconv_mime_decode(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_iconv_mime_decode(arg0, arg1));
  CVarRef arg2(a2);
  return (x_iconv_mime_decode(arg0, arg1, arg2));
}
Variant i_iconv_mime_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_mime_decode);
}
Variant ifa_pdo_drivers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("pdo_drivers", 0, 1);
  return (x_pdo_drivers());
}
Variant i_pdo_drivers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pdo_drivers);
}
Variant ifa_bzopen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("bzopen", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_bzopen(arg0, arg1));
}
Variant i_bzopen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzopen);
}
Variant ifa_spl_classes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("spl_classes", 0, 1);
  return (x_spl_classes());
}
Variant i_spl_classes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spl_classes);
}
Variant ifa_xmlwriter_start_dtd_element(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_start_dtd_element", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_start_dtd_element(arg0, arg1));
}
Variant i_xmlwriter_start_dtd_element(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_dtd_element);
}
Variant ifa_idate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("idate", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_idate(arg0));
  CVarRef arg1(a1);
  return (x_idate(arg0, arg1));
}
Variant i_idate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_idate);
}
Variant ifa_magickpainttransparentimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("magickpainttransparentimage", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_magickpainttransparentimage(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickpainttransparentimage(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickpainttransparentimage(arg0, arg1, arg2, arg3));
}
Variant i_magickpainttransparentimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickpainttransparentimage);
}
Variant ifa_dom_text_split_text(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_text_split_text", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_text_split_text(arg0, arg1));
}
Variant i_dom_text_split_text(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_text_split_text);
}
Variant ifa_ctype_space(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_space", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_space(arg0));
}
Variant i_ctype_space(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_space);
}
Variant ifa_imageinterlace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imageinterlace", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imageinterlace(arg0));
  CVarRef arg1(a1);
  return (x_imageinterlace(arg0, arg1));
}
Variant i_imageinterlace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imageinterlace);
}
Variant ifa_strftime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("strftime", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_strftime(arg0));
  CVarRef arg1(a1);
  return (x_strftime(arg0, arg1));
}
Variant i_strftime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strftime);
}
Variant ifa_mysql_field_seek(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_field_seek", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_field_seek(arg0));
  CVarRef arg1(a1);
  return (x_mysql_field_seek(arg0, arg1));
}
Variant i_mysql_field_seek(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_field_seek);
}
Variant ifa_ignore_user_abort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("ignore_user_abort", 1, 1);
  if (count <= 0) return (x_ignore_user_abort());
  CVarRef arg0(a0);
  return (x_ignore_user_abort(arg0));
}
Variant i_ignore_user_abort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ignore_user_abort);
}
Variant ifa_hphp_recursiveiteratoriterator_current(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursiveiteratoriterator_current", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursiveiteratoriterator_current(arg0));
}
Variant i_hphp_recursiveiteratoriterator_current(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursiveiteratoriterator_current);
}
Variant ifa_bzcompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("bzcompress", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_bzcompress(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_bzcompress(arg0, arg1));
  CVarRef arg2(a2);
  return (x_bzcompress(arg0, arg1, arg2));
}
Variant i_bzcompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bzcompress);
}
Variant ifa_array_merge_recursive(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_merge_recursive", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_merge_recursive(count, arg0, p));
}
Variant i_array_merge_recursive(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_merge_recursive", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_array_merge_recursive(count, arg0, p));
  }
}
Variant ifa_xmlwriter_write_element_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("xmlwriter_write_element_ns", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_xmlwriter_write_element_ns(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_xmlwriter_write_element_ns(arg0, arg1, arg2, arg3, arg4));
}
Variant i_xmlwriter_write_element_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_element_ns);
}
Variant ifa_openssl_encrypt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("openssl_encrypt", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_encrypt(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_openssl_encrypt(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_openssl_encrypt(arg0, arg1, arg2, arg3, arg4));
}
Variant i_openssl_encrypt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_encrypt);
}
Variant ifa_imap_binary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_binary", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_binary(arg0));
}
Variant i_imap_binary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_binary);
}
Variant ifa_ob_get_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("ob_get_status", 1, 1);
  if (count <= 0) return (x_ob_get_status());
  CVarRef arg0(a0);
  return (x_ob_get_status(arg0));
}
Variant i_ob_get_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_get_status);
}
Variant ifa_posix_getpwuid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_getpwuid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_getpwuid(arg0));
}
Variant i_posix_getpwuid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getpwuid);
}
Variant ifa_dom_element_set_id_attribute_node(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_element_set_id_attribute_node", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_element_set_id_attribute_node(arg0, arg1, arg2));
}
Variant i_dom_element_set_id_attribute_node(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_set_id_attribute_node);
}
Variant ifa_gzuncompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gzuncompress", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzuncompress(arg0));
  CVarRef arg1(a1);
  return (x_gzuncompress(arg0, arg1));
}
Variant i_gzuncompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzuncompress);
}
Variant ifa_array_unshift(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_unshift", count+1, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_unshift(count, arg0, arg1, p));
}
Variant i_array_unshift(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("array_unshift", count+1, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    VRefParam arg0(vref(ad->getValueRef(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (x_array_unshift(count, arg0, arg1, p));
  }
}
Variant ifa_parse_ini_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("parse_ini_string", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_parse_ini_string(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_parse_ini_string(arg0, arg1));
  CVarRef arg2(a2);
  return (x_parse_ini_string(arg0, arg1, arg2));
}
Variant i_parse_ini_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_parse_ini_string);
}
Variant ifa_drawgetstrokelinecap(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokelinecap", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokelinecap(arg0));
}
Variant i_drawgetstrokelinecap(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokelinecap);
}
Variant ifa_count_chars(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("count_chars", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_count_chars(arg0));
  CVarRef arg1(a1);
  return (x_count_chars(arg0, arg1));
}
Variant i_count_chars(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_count_chars);
}
Variant ifa_hphp_splfileobject_getmaxlinelen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_getmaxlinelen", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_getmaxlinelen(arg0));
}
Variant i_hphp_splfileobject_getmaxlinelen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_getmaxlinelen);
}
Variant ifa_utf8_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("utf8_decode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_utf8_decode(arg0));
}
Variant i_utf8_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_utf8_decode);
}
Variant ifa_stream_set_blocking(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_set_blocking", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_set_blocking(arg0, arg1));
}
Variant i_stream_set_blocking(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_set_blocking);
}
Variant ifa_mdecrypt_generic(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mdecrypt_generic", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mdecrypt_generic(arg0, arg1));
}
Variant i_mdecrypt_generic(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mdecrypt_generic);
}
Variant ifa_posix_getegid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getegid", 0, 1);
  return (x_posix_getegid());
}
Variant i_posix_getegid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getegid);
}
Variant ifa_html_entity_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("html_entity_decode", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_html_entity_decode(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_html_entity_decode(arg0, arg1));
  CVarRef arg2(a2);
  return (x_html_entity_decode(arg0, arg1, arg2));
}
Variant i_html_entity_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_html_entity_decode);
}
Variant ifa_imap_listsubscribed(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_listsubscribed", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_listsubscribed(arg0, arg1, arg2));
}
Variant i_imap_listsubscribed(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_listsubscribed);
}
Variant ifa_mysql_connect_with_db(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count <= 0) return (x_mysql_connect_with_db());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_connect_with_db(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_connect_with_db(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mysql_connect_with_db(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_mysql_connect_with_db(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_mysql_connect_with_db(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_mysql_connect_with_db(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_mysql_connect_with_db(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 8)) return throw_toomany_arguments("mysql_connect_with_db", 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (x_mysql_connect_with_db());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (x_mysql_connect_with_db(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (x_mysql_connect_with_db(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_mysql_connect_with_db(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_mysql_connect_with_db(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_mysql_connect_with_db(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_mysql_connect_with_db(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 7) return (x_mysql_connect_with_db(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_mysql_connect_with_db(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_openssl_x509_export_to_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("openssl_x509_export_to_file", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_openssl_x509_export_to_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_openssl_x509_export_to_file(arg0, arg1, arg2));
}
Variant i_openssl_x509_export_to_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_x509_export_to_file);
}
Variant ifa_imap_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("imap_close", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_imap_close(arg0));
  CVarRef arg1(a1);
  return (x_imap_close(arg0, arg1));
}
Variant i_imap_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_close);
}
Variant ifa_pcntl_exec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("pcntl_exec", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_pcntl_exec(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (x_pcntl_exec(arg0, arg1), null);
  CVarRef arg2(a2);
  return (x_pcntl_exec(arg0, arg1, arg2), null);
}
Variant i_pcntl_exec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_exec);
}
Variant ifa_mailparse_msg_free(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mailparse_msg_free", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mailparse_msg_free(arg0));
}
Variant i_mailparse_msg_free(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_msg_free);
}
Variant ifa_drawpathlinetorelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawpathlinetorelative", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawpathlinetorelative(arg0, arg1, arg2), null);
}
Variant i_drawpathlinetorelative(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathlinetorelative);
}
Variant ifa_setcookie(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("setcookie", count, 1, 7, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_setcookie(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_setcookie(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_setcookie(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_setcookie(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_setcookie(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_setcookie(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_setcookie(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 7)) return throw_wrong_arguments("setcookie", count, 1, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (x_setcookie(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (x_setcookie(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_setcookie(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_setcookie(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_setcookie(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_setcookie(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_setcookie(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  }
}
Variant ifa_hphp_get_timers(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("hphp_get_timers", 1, 1);
  if (count <= 0) return (x_hphp_get_timers());
  CVarRef arg0(a0);
  return (x_hphp_get_timers(arg0));
}
Variant i_hphp_get_timers(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_timers);
}
Variant ifa_dom_document_get_element_by_id(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_get_element_by_id", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_get_element_by_id(arg0, arg1));
}
Variant i_dom_document_get_element_by_id(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_get_element_by_id);
}
Variant ifa_posix_setpgid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("posix_setpgid", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_posix_setpgid(arg0, arg1));
}
Variant i_posix_setpgid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_setpgid);
}
Variant ifa_magickmattefloodfillimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickmattefloodfillimage", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickmattefloodfillimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickmattefloodfillimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmattefloodfillimage);
}
Variant ifa_dns_get_mx(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("dns_get_mx", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_dns_get_mx(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_dns_get_mx(arg0, arg1, arg2));
}
Variant i_dns_get_mx(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dns_get_mx);
}
Variant ifa_preg_last_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("preg_last_error", 0, 1);
  return (x_preg_last_error());
}
Variant i_preg_last_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_preg_last_error);
}
Variant ifa_imagecopymerge(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagecopymerge", count, 9, 9, 1);
}
Variant i_imagecopymerge(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 9)) return throw_wrong_arguments("imagecopymerge", count, 9, 9, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagecopymerge(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
  }
}
Variant ifa_hphp_invoke(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_invoke", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_invoke(arg0, arg1));
}
Variant i_hphp_invoke(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_invoke);
}
Variant ifa_imap_mailboxmsginfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_mailboxmsginfo", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_mailboxmsginfo(arg0));
}
Variant i_imap_mailboxmsginfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_mailboxmsginfo);
}
Variant ifa_register_shutdown_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("register_shutdown_function", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_register_shutdown_function(count, arg0, p), null);
}
Variant i_register_shutdown_function(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("register_shutdown_function", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_register_shutdown_function(count, arg0, p), null);
  }
}
Variant ifa_dom_element_set_attribute_node_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_element_set_attribute_node_ns", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_element_set_attribute_node_ns(arg0, arg1));
}
Variant i_dom_element_set_attribute_node_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_set_attribute_node_ns);
}
Variant ifa_xml_set_notation_decl_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_notation_decl_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_set_notation_decl_handler(arg0, arg1));
}
Variant i_xml_set_notation_decl_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_notation_decl_handler);
}
Variant ifa_mysql_next_result(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_next_result", 1, 1);
  if (count <= 0) return (x_mysql_next_result());
  CVarRef arg0(a0);
  return (x_mysql_next_result(arg0));
}
Variant i_mysql_next_result(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_next_result);
}
Variant ifa_magickgetversion(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("magickgetversion", 0, 1);
  return (x_magickgetversion());
}
Variant i_magickgetversion(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetversion);
}
Variant ifa_dom_document_create_element_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("dom_document_create_element_ns", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_dom_document_create_element_ns(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_dom_document_create_element_ns(arg0, arg1, arg2, arg3));
}
Variant i_dom_document_create_element_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_element_ns);
}
Variant ifa_magickoilpaintimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickoilpaintimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickoilpaintimage(arg0, arg1));
}
Variant i_magickoilpaintimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickoilpaintimage);
}
Variant ifa_magickmapimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickmapimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickmapimage(arg0, arg1, arg2));
}
Variant i_magickmapimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickmapimage);
}
Variant ifa_ldap_first_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_first_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_first_attribute(arg0, arg1));
}
Variant i_ldap_first_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_first_attribute);
}
Variant ifa_lcg_value(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("lcg_value", 0, 1);
  return (x_lcg_value());
}
Variant i_lcg_value(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_lcg_value);
}
Variant ifa_imagedashedline(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imagedashedline", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imagedashedline(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagedashedline(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagedashedline);
}
Variant ifa_ob_iconv_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ob_iconv_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ob_iconv_handler(arg0, arg1));
}
Variant i_ob_iconv_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ob_iconv_handler);
}
Variant ifa_ldap_read(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_wrong_arguments("ldap_read", count, 3, 8, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_ldap_read(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_ldap_read(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_ldap_read(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_ldap_read(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_ldap_read(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 8)) return throw_wrong_arguments("ldap_read", count, 3, 8, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (x_ldap_read(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (x_ldap_read(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (x_ldap_read(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (x_ldap_read(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 7) return (x_ldap_read(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_ldap_read(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }
}
Variant ifa_drawgetclippath(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetclippath", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetclippath(arg0));
}
Variant i_drawgetclippath(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetclippath);
}
Variant ifa_shm_detach(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("shm_detach", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_shm_detach(arg0));
}
Variant i_shm_detach(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shm_detach);
}
Variant ifa_stream_register_wrapper(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_register_wrapper", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_register_wrapper(arg0, arg1));
}
Variant i_stream_register_wrapper(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_register_wrapper);
}
Variant ifa_magicksetimagebias(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagebias", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagebias(arg0, arg1));
}
Variant i_magicksetimagebias(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagebias);
}
Variant ifa_ereg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("ereg", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_ereg(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_ereg(arg0, arg1, arg2));
}
Variant i_ereg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ereg);
}
Variant ifa_mb_substr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("mb_substr", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_substr(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_substr(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_substr(arg0, arg1, arg2, arg3));
}
Variant i_mb_substr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_substr);
}
Variant ifa_hphp_splfileobject_valid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_valid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_valid(arg0));
}
Variant i_hphp_splfileobject_valid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_valid);
}
Variant ifa_get_cfg_var(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_cfg_var", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_get_cfg_var(arg0));
}
Variant i_get_cfg_var(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_cfg_var);
}
Variant ifa_substr_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("substr_replace", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_substr_replace(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_substr_replace(arg0, arg1, arg2, arg3));
}
Variant i_substr_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_substr_replace);
}
Variant ifa_mb_ereg_search_regs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("mb_ereg_search_regs", 2, 1);
  if (count <= 0) return (x_mb_ereg_search_regs());
  CVarRef arg0(a0);
  if (count <= 1) return (x_mb_ereg_search_regs(arg0));
  CVarRef arg1(a1);
  return (x_mb_ereg_search_regs(arg0, arg1));
}
Variant i_mb_ereg_search_regs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_search_regs);
}
Variant ifa_ldap_get_entries(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_get_entries", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_get_entries(arg0, arg1));
}
Variant i_ldap_get_entries(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_get_entries);
}
Variant ifa_xmlwriter_end_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_attribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_attribute(arg0));
}
Variant i_xmlwriter_end_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_attribute);
}
Variant ifa_pixelgetyellowquantum(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetyellowquantum", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetyellowquantum(arg0));
}
Variant i_pixelgetyellowquantum(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetyellowquantum);
}
Variant ifa_hphp_splfileinfo_isfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_isfile", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_isfile(arg0));
}
Variant i_hphp_splfileinfo_isfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_isfile);
}
Variant ifa_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("key", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_key(arg0));
}
Variant i_key(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_key);
}
Variant ifa_drawscale(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawscale", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawscale(arg0, arg1, arg2), null);
}
Variant i_drawscale(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawscale);
}
Variant ifa_lchown(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("lchown", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_lchown(arg0, arg1));
}
Variant i_lchown(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_lchown);
}
Variant ifa_mb_regex_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_regex_encoding", 1, 1);
  if (count <= 0) return (x_mb_regex_encoding());
  CVarRef arg0(a0);
  return (x_mb_regex_encoding(arg0));
}
Variant i_mb_regex_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_regex_encoding);
}
Variant ifa_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("file", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_file(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_file(arg0, arg1));
  CVarRef arg2(a2);
  return (x_file(arg0, arg1, arg2));
}
Variant i_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_file);
}
Variant ifa_fstat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fstat", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fstat(arg0));
}
Variant i_fstat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fstat);
}
Variant ifa_curl_multi_init(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("curl_multi_init", 0, 1);
  return (x_curl_multi_init());
}
Variant i_curl_multi_init(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_multi_init);
}
Variant ifa_is_int(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_int", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_int(arg0));
}
Variant i_is_int(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_int);
}
Variant ifa_timezone_transitions_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("timezone_transitions_get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_timezone_transitions_get(arg0));
}
Variant i_timezone_transitions_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_timezone_transitions_get);
}
Variant ifa_bin2hex(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("bin2hex", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_bin2hex(arg0));
}
Variant i_bin2hex(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bin2hex);
}
Variant ifa_magickflopimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickflopimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickflopimage(arg0));
}
Variant i_magickflopimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickflopimage);
}
Variant ifa_ip2long(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ip2long", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ip2long(arg0));
}
Variant i_ip2long(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ip2long);
}
Variant ifa_imagecolorclosesthwb(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagecolorclosesthwb", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagecolorclosesthwb(arg0, arg1, arg2, arg3));
}
Variant i_imagecolorclosesthwb(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorclosesthwb);
}
Variant ifa_ezmlm_hash(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ezmlm_hash", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ezmlm_hash(arg0));
}
Variant i_ezmlm_hash(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ezmlm_hash);
}
Variant ifa_magickgetimageredprimary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimageredprimary", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimageredprimary(arg0));
}
Variant i_magickgetimageredprimary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimageredprimary);
}
Variant ifa_hphpd_install_user_command(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphpd_install_user_command", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphpd_install_user_command(arg0, arg1));
}
Variant i_hphpd_install_user_command(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphpd_install_user_command);
}
Variant ifa_xmlwriter_write_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("xmlwriter_write_attribute", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_xmlwriter_write_attribute(arg0, arg1, arg2));
}
Variant i_xmlwriter_write_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_attribute);
}
Variant ifa_spl_autoload_call(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("spl_autoload_call", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_spl_autoload_call(arg0), null);
}
Variant i_spl_autoload_call(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spl_autoload_call);
}
Variant ifa_mb_list_encodings(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("mb_list_encodings", 0, 1);
  return (x_mb_list_encodings());
}
Variant i_mb_list_encodings(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_list_encodings);
}
Variant ifa_curl_setopt_array(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("curl_setopt_array", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_curl_setopt_array(arg0, arg1));
}
Variant i_curl_setopt_array(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_setopt_array);
}
Variant ifa_magickenhanceimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickenhanceimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickenhanceimage(arg0));
}
Variant i_magickenhanceimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickenhanceimage);
}
Variant ifa_fb_curl_getopt(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("fb_curl_getopt", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_fb_curl_getopt(arg0));
  CVarRef arg1(a1);
  return (x_fb_curl_getopt(arg0, arg1));
}
Variant i_fb_curl_getopt(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_curl_getopt);
}
Variant ifa_imap_ping(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_ping", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_ping(arg0));
}
Variant i_imap_ping(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_ping);
}
Variant ifa_drawpathmovetorelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawpathmovetorelative", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawpathmovetorelative(arg0, arg1, arg2), null);
}
Variant i_drawpathmovetorelative(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathmovetorelative);
}
Variant ifa_show_source(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("show_source", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_show_source(arg0));
  CVarRef arg1(a1);
  return (x_show_source(arg0, arg1));
}
Variant i_show_source(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_show_source);
}
Variant ifa_pcntl_signal_dispatch(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("pcntl_signal_dispatch", 0, 1);
  return (x_pcntl_signal_dispatch());
}
Variant i_pcntl_signal_dispatch(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pcntl_signal_dispatch);
}
Variant ifa_php_check_syntax(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("php_check_syntax", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_php_check_syntax(arg0));
  VRefParam arg1(vref(a1));
  return (x_php_check_syntax(arg0, arg1));
}
Variant i_php_check_syntax(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_php_check_syntax);
}
Variant ifa_hphp_get_function_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_get_function_info", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_get_function_info(arg0));
}
Variant i_hphp_get_function_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_function_info);
}
Variant ifa_mysql_fetch_lengths(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mysql_fetch_lengths", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mysql_fetch_lengths(arg0));
}
Variant i_mysql_fetch_lengths(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_fetch_lengths);
}
Variant ifa_magickadaptivethresholdimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("magickadaptivethresholdimage", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_magickadaptivethresholdimage(arg0, arg1, arg2, arg3));
}
Variant i_magickadaptivethresholdimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickadaptivethresholdimage);
}
Variant ifa_thrift_protocol_write_binary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("thrift_protocol_write_binary", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_thrift_protocol_write_binary(arg0, arg1, arg2, arg3, arg4, arg5), null);
}
Variant i_thrift_protocol_write_binary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_thrift_protocol_write_binary);
}
Variant ifa_hphp_splfileobject___construct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("hphp_splfileobject___construct", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_hphp_splfileobject___construct(arg0, arg1, arg2, arg3, arg4));
}
Variant i_hphp_splfileobject___construct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject___construct);
}
Variant ifa_magicksetimagebackgroundcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagebackgroundcolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagebackgroundcolor(arg0, arg1));
}
Variant i_magicksetimagebackgroundcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagebackgroundcolor);
}
Variant ifa_magickgetstringwidth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickgetstringwidth", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickgetstringwidth(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickgetstringwidth(arg0, arg1, arg2, arg3));
}
Variant i_magickgetstringwidth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetstringwidth);
}
Variant ifa_drawpolygon(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawpolygon", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawpolygon(arg0, arg1), null);
}
Variant i_drawpolygon(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpolygon);
}
Variant ifa_quoted_printable_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("quoted_printable_decode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_quoted_printable_decode(arg0));
}
Variant i_quoted_printable_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_quoted_printable_decode);
}
Variant ifa_magickflipimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickflipimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickflipimage(arg0));
}
Variant i_magickflipimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickflipimage);
}
Variant ifa_mb_convert_case(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mb_convert_case", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mb_convert_case(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mb_convert_case(arg0, arg1, arg2));
}
Variant i_mb_convert_case(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_convert_case);
}
Variant ifa_pixelgetcyan(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetcyan", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetcyan(arg0));
}
Variant i_pixelgetcyan(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetcyan);
}
Variant ifa_func_num_args(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("func_num_args", 0, 1);
  return (x_func_num_args());
}
Variant i_func_num_args(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_func_num_args);
}
Variant ifa_get_html_translation_table(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("get_html_translation_table", 2, 1);
  if (count <= 0) return (x_get_html_translation_table());
  CVarRef arg0(a0);
  if (count <= 1) return (x_get_html_translation_table(arg0));
  CVarRef arg1(a1);
  return (x_get_html_translation_table(arg0, arg1));
}
Variant i_get_html_translation_table(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_html_translation_table);
}
Variant ifa_drawgetstrokemiterlimit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokemiterlimit", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokemiterlimit(arg0));
}
Variant i_drawgetstrokemiterlimit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokemiterlimit);
}
Variant ifa_drawsetfontweight(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetfontweight", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetfontweight(arg0, arg1), null);
}
Variant i_drawsetfontweight(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetfontweight);
}
Variant ifa_apc_clear_cache(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("apc_clear_cache", 1, 1);
  if (count <= 0) return (x_apc_clear_cache());
  CVarRef arg0(a0);
  return (x_apc_clear_cache(arg0));
}
Variant i_apc_clear_cache(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_clear_cache);
}
Variant ifa_magicksetresourcelimit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetresourcelimit", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetresourcelimit(arg0, arg1));
}
Variant i_magicksetresourcelimit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetresourcelimit);
}
Variant ifa_fb_get_last_flush_size(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fb_get_last_flush_size", 0, 1);
  return (x_fb_get_last_flush_size());
}
Variant i_fb_get_last_flush_size(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_get_last_flush_size);
}
Variant ifa_openssl_csr_get_public_key(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_csr_get_public_key", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_csr_get_public_key(arg0));
}
Variant i_openssl_csr_get_public_key(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_csr_get_public_key);
}
Variant ifa_mysql_ping(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_ping", 1, 1);
  if (count <= 0) return (x_mysql_ping());
  CVarRef arg0(a0);
  return (x_mysql_ping(arg0));
}
Variant i_mysql_ping(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_ping);
}
Variant ifa_rewind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("rewind", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_rewind(arg0));
}
Variant i_rewind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rewind);
}
Variant ifa_drawsetstrokeantialias(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("drawsetstrokeantialias", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_drawsetstrokeantialias(arg0), null);
  CVarRef arg1(a1);
  return (x_drawsetstrokeantialias(arg0, arg1), null);
}
Variant i_drawsetstrokeantialias(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokeantialias);
}
Variant ifa_mcrypt_list_algorithms(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mcrypt_list_algorithms", 1, 1);
  if (count <= 0) return (x_mcrypt_list_algorithms());
  CVarRef arg0(a0);
  return (x_mcrypt_list_algorithms(arg0));
}
Variant i_mcrypt_list_algorithms(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_list_algorithms);
}
Variant ifa_array_values(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("array_values", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_array_values(arg0));
}
Variant i_array_values(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_values);
}
Variant ifa_sem_remove(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sem_remove", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_sem_remove(arg0));
}
Variant i_sem_remove(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sem_remove);
}
Variant ifa_dom_element_set_attribute_node(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_element_set_attribute_node", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_element_set_attribute_node(arg0, arg1));
}
Variant i_dom_element_set_attribute_node(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_set_attribute_node);
}
Variant ifa_hphp_splfileobject_rewind(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_rewind", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_rewind(arg0), null);
}
Variant i_hphp_splfileobject_rewind(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_rewind);
}
Variant ifa_magicksampleimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksampleimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksampleimage(arg0, arg1, arg2));
}
Variant i_magicksampleimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksampleimage);
}
Variant ifa_dom_characterdata_insert_data(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_characterdata_insert_data", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_characterdata_insert_data(arg0, arg1, arg2));
}
Variant i_dom_characterdata_insert_data(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_characterdata_insert_data);
}
Variant ifa_hphp_get_iterator(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_get_iterator", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_get_iterator(arg0));
}
Variant i_hphp_get_iterator(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_get_iterator);
}
Variant ifa_openssl_pkcs7_verify(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2)) return throw_wrong_arguments("openssl_pkcs7_verify", count, 2, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_openssl_pkcs7_verify(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_openssl_pkcs7_verify(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_openssl_pkcs7_verify(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_openssl_pkcs7_verify(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_openssl_pkcs7_verify(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_openssl_pkcs7_verify(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkcs7_verify);
}
Variant ifa_drawsetstrokeopacity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokeopacity", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokeopacity(arg0, arg1), null);
}
Variant i_drawsetstrokeopacity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokeopacity);
}
Variant ifa_magickgetimagecolors(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagecolors", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagecolors(arg0));
}
Variant i_magickgetimagecolors(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagecolors);
}
Variant ifa_xmlwriter_full_end_element(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_full_end_element", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_full_end_element(arg0));
}
Variant i_xmlwriter_full_end_element(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_full_end_element);
}
Variant ifa_clonemagickwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("clonemagickwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_clonemagickwand(arg0));
}
Variant i_clonemagickwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clonemagickwand);
}
Variant ifa_iconv_strrpos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("iconv_strrpos", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_iconv_strrpos(arg0, arg1));
  CVarRef arg2(a2);
  return (x_iconv_strrpos(arg0, arg1, arg2));
}
Variant i_iconv_strrpos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_strrpos);
}
Variant ifa_print_r(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("print_r", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_print_r(arg0));
  CVarRef arg1(a1);
  return (x_print_r(arg0, arg1));
}
Variant i_print_r(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_print_r);
}
Variant ifa_drawgettextantialias(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgettextantialias", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgettextantialias(arg0));
}
Variant i_drawgettextantialias(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgettextantialias);
}
Variant ifa_fb_get_taint(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("fb_get_taint", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_fb_get_taint(arg0, arg1));
}
Variant i_fb_get_taint(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_get_taint);
}
Variant ifa_socket_set_block(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("socket_set_block", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_socket_set_block(arg0));
}
Variant i_socket_set_block(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_set_block);
}
Variant ifa_dom_node_append_child(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_node_append_child", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_node_append_child(arg0, arg1));
}
Variant i_dom_node_append_child(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_append_child);
}
Variant ifa_pixelgetblue(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetblue", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetblue(arg0));
}
Variant i_pixelgetblue(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetblue);
}
Variant ifa_hphp_output_global_state(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("hphp_output_global_state", 1, 1);
  if (count <= 0) return (x_hphp_output_global_state());
  CVarRef arg0(a0);
  return (x_hphp_output_global_state(arg0));
}
Variant i_hphp_output_global_state(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_output_global_state);
}
Variant ifa_is_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_file", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_file(arg0));
}
Variant i_is_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_file);
}
Variant ifa_mcrypt_cbc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("mcrypt_cbc", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_mcrypt_cbc(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_mcrypt_cbc(arg0, arg1, arg2, arg3, arg4));
}
Variant i_mcrypt_cbc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_cbc);
}
Variant ifa_clonedrawingwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("clonedrawingwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_clonedrawingwand(arg0));
}
Variant i_clonedrawingwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_clonedrawingwand);
}
Variant ifa_drawsettextundercolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsettextundercolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsettextundercolor(arg0, arg1), null);
}
Variant i_drawsettextundercolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsettextundercolor);
}
Variant ifa_mysql_field_len(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_field_len", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_field_len(arg0));
  CVarRef arg1(a1);
  return (x_mysql_field_len(arg0, arg1));
}
Variant i_mysql_field_len(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_field_len);
}
Variant ifa_newpixelwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("newpixelwand", 1, 1);
  if (count <= 0) return (x_newpixelwand());
  CVarRef arg0(a0);
  return (x_newpixelwand(arg0));
}
Variant i_newpixelwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_newpixelwand);
}
Variant ifa_fb_call_user_func_safe(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("fb_call_user_func_safe", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_fb_call_user_func_safe(count, arg0, p));
}
Variant i_fb_call_user_func_safe(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("fb_call_user_func_safe", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_fb_call_user_func_safe(count, arg0, p));
  }
}
Variant ifa_stream_socket_client(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("stream_socket_client", count, 1, 6, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_stream_socket_client(arg0));
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_stream_socket_client(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_stream_socket_client(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_stream_socket_client(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (x_stream_socket_client(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (x_stream_socket_client(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_stream_socket_client(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_client);
}
Variant ifa_drawpathlinetohorizontalrelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawpathlinetohorizontalrelative", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawpathlinetohorizontalrelative(arg0, arg1), null);
}
Variant i_drawpathlinetohorizontalrelative(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathlinetohorizontalrelative);
}
Variant ifa_hphp_directoryiterator___construct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_directoryiterator___construct", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_directoryiterator___construct(arg0, arg1));
}
Variant i_hphp_directoryiterator___construct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator___construct);
}
Variant ifa_imagecharup(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imagecharup", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imagecharup(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagecharup(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecharup);
}
Variant ifa_array_intersect_ukey(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_intersect_ukey", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  Array p;
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_intersect_ukey(count, arg0, arg1, arg2, p));
}
Variant i_array_intersect_ukey(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3)) return throw_missing_arguments("array_intersect_ukey", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 3 ? params.slice(3, count - 3, false) : Array());
    return (x_array_intersect_ukey(count, arg0, arg1, arg2, p));
  }
}
Variant ifa_imagefilledpolygon(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagefilledpolygon", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagefilledpolygon(arg0, arg1, arg2, arg3));
}
Variant i_imagefilledpolygon(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagefilledpolygon);
}
Variant ifa_drawpathcurvetoquadraticbeziersmoothrelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawpathcurvetoquadraticbeziersmoothrelative", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawpathcurvetoquadraticbeziersmoothrelative(arg0, arg1, arg2), null);
}
Variant i_drawpathcurvetoquadraticbeziersmoothrelative(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathcurvetoquadraticbeziersmoothrelative);
}
Variant ifa_magickgaussianblurimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickgaussianblurimage", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickgaussianblurimage(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickgaussianblurimage(arg0, arg1, arg2, arg3));
}
Variant i_magickgaussianblurimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgaussianblurimage);
}
Variant ifa_asin(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("asin", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_asin(arg0));
}
Variant i_asin(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_asin);
}
Variant ifa_curl_multi_select(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("curl_multi_select", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_curl_multi_select(arg0));
  CVarRef arg1(a1);
  return (x_curl_multi_select(arg0, arg1));
}
Variant i_curl_multi_select(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_multi_select);
}
Variant ifa_mysql_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_info", 1, 1);
  if (count <= 0) return (x_mysql_info());
  CVarRef arg0(a0);
  return (x_mysql_info(arg0));
}
Variant i_mysql_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_info);
}
Variant ifa_exec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("exec", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_exec(arg0));
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_exec(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_exec(arg0, arg1, arg2));
}
Variant i_exec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_exec);
}
Variant ifa_fgets(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("fgets", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_fgets(arg0));
  CVarRef arg1(a1);
  return (x_fgets(arg0, arg1));
}
Variant i_fgets(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fgets);
}
Variant ifa_dom_document_schema_validate_xml(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_schema_validate_xml", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_schema_validate_xml(arg0, arg1));
}
Variant i_dom_document_schema_validate_xml(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_schema_validate_xml);
}
Variant ifa_pixelsetopacity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetopacity", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetopacity(arg0, arg1), null);
}
Variant i_pixelsetopacity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetopacity);
}
Variant ifa_apc_cache_info(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("apc_cache_info", 2, 1);
  if (count <= 0) return (x_apc_cache_info());
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_cache_info(arg0));
  CVarRef arg1(a1);
  return (x_apc_cache_info(arg0, arg1));
}
Variant i_apc_cache_info(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_cache_info);
}
Variant ifa_magickscaleimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickscaleimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickscaleimage(arg0, arg1, arg2));
}
Variant i_magickscaleimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickscaleimage);
}
Variant ifa_imap_setacl(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imap_setacl", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imap_setacl(arg0, arg1, arg2, arg3));
}
Variant i_imap_setacl(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_setacl);
}
Variant ifa_posix_times(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_times", 0, 1);
  return (x_posix_times());
}
Variant i_posix_times(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_times);
}
Variant ifa_xml_parser_set_option(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("xml_parser_set_option", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_xml_parser_set_option(arg0, arg1, arg2));
}
Variant i_xml_parser_set_option(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_parser_set_option);
}
Variant ifa_posix_getuid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_getuid", 0, 1);
  return (x_posix_getuid());
}
Variant i_posix_getuid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getuid);
}
Variant ifa_ldap_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ldap_close", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ldap_close(arg0));
}
Variant i_ldap_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_close);
}
Variant ifa_hphp_create_object(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_create_object", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_create_object(arg0, arg1));
}
Variant i_hphp_create_object(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_create_object);
}
Variant ifa_chmod(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("chmod", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_chmod(arg0, arg1));
}
Variant i_chmod(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_chmod);
}
Variant ifa_imageloadfont(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imageloadfont", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imageloadfont(arg0));
}
Variant i_imageloadfont(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imageloadfont);
}
Variant ifa_hphp_instruction_counter(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hphp_instruction_counter", 0, 1);
  return (x_hphp_instruction_counter());
}
Variant i_hphp_instruction_counter(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_instruction_counter);
}
Variant ifa_apc_store(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("apc_store", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_store(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_apc_store(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_apc_store(arg0, arg1, arg2, arg3));
}
Variant i_apc_store(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_store);
}
Variant ifa_mysql_list_tables(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mysql_list_tables", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mysql_list_tables(arg0));
  CVarRef arg1(a1);
  return (x_mysql_list_tables(arg0, arg1));
}
Variant i_mysql_list_tables(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_list_tables);
}
Variant ifa_magickgethomeurl(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("magickgethomeurl", 0, 1);
  return (x_magickgethomeurl());
}
Variant i_magickgethomeurl(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgethomeurl);
}
Variant ifa_mb_preferred_mime_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mb_preferred_mime_name", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mb_preferred_mime_name(arg0));
}
Variant i_mb_preferred_mime_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_preferred_mime_name);
}
Variant ifa_posix_setsid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("posix_setsid", 0, 1);
  return (x_posix_setsid());
}
Variant i_posix_setsid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_setsid);
}
Variant ifa_similar_text(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("similar_text", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_similar_text(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (x_similar_text(arg0, arg1, arg2));
}
Variant i_similar_text(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_similar_text);
}
Variant ifa_pixelgetopacity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetopacity", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetopacity(arg0));
}
Variant i_pixelgetopacity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetopacity);
}
Variant ifa_zlib_get_coding_type(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("zlib_get_coding_type", 0, 1);
  return (x_zlib_get_coding_type());
}
Variant i_zlib_get_coding_type(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_zlib_get_coding_type);
}
Variant ifa_session_id(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("session_id", 1, 1);
  if (count <= 0) return (x_session_id());
  CVarRef arg0(a0);
  return (x_session_id(arg0));
}
Variant i_session_id(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_id);
}
Variant ifa_date_time_set(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("date_time_set", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_date_time_set(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  return (x_date_time_set(arg0, arg1, arg2, arg3), null);
}
Variant i_date_time_set(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_time_set);
}
Variant ifa_array_splice(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("array_splice", count, 2, 4, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_array_splice(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_array_splice(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_array_splice(arg0, arg1, arg2, arg3));
}
Variant i_array_splice(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_splice);
}
Variant ifa_xmlwriter_end_element(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_element", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_element(arg0));
}
Variant i_xmlwriter_end_element(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_element);
}
Variant ifa_openssl_x509_read(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_x509_read", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_x509_read(arg0));
}
Variant i_openssl_x509_read(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_x509_read);
}
Variant ifa_xmlwriter_write_comment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_write_comment", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_write_comment(arg0, arg1));
}
Variant i_xmlwriter_write_comment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_comment);
}
Variant ifa_convert_cyr_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("convert_cyr_string", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_convert_cyr_string(arg0, arg1, arg2));
}
Variant i_convert_cyr_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_convert_cyr_string);
}
Variant ifa_imap_mail_copy(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("imap_mail_copy", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_mail_copy(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_imap_mail_copy(arg0, arg1, arg2, arg3));
}
Variant i_imap_mail_copy(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_mail_copy);
}
Variant ifa_hphp_splfileinfo_isdir(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_isdir", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_isdir(arg0));
}
Variant i_hphp_splfileinfo_isdir(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_isdir);
}
Variant ifa_hphp_set_static_property(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("hphp_set_static_property", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_hphp_set_static_property(arg0, arg1, arg2), null);
}
Variant i_hphp_set_static_property(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_set_static_property);
}
Variant ifa_vfprintf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("vfprintf", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_vfprintf(arg0, arg1, arg2));
}
Variant i_vfprintf(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_vfprintf);
}
Variant ifa_pack(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("pack", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_pack(count, arg0, p));
}
Variant i_pack(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("pack", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_pack(count, arg0, p));
  }
}
Variant ifa_strrpos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("strrpos", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_strrpos(arg0, arg1));
  CVarRef arg2(a2);
  return (x_strrpos(arg0, arg1, arg2));
}
Variant i_strrpos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strrpos);
}
Variant ifa_fb_renamed_functions(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_renamed_functions", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_renamed_functions(arg0), null);
}
Variant i_fb_renamed_functions(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_renamed_functions);
}
Variant ifa_drawpathcurvetosmoothrelative(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("drawpathcurvetosmoothrelative", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_drawpathcurvetosmoothrelative(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_drawpathcurvetosmoothrelative(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathcurvetosmoothrelative);
}
Variant ifa_imap_fetch_overview(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("imap_fetch_overview", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_fetch_overview(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imap_fetch_overview(arg0, arg1, arg2));
}
Variant i_imap_fetch_overview(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_fetch_overview);
}
Variant ifa_php_ini_scanned_files(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("php_ini_scanned_files", 0, 1);
  return (x_php_ini_scanned_files());
}
Variant i_php_ini_scanned_files(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_php_ini_scanned_files);
}
Variant ifa_mb_regex_set_options(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_regex_set_options", 1, 1);
  if (count <= 0) return (x_mb_regex_set_options());
  CVarRef arg0(a0);
  return (x_mb_regex_set_options(arg0));
}
Variant i_mb_regex_set_options(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_regex_set_options);
}
Variant ifa_ldap_dn2ufn(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ldap_dn2ufn", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ldap_dn2ufn(arg0));
}
Variant i_ldap_dn2ufn(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_dn2ufn);
}
Variant ifa_xmlwriter_start_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xmlwriter_start_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xmlwriter_start_attribute(arg0, arg1));
}
Variant i_xmlwriter_start_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_attribute);
}
Variant ifa_implode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("implode", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_implode(arg0));
  CVarRef arg1(a1);
  return (x_implode(arg0, arg1));
}
Variant i_implode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_implode);
}
Variant ifa_mb_list_mime_names(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_list_mime_names", 1, 1);
  if (count <= 0) return (x_mb_list_mime_names());
  CVarRef arg0(a0);
  return (x_mb_list_mime_names(arg0));
}
Variant i_mb_list_mime_names(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_list_mime_names);
}
Variant ifa_magickgettextdescent(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickgettextdescent", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickgettextdescent(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickgettextdescent(arg0, arg1, arg2, arg3));
}
Variant i_magickgettextdescent(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgettextdescent);
}
Variant ifa_stream_socket_server(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("stream_socket_server", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_stream_socket_server(arg0));
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_stream_socket_server(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_stream_socket_server(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_stream_socket_server(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_stream_socket_server(arg0, arg1, arg2, arg3, arg4));
}
Variant i_stream_socket_server(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_socket_server);
}
Variant ifa_mb_list_encodings_alias_names(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_list_encodings_alias_names", 1, 1);
  if (count <= 0) return (x_mb_list_encodings_alias_names());
  CVarRef arg0(a0);
  return (x_mb_list_encodings_alias_names(arg0));
}
Variant i_mb_list_encodings_alias_names(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_list_encodings_alias_names);
}
Variant ifa_cosh(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("cosh", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_cosh(arg0));
}
Variant i_cosh(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_cosh);
}
Variant ifa_mb_eregi_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("mb_eregi_replace", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_eregi_replace(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_eregi_replace(arg0, arg1, arg2, arg3));
}
Variant i_mb_eregi_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_eregi_replace);
}
Variant ifa_imagegammacorrect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imagegammacorrect", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imagegammacorrect(arg0, arg1, arg2));
}
Variant i_imagegammacorrect(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagegammacorrect);
}
Variant ifa_magicksetimageresolution(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetimageresolution", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetimageresolution(arg0, arg1, arg2));
}
Variant i_magicksetimageresolution(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageresolution);
}
Variant ifa_magicksetimageblueprimary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetimageblueprimary", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetimageblueprimary(arg0, arg1, arg2));
}
Variant i_magicksetimageblueprimary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageblueprimary);
}
Variant ifa_drawgetstrokeantialias(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokeantialias", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokeantialias(arg0));
}
Variant i_drawgetstrokeantialias(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokeantialias);
}
Variant ifa_session_module_name(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("session_module_name", 1, 1);
  if (count <= 0) return (x_session_module_name());
  CVarRef arg0(a0);
  return (x_session_module_name(arg0));
}
Variant i_session_module_name(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_module_name);
}
Variant ifa_checkdnsrr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("checkdnsrr", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_checkdnsrr(arg0));
  CVarRef arg1(a1);
  return (x_checkdnsrr(arg0, arg1));
}
Variant i_checkdnsrr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_checkdnsrr);
}
Variant ifa_apc_filehits(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apc_filehits", 0, 1);
  return (x_apc_filehits());
}
Variant i_apc_filehits(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_filehits);
}
Variant ifa_bcpowmod(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("bcpowmod", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_bcpowmod(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_bcpowmod(arg0, arg1, arg2, arg3));
}
Variant i_bcpowmod(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcpowmod);
}
Variant ifa_memcache_get_stats(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("memcache_get_stats", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_memcache_get_stats(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_get_stats(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_get_stats(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_memcache_get_stats(arg0, arg1, arg2, arg3));
}
Variant i_memcache_get_stats(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_get_stats);
}
Variant ifa_strstr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strstr", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strstr(arg0, arg1));
}
Variant i_strstr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strstr);
}
Variant ifa_rsort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("rsort", count, 1, 3, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (x_rsort(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_rsort(arg0, arg1));
  CVarRef arg2(a2);
  return (x_rsort(arg0, arg1, arg2));
}
Variant i_rsort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rsort);
}
Variant ifa___halt_compiler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__halt_compiler", 0, 1);
  return (x___halt_compiler(), null);
}
Variant i___halt_compiler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa___halt_compiler);
}
Variant ifa_uasort(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("uasort", count, 2, 2, 1);
  VRefParam arg0(vref(a0));
  CVarRef arg1(a1);
  return (x_uasort(arg0, arg1));
}
Variant i_uasort(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_uasort);
}
Variant ifa_preg_split(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("preg_split", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_preg_split(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_preg_split(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_preg_split(arg0, arg1, arg2, arg3));
}
Variant i_preg_split(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_preg_split);
}
Variant ifa_imagetruecolortopalette(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imagetruecolortopalette", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imagetruecolortopalette(arg0, arg1, arg2));
}
Variant i_imagetruecolortopalette(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagetruecolortopalette);
}
Variant ifa_ldap_mod_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_mod_replace", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_mod_replace(arg0, arg1, arg2));
}
Variant i_ldap_mod_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_mod_replace);
}
Variant ifa_pixelsetcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetcolor", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetcolor(arg0, arg1), null);
}
Variant i_pixelsetcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetcolor);
}
Variant ifa_apc_fetch(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("apc_fetch", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_fetch(arg0));
  VRefParam arg1(vref(a1));
  if (count <= 2) return (x_apc_fetch(arg0, arg1));
  CVarRef arg2(a2);
  return (x_apc_fetch(arg0, arg1, arg2));
}
Variant i_apc_fetch(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_fetch);
}
Variant ifa_magickstereoimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickstereoimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickstereoimage(arg0, arg1));
}
Variant i_magickstereoimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickstereoimage);
}
Variant ifa_dom_document_validate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_document_validate", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_document_validate(arg0));
}
Variant i_dom_document_validate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_validate);
}
Variant ifa_register_postsend_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("register_postsend_function", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_register_postsend_function(count, arg0, p), null);
}
Variant i_register_postsend_function(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("register_postsend_function", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_register_postsend_function(count, arg0, p), null);
  }
}
Variant ifa_hphp_crash_log(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_crash_log", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_crash_log(arg0, arg1), null);
}
Variant i_hphp_crash_log(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_crash_log);
}
Variant ifa_curl_getinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("curl_getinfo", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_curl_getinfo(arg0));
  CVarRef arg1(a1);
  return (x_curl_getinfo(arg0, arg1));
}
Variant i_curl_getinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_getinfo);
}
Variant ifa_dom_node_is_default_namespace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_node_is_default_namespace", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_node_is_default_namespace(arg0, arg1));
}
Variant i_dom_node_is_default_namespace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_is_default_namespace);
}
Variant ifa_session_write_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("session_write_close", 0, 1);
  return (x_session_write_close(), null);
}
Variant i_session_write_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_write_close);
}
Variant ifa_mysql_tablename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("mysql_tablename", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_mysql_tablename(arg0, arg1));
}
Variant i_mysql_tablename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_tablename);
}
Variant ifa_drawpathcurvetoquadraticbezierabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("drawpathcurvetoquadraticbezierabsolute", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_drawpathcurvetoquadraticbezierabsolute(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_drawpathcurvetoquadraticbezierabsolute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathcurvetoquadraticbezierabsolute);
}
Variant ifa_newpixelwands(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("newpixelwands", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_newpixelwands(arg0));
}
Variant i_newpixelwands(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_newpixelwands);
}
Variant ifa_array_fill(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("array_fill", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_array_fill(arg0, arg1, arg2));
}
Variant i_array_fill(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_fill);
}
Variant ifa_pfsockopen(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("pfsockopen", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_pfsockopen(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_pfsockopen(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_pfsockopen(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  if (count <= 4) return (x_pfsockopen(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_pfsockopen(arg0, arg1, arg2, arg3, arg4));
}
Variant i_pfsockopen(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pfsockopen);
}
Variant ifa_imap_utf7_encode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imap_utf7_encode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imap_utf7_encode(arg0));
}
Variant i_imap_utf7_encode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_utf7_encode);
}
Variant ifa_fb_enable_html_taint_trace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fb_enable_html_taint_trace", 0, 1);
  return (x_fb_enable_html_taint_trace(), null);
}
Variant i_fb_enable_html_taint_trace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_enable_html_taint_trace);
}
Variant ifa_dom_node_is_supported(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_node_is_supported", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_node_is_supported(arg0, arg1, arg2));
}
Variant i_dom_node_is_supported(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_is_supported);
}
Variant ifa_magicksetimagecolormapcolor(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetimagecolormapcolor", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetimagecolormapcolor(arg0, arg1, arg2));
}
Variant i_magicksetimagecolormapcolor(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagecolormapcolor);
}
Variant ifa_hphp_splfileobject_next(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_next", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_next(arg0), null);
}
Variant i_hphp_splfileobject_next(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_next);
}
Variant ifa_array_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_replace", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_array_replace(count, arg0, p));
}
Variant i_array_replace(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("array_replace", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_array_replace(count, arg0, p));
  }
}
Variant ifa_constant(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("constant", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_constant(arg0));
}
Variant i_constant(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_constant);
}
Variant ifa_in_array(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("in_array", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_in_array(arg0, arg1));
  CVarRef arg2(a2);
  return (x_in_array(arg0, arg1, arg2));
}
Variant i_in_array(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_in_array);
}
Variant ifa_readgzfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("readgzfile", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_readgzfile(arg0));
  CVarRef arg1(a1);
  return (x_readgzfile(arg0, arg1));
}
Variant i_readgzfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_readgzfile);
}
Variant ifa_is_long(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_long", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_long(arg0));
}
Variant i_is_long(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_long);
}
Variant ifa_hphp_splfileinfo_getatime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_getatime", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_getatime(arg0));
}
Variant i_hphp_splfileinfo_getatime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_getatime);
}
Variant ifa_imap_renamemailbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_renamemailbox", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_renamemailbox(arg0, arg1, arg2));
}
Variant i_imap_renamemailbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_renamemailbox);
}
Variant ifa_collator_get_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("collator_get_attribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_collator_get_attribute(arg0, arg1));
}
Variant i_collator_get_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_get_attribute);
}
Variant ifa_hphp_directoryiterator_current(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_directoryiterator_current", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_directoryiterator_current(arg0));
}
Variant i_hphp_directoryiterator_current(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator_current);
}
Variant ifa_magickgetpackagename(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("magickgetpackagename", 0, 1);
  return (x_magickgetpackagename());
}
Variant i_magickgetpackagename(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetpackagename);
}
Variant ifa_ldap_mod_add(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ldap_mod_add", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_ldap_mod_add(arg0, arg1, arg2));
}
Variant i_ldap_mod_add(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_mod_add);
}
Variant ifa_imagecopyresized(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("imagecopyresized", count, 10, 10, 1);
}
Variant i_imagecopyresized(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 10)) return throw_wrong_arguments("imagecopyresized", count, 10, 10, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg9((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_imagecopyresized(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
  }
}
Variant ifa_connection_aborted(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("connection_aborted", 0, 1);
  return (x_connection_aborted());
}
Variant i_connection_aborted(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_connection_aborted);
}
Variant ifa_stream_get_contents(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("stream_get_contents", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_stream_get_contents(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_stream_get_contents(arg0, arg1));
  CVarRef arg2(a2);
  return (x_stream_get_contents(arg0, arg1, arg2));
}
Variant i_stream_get_contents(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_get_contents);
}
Variant ifa_nzcompress(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("nzcompress", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_nzcompress(arg0));
}
Variant i_nzcompress(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_nzcompress);
}
Variant ifa_magicksetimagecompression(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagecompression", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagecompression(arg0, arg1));
}
Variant i_magicksetimagecompression(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagecompression);
}
Variant ifa_magicksharpenimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magicksharpenimage", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magicksharpenimage(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magicksharpenimage(arg0, arg1, arg2, arg3));
}
Variant i_magicksharpenimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksharpenimage);
}
Variant ifa_dom_nodelist_item(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_nodelist_item", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_nodelist_item(arg0, arg1));
}
Variant i_dom_nodelist_item(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_nodelist_item);
}
Variant ifa_imagecolorallocate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("imagecolorallocate", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_imagecolorallocate(arg0, arg1, arg2, arg3));
}
Variant i_imagecolorallocate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecolorallocate);
}
Variant ifa_filesize(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("filesize", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_filesize(arg0));
}
Variant i_filesize(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_filesize);
}
Variant ifa_mcrypt_enc_self_test(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mcrypt_enc_self_test", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mcrypt_enc_self_test(arg0));
}
Variant i_mcrypt_enc_self_test(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_enc_self_test);
}
Variant ifa_apc_load_constants(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("apc_load_constants", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_load_constants(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_load_constants(arg0, arg1));
  CVarRef arg2(a2);
  return (x_apc_load_constants(arg0, arg1, arg2));
}
Variant i_apc_load_constants(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_load_constants);
}
Variant ifa_socket_get_option(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("socket_get_option", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_socket_get_option(arg0, arg1, arg2));
}
Variant i_socket_get_option(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_socket_get_option);
}
Variant ifa_drawroundrectangle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
   return throw_wrong_arguments("drawroundrectangle", count, 7, 7, 1);
}
Variant i_drawroundrectangle(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 7)) return throw_wrong_arguments("drawroundrectangle", count, 7, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (x_drawroundrectangle(arg0, arg1, arg2, arg3, arg4, arg5, arg6), null);
  }
}
Variant ifa_dom_element_has_attribute_ns(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_element_has_attribute_ns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_element_has_attribute_ns(arg0, arg1, arg2));
}
Variant i_dom_element_has_attribute_ns(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_element_has_attribute_ns);
}
Variant ifa_dom_document_relaxng_validate_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_relaxng_validate_file", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_relaxng_validate_file(arg0, arg1));
}
Variant i_dom_document_relaxng_validate_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_relaxng_validate_file);
}
Variant ifa_magicksetimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimage(arg0, arg1));
}
Variant i_magicksetimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimage);
}
Variant ifa_proc_terminate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("proc_terminate", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_proc_terminate(arg0));
  CVarRef arg1(a1);
  return (x_proc_terminate(arg0, arg1));
}
Variant i_proc_terminate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_proc_terminate);
}
Variant ifa_pixelgetexception(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetexception", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetexception(arg0));
}
Variant i_pixelgetexception(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetexception);
}
Variant ifa_call_user_func_array_rpc(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("call_user_func_array_rpc", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_call_user_func_array_rpc(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_call_user_func_array_rpc(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_call_user_func_array_rpc);
}
Variant ifa_dom_node_replace_child(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("dom_node_replace_child", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_dom_node_replace_child(arg0, arg1, arg2));
}
Variant i_dom_node_replace_child(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_replace_child);
}
Variant ifa_convert_uuencode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("convert_uuencode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_convert_uuencode(arg0));
}
Variant i_convert_uuencode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_convert_uuencode);
}
Variant ifa_magickconstituteimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickconstituteimage", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickconstituteimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickconstituteimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickconstituteimage);
}
Variant ifa_ctype_xdigit(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_xdigit", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_xdigit(arg0));
}
Variant i_ctype_xdigit(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_xdigit);
}
Variant ifa_base64_encode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("base64_encode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_base64_encode(arg0));
}
Variant i_base64_encode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_base64_encode);
}
Variant ifa_gzputs(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("gzputs", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_gzputs(arg0, arg1));
  CVarRef arg2(a2);
  return (x_gzputs(arg0, arg1, arg2));
}
Variant i_gzputs(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzputs);
}
Variant ifa_magickgetimagewhitepoint(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagewhitepoint", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagewhitepoint(arg0));
}
Variant i_magickgetimagewhitepoint(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagewhitepoint);
}
Variant ifa_drawmatte(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("drawmatte", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_drawmatte(arg0, arg1, arg2, arg3), null);
}
Variant i_drawmatte(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawmatte);
}
Variant ifa_log(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("log", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_log(arg0));
  CVarRef arg1(a1);
  return (x_log(arg0, arg1));
}
Variant i_log(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_log);
}
Variant ifa_hash_final(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("hash_final", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_hash_final(arg0));
  CVarRef arg1(a1);
  return (x_hash_final(arg0, arg1));
}
Variant i_hash_final(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_final);
}
Variant ifa_pixelgetexceptionstring(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("pixelgetexceptionstring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_pixelgetexceptionstring(arg0));
}
Variant i_pixelgetexceptionstring(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelgetexceptionstring);
}
Variant ifa_tanh(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("tanh", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_tanh(arg0));
}
Variant i_tanh(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_tanh);
}
Variant ifa_fb_intercept(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("fb_intercept", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_fb_intercept(arg0, arg1));
  CVarRef arg2(a2);
  return (x_fb_intercept(arg0, arg1, arg2));
}
Variant i_fb_intercept(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_intercept);
}
Variant ifa_is_readable(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_readable", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_readable(arg0));
}
Variant i_is_readable(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_readable);
}
Variant ifa_lstat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("lstat", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_lstat(arg0));
}
Variant i_lstat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_lstat);
}
Variant ifa_magickraiseimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("magickraiseimage", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_magickraiseimage(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_magickraiseimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickraiseimage);
}
Variant ifa_user_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("user_error", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_user_error(arg0));
  CVarRef arg1(a1);
  return (x_user_error(arg0, arg1));
}
Variant i_user_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_user_error);
}
Variant ifa_getprotobynumber(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getprotobynumber", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_getprotobynumber(arg0));
}
Variant i_getprotobynumber(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getprotobynumber);
}
Variant ifa_fileinode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fileinode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fileinode(arg0));
}
Variant i_fileinode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fileinode);
}
Variant ifa_mysql_stat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mysql_stat", 1, 1);
  if (count <= 0) return (x_mysql_stat());
  CVarRef arg0(a0);
  return (x_mysql_stat(arg0));
}
Variant i_mysql_stat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_stat);
}
Variant ifa_pixelsetalpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("pixelsetalpha", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_pixelsetalpha(arg0, arg1), null);
}
Variant i_pixelsetalpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pixelsetalpha);
}
Variant ifa_gzencode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("gzencode", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gzencode(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_gzencode(arg0, arg1));
  CVarRef arg2(a2);
  return (x_gzencode(arg0, arg1, arg2));
}
Variant i_gzencode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gzencode);
}
Variant ifa_mcrypt_module_self_test(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("mcrypt_module_self_test", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_mcrypt_module_self_test(arg0));
  CVarRef arg1(a1);
  return (x_mcrypt_module_self_test(arg0, arg1));
}
Variant i_mcrypt_module_self_test(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mcrypt_module_self_test);
}
Variant ifa_openssl_seal(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("openssl_seal", count, 4, 4, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  VRefParam arg2(vref(a2));
  CVarRef arg3(a3);
  return (x_openssl_seal(arg0, arg1, arg2, arg3));
}
Variant i_openssl_seal(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_seal);
}
Variant ifa_ismagickwand(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ismagickwand", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ismagickwand(arg0));
}
Variant i_ismagickwand(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ismagickwand);
}
Variant ifa_drawpathmovetoabsolute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("drawpathmovetoabsolute", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_drawpathmovetoabsolute(arg0, arg1, arg2), null);
}
Variant i_drawpathmovetoabsolute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawpathmovetoabsolute);
}
Variant ifa_stream_set_write_buffer(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stream_set_write_buffer", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stream_set_write_buffer(arg0, arg1));
}
Variant i_stream_set_write_buffer(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_set_write_buffer);
}
Variant ifa_date_timezone_set(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("date_timezone_set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_date_timezone_set(arg0, arg1), null);
}
Variant i_date_timezone_set(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_timezone_set);
}
Variant ifa_openssl_x509_parse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("openssl_x509_parse", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_openssl_x509_parse(arg0));
  CVarRef arg1(a1);
  return (x_openssl_x509_parse(arg0, arg1));
}
Variant i_openssl_x509_parse(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_x509_parse);
}
Variant ifa_imap_errors(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("imap_errors", 0, 1);
  return (x_imap_errors());
}
Variant i_imap_errors(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_errors);
}
Variant ifa_magickevaluateimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickevaluateimage", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickevaluateimage(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickevaluateimage(arg0, arg1, arg2, arg3));
}
Variant i_magickevaluateimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickevaluateimage);
}
Variant ifa_mb_ereg_search_getpos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("mb_ereg_search_getpos", 0, 1);
  return (x_mb_ereg_search_getpos());
}
Variant i_mb_ereg_search_getpos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_search_getpos);
}
Variant ifa_magickgetimagedelay(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagedelay", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagedelay(arg0));
}
Variant i_magickgetimagedelay(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagedelay);
}
Variant ifa_shuffle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("shuffle", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_shuffle(arg0));
}
Variant i_shuffle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_shuffle);
}
Variant ifa_imap_last_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("imap_last_error", 0, 1);
  return (x_imap_last_error());
}
Variant i_imap_last_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_last_error);
}
Variant ifa_magickreadimageblob(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickreadimageblob", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickreadimageblob(arg0, arg1));
}
Variant i_magickreadimageblob(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickreadimageblob);
}
Variant ifa_magickpreviousimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickpreviousimage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickpreviousimage(arg0));
}
Variant i_magickpreviousimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickpreviousimage);
}
Variant ifa_number_format(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("number_format", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_number_format(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_number_format(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_number_format(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_number_format(arg0, arg1, arg2, arg3));
}
Variant i_number_format(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_number_format);
}
Variant ifa_magickechoimagesblob(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickechoimagesblob", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickechoimagesblob(arg0));
}
Variant i_magickechoimagesblob(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickechoimagesblob);
}
Variant ifa_magickcompositeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("magickcompositeimage", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_magickcompositeimage(arg0, arg1, arg2, arg3, arg4));
}
Variant i_magickcompositeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcompositeimage);
}
Variant ifa_hash_algos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hash_algos", 0, 1);
  return (x_hash_algos());
}
Variant i_hash_algos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hash_algos);
}
Variant ifa_curl_multi_exec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("curl_multi_exec", count, 2, 2, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  return (x_curl_multi_exec(arg0, arg1));
}
Variant i_curl_multi_exec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_curl_multi_exec);
}
Variant ifa_strpbrk(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("strpbrk", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_strpbrk(arg0, arg1));
}
Variant i_strpbrk(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strpbrk);
}
Variant ifa_ctype_alpha(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_alpha", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_alpha(arg0));
}
Variant i_ctype_alpha(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_alpha);
}
Variant ifa_magickwriteimagesfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickwriteimagesfile", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickwriteimagesfile(arg0, arg1));
}
Variant i_magickwriteimagesfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickwriteimagesfile);
}
Variant ifa_magickclippathimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickclippathimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickclippathimage(arg0, arg1, arg2));
}
Variant i_magickclippathimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickclippathimage);
}
Variant ifa_mb_http_input(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("mb_http_input", 1, 1);
  if (count <= 0) return (x_mb_http_input());
  CVarRef arg0(a0);
  return (x_mb_http_input(arg0));
}
Variant i_mb_http_input(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_http_input);
}
Variant ifa_posix_getpwnam(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("posix_getpwnam", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_posix_getpwnam(arg0));
}
Variant i_posix_getpwnam(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_posix_getpwnam);
}
Variant ifa_imagecreate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("imagecreate", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_imagecreate(arg0, arg1));
}
Variant i_imagecreate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreate);
}
Variant ifa_magicksetimagegamma(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetimagegamma", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetimagegamma(arg0, arg1));
}
Variant i_magicksetimagegamma(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagegamma);
}
Variant ifa_mysql_result(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("mysql_result", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_mysql_result(arg0, arg1));
  CVarRef arg2(a2);
  return (x_mysql_result(arg0, arg1, arg2));
}
Variant i_mysql_result(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_result);
}
Variant ifa_magickgetimagevirtualpixelmethod(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("magickgetimagevirtualpixelmethod", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_magickgetimagevirtualpixelmethod(arg0));
}
Variant i_magickgetimagevirtualpixelmethod(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetimagevirtualpixelmethod);
}
Variant ifa_hphp_throw_fatal_error(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_throw_fatal_error", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_throw_fatal_error(arg0), null);
}
Variant i_hphp_throw_fatal_error(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_throw_fatal_error);
}
Variant ifa_iconv_substr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("iconv_substr", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_iconv_substr(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_iconv_substr(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_iconv_substr(arg0, arg1, arg2, arg3));
}
Variant i_iconv_substr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iconv_substr);
}
Variant ifa_imap_fetchstructure(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("imap_fetchstructure", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_fetchstructure(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imap_fetchstructure(arg0, arg1, arg2));
}
Variant i_imap_fetchstructure(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_fetchstructure);
}
Variant ifa_stream_get_transports(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("stream_get_transports", 0, 1);
  return (x_stream_get_transports());
}
Variant i_stream_get_transports(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_get_transports);
}
Variant ifa_drawgetcliprule(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetcliprule", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetcliprule(arg0));
}
Variant i_drawgetcliprule(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetcliprule);
}
Variant ifa_fb_rename_function(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("fb_rename_function", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_fb_rename_function(arg0, arg1));
}
Variant i_fb_rename_function(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_rename_function);
}
Variant ifa_session_unset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("session_unset", 0, 1);
  return (x_session_unset());
}
Variant i_session_unset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_unset);
}
Variant ifa_collator_set_attribute(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("collator_set_attribute", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_collator_set_attribute(arg0, arg1, arg2));
}
Variant i_collator_set_attribute(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_set_attribute);
}
Variant ifa_mailparse_uudecode_all(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mailparse_uudecode_all", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mailparse_uudecode_all(arg0));
}
Variant i_mailparse_uudecode_all(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mailparse_uudecode_all);
}
Variant ifa_openssl_get_cipher_methods(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("openssl_get_cipher_methods", 1, 1);
  if (count <= 0) return (x_openssl_get_cipher_methods());
  CVarRef arg0(a0);
  return (x_openssl_get_cipher_methods(arg0));
}
Variant i_openssl_get_cipher_methods(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_get_cipher_methods);
}
Variant ifa_log10(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("log10", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_log10(arg0));
}
Variant i_log10(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_log10);
}
Variant ifa_fb_set_exit_callback(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_set_exit_callback", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_set_exit_callback(arg0), null);
}
Variant i_fb_set_exit_callback(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_set_exit_callback);
}
Variant ifa_memcache_debug(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("memcache_debug", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_memcache_debug(arg0));
}
Variant i_memcache_debug(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_debug);
}
Variant ifa_bcsub(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bcsub", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_bcsub(arg0, arg1));
  CVarRef arg2(a2);
  return (x_bcsub(arg0, arg1, arg2));
}
Variant i_bcsub(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcsub);
}
Variant ifa_dom_node_insert_before(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("dom_node_insert_before", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_dom_node_insert_before(arg0, arg1));
  CVarRef arg2(a2);
  return (x_dom_node_insert_before(arg0, arg1, arg2));
}
Variant i_dom_node_insert_before(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_node_insert_before);
}
Variant ifa_str_repeat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("str_repeat", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_str_repeat(arg0, arg1));
}
Variant i_str_repeat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_str_repeat);
}
Variant ifa_apc_dec(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("apc_dec", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_dec(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_apc_dec(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (x_apc_dec(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_apc_dec(arg0, arg1, arg2, arg3));
}
Variant i_apc_dec(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_dec);
}
Variant ifa_spl_autoload_register(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("spl_autoload_register", 3, 1);
  if (count <= 0) return (x_spl_autoload_register());
  CVarRef arg0(a0);
  if (count <= 1) return (x_spl_autoload_register(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_spl_autoload_register(arg0, arg1));
  CVarRef arg2(a2);
  return (x_spl_autoload_register(arg0, arg1, arg2));
}
Variant i_spl_autoload_register(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_spl_autoload_register);
}
Variant ifa_pagelet_server_is_enabled(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("pagelet_server_is_enabled", 0, 1);
  return (x_pagelet_server_is_enabled());
}
Variant i_pagelet_server_is_enabled(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_pagelet_server_is_enabled);
}
Variant ifa_xmlwriter_write_dtd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("xmlwriter_write_dtd", count, 2, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_xmlwriter_write_dtd(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_xmlwriter_write_dtd(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_xmlwriter_write_dtd(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_xmlwriter_write_dtd(arg0, arg1, arg2, arg3, arg4));
}
Variant i_xmlwriter_write_dtd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_write_dtd);
}
Variant ifa_addslashes(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addslashes", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_addslashes(arg0));
}
Variant i_addslashes(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_addslashes);
}
Variant ifa_apc_delete(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("apc_delete", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_delete(arg0));
  CVarRef arg1(a1);
  return (x_apc_delete(arg0, arg1));
}
Variant i_apc_delete(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_delete);
}
Variant ifa_openssl_pkey_get_details(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_pkey_get_details", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_pkey_get_details(arg0));
}
Variant i_openssl_pkey_get_details(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkey_get_details);
}
Variant ifa_mb_ereg_search_setpos(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mb_ereg_search_setpos", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mb_ereg_search_setpos(arg0));
}
Variant i_mb_ereg_search_setpos(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_search_setpos);
}
Variant ifa_lchgrp(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("lchgrp", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_lchgrp(arg0, arg1));
}
Variant i_lchgrp(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_lchgrp);
}
Variant ifa_xml_set_default_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_default_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_set_default_handler(arg0, arg1));
}
Variant i_xml_set_default_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_default_handler);
}
Variant ifa_fb_utf8_strlen_deprecated(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_utf8_strlen_deprecated", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_utf8_strlen_deprecated(arg0));
}
Variant i_fb_utf8_strlen_deprecated(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_utf8_strlen_deprecated);
}
Variant ifa_dom_document_savexml(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("dom_document_savexml", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_dom_document_savexml(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_dom_document_savexml(arg0, arg1));
  CVarRef arg2(a2);
  return (x_dom_document_savexml(arg0, arg1, arg2));
}
Variant i_dom_document_savexml(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_savexml);
}
Variant ifa_hphp_splfileobject_fflush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileobject_fflush", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileobject_fflush(arg0));
}
Variant i_hphp_splfileobject_fflush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileobject_fflush);
}
Variant ifa_drawgetstrokedashoffset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetstrokedashoffset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetstrokedashoffset(arg0));
}
Variant i_drawgetstrokedashoffset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetstrokedashoffset);
}
Variant ifa_magickconvolveimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("magickconvolveimage", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_magickconvolveimage(arg0, arg1));
  CVarRef arg2(a2);
  return (x_magickconvolveimage(arg0, arg1, arg2));
}
Variant i_magickconvolveimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickconvolveimage);
}
Variant ifa_dom_document_relaxng_validate_xml(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_document_relaxng_validate_xml", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_document_relaxng_validate_xml(arg0, arg1));
}
Variant i_dom_document_relaxng_validate_xml(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_relaxng_validate_xml);
}
Variant ifa_localtime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("localtime", 2, 1);
  if (count <= 0) return (x_localtime());
  CVarRef arg0(a0);
  if (count <= 1) return (x_localtime(arg0));
  CVarRef arg1(a1);
  return (x_localtime(arg0, arg1));
}
Variant i_localtime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_localtime);
}
Variant ifa_str_split(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("str_split", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_str_split(arg0));
  CVarRef arg1(a1);
  return (x_str_split(arg0, arg1));
}
Variant i_str_split(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_str_split);
}
Variant ifa_bcadd(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bcadd", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_bcadd(arg0, arg1));
  CVarRef arg2(a2);
  return (x_bcadd(arg0, arg1, arg2));
}
Variant i_bcadd(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_bcadd);
}
Variant ifa_array_slice(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("array_slice", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_array_slice(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_array_slice(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_array_slice(arg0, arg1, arg2, arg3));
}
Variant i_array_slice(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_slice);
}
Variant ifa_stream_encoding(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("stream_encoding", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_stream_encoding(arg0));
  CVarRef arg1(a1);
  return (x_stream_encoding(arg0, arg1));
}
Variant i_stream_encoding(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stream_encoding);
}
Variant ifa_gmdate(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("gmdate", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_gmdate(arg0));
  CVarRef arg1(a1);
  return (x_gmdate(arg0, arg1));
}
Variant i_gmdate(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_gmdate);
}
Variant ifa_sha1_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("sha1_file", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_sha1_file(arg0));
  CVarRef arg1(a1);
  return (x_sha1_file(arg0, arg1));
}
Variant i_sha1_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_sha1_file);
}
Variant ifa_class_exists(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("class_exists", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_class_exists(arg0));
  CVarRef arg1(a1);
  return (x_class_exists(arg0, arg1));
}
Variant i_class_exists(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_class_exists);
}
Variant ifa_magicksetimagegreenprimary(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magicksetimagegreenprimary", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magicksetimagegreenprimary(arg0, arg1, arg2));
}
Variant i_magicksetimagegreenprimary(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimagegreenprimary);
}
Variant ifa_collator_create(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("collator_create", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_collator_create(arg0));
}
Variant i_collator_create(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_collator_create);
}
Variant ifa_magickwhitethresholdimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickwhitethresholdimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickwhitethresholdimage(arg0, arg1));
}
Variant i_magickwhitethresholdimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickwhitethresholdimage);
}
Variant ifa_imagerectangle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 6)) return throw_wrong_arguments("imagerectangle", count, 6, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  CVarRef arg5(a5);
  return (x_imagerectangle(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant i_imagerectangle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagerectangle);
}
Variant ifa_magickgetversionnumber(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("magickgetversionnumber", 0, 1);
  return (x_magickgetversionnumber());
}
Variant i_magickgetversionnumber(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetversionnumber);
}
Variant ifa_apc_delete_file(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("apc_delete_file", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_apc_delete_file(arg0));
  CVarRef arg1(a1);
  return (x_apc_delete_file(arg0, arg1));
}
Variant i_apc_delete_file(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apc_delete_file);
}
Variant ifa_imagecreatefromgif(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefromgif", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefromgif(arg0));
}
Variant i_imagecreatefromgif(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefromgif);
}
Variant ifa_uniqid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("uniqid", 2, 1);
  if (count <= 0) return (x_uniqid());
  CVarRef arg0(a0);
  if (count <= 1) return (x_uniqid(arg0));
  CVarRef arg1(a1);
  return (x_uniqid(arg0, arg1));
}
Variant i_uniqid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_uniqid);
}
Variant ifa_xmlwriter_start_dtd_entity(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("xmlwriter_start_dtd_entity", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_xmlwriter_start_dtd_entity(arg0, arg1, arg2));
}
Variant i_xmlwriter_start_dtd_entity(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_start_dtd_entity);
}
Variant ifa_hphp_splfileinfo_openfile(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("hphp_splfileinfo_openfile", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_hphp_splfileinfo_openfile(arg0, arg1, arg2, arg3));
}
Variant i_hphp_splfileinfo_openfile(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_openfile);
}
Variant ifa_apd_set_browser_trace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apd_set_browser_trace", 0, 1);
  return (x_apd_set_browser_trace(), null);
}
Variant i_apd_set_browser_trace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apd_set_browser_trace);
}
Variant ifa_strspn(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("strspn", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_strspn(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_strspn(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_strspn(arg0, arg1, arg2, arg3));
}
Variant i_strspn(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strspn);
}
Variant ifa_memcache_decrement(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("memcache_decrement", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_decrement(arg0, arg1));
  CVarRef arg2(a2);
  return (x_memcache_decrement(arg0, arg1, arg2));
}
Variant i_memcache_decrement(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_decrement);
}
Variant ifa_getmyuid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getmyuid", 0, 1);
  return (x_getmyuid());
}
Variant i_getmyuid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_getmyuid);
}
Variant ifa_mysql_escape_string(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("mysql_escape_string", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_mysql_escape_string(arg0));
}
Variant i_mysql_escape_string(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mysql_escape_string);
}
Variant ifa_connection_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("connection_status", 0, 1);
  return (x_connection_status());
}
Variant i_connection_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_connection_status);
}
Variant ifa_imap_headerinfo(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("imap_headerinfo", count, 2, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_headerinfo(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_headerinfo(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_imap_headerinfo(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_imap_headerinfo(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imap_headerinfo(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_headerinfo);
}
Variant ifa_fb_get_code_coverage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fb_get_code_coverage", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fb_get_code_coverage(arg0));
}
Variant i_fb_get_code_coverage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fb_get_code_coverage);
}
Variant ifa_dom_document_create_document_fragment(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_document_create_document_fragment", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_document_create_document_fragment(arg0));
}
Variant i_dom_document_create_document_fragment(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_document_create_document_fragment);
}
Variant ifa_magickembossimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickembossimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickembossimage(arg0, arg1, arg2));
}
Variant i_magickembossimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickembossimage);
}
Variant ifa_ldap_count_entries(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_count_entries", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_count_entries(arg0, arg1));
}
Variant i_ldap_count_entries(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_count_entries);
}
Variant ifa_magicksetimageoption(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("magicksetimageoption", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_magicksetimageoption(arg0, arg1, arg2, arg3));
}
Variant i_magicksetimageoption(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetimageoption);
}
Variant ifa_get_class(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("get_class", 1, 1);
  if (count <= 0) return (x_get_class());
  CVarRef arg0(a0);
  return (x_get_class(arg0));
}
Variant i_get_class(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_get_class);
}
Variant ifa_putenv(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("putenv", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_putenv(arg0));
}
Variant i_putenv(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_putenv);
}
Variant ifa_magickgetcharwidth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("magickgetcharwidth", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_magickgetcharwidth(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_magickgetcharwidth(arg0, arg1, arg2, arg3));
}
Variant i_magickgetcharwidth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickgetcharwidth);
}
Variant ifa_is_resource(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_resource", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_resource(arg0));
}
Variant i_is_resource(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_resource);
}
Variant ifa_mb_ereg_replace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("mb_ereg_replace", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_mb_ereg_replace(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_mb_ereg_replace(arg0, arg1, arg2, arg3));
}
Variant i_mb_ereg_replace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_mb_ereg_replace);
}
Variant ifa_apd_stop_trace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apd_stop_trace", 0, 1);
  return (x_apd_stop_trace(), null);
}
Variant i_apd_stop_trace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apd_stop_trace);
}
Variant ifa_i18n_loc_set_default(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("i18n_loc_set_default", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_i18n_loc_set_default(arg0));
}
Variant i_i18n_loc_set_default(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_i18n_loc_set_default);
}
Variant ifa_magicksetformat(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magicksetformat", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magicksetformat(arg0, arg1));
}
Variant i_magicksetformat(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magicksetformat);
}
Variant ifa_imap_set_quota(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_set_quota", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_set_quota(arg0, arg1, arg2));
}
Variant i_imap_set_quota(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_set_quota);
}
Variant ifa_array_shift(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("array_shift", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (x_array_shift(arg0));
}
Variant i_array_shift(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_shift);
}
Variant ifa_apache_get_config(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("apache_get_config", 0, 1);
  return (x_apache_get_config());
}
Variant i_apache_get_config(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_apache_get_config);
}
Variant ifa_iptcembed(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("iptcembed", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_iptcembed(arg0, arg1));
  CVarRef arg2(a2);
  return (x_iptcembed(arg0, arg1, arg2));
}
Variant i_iptcembed(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_iptcembed);
}
Variant ifa_imageftbbox(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("imageftbbox", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (x_imageftbbox(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_imageftbbox(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imageftbbox(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imageftbbox);
}
Variant ifa_proc_close(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("proc_close", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_proc_close(arg0));
}
Variant i_proc_close(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_proc_close);
}
Variant ifa_dom_text_is_whitespace_in_element_content(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_text_is_whitespace_in_element_content", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_text_is_whitespace_in_element_content(arg0));
}
Variant i_dom_text_is_whitespace_in_element_content(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_text_is_whitespace_in_element_content);
}
Variant ifa_imagecreatefrompng(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagecreatefrompng", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagecreatefrompng(arg0));
}
Variant i_imagecreatefrompng(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagecreatefrompng);
}
Variant ifa_drawgetfontstyle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawgetfontstyle", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawgetfontstyle(arg0));
}
Variant i_drawgetfontstyle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawgetfontstyle);
}
Variant ifa_imap_status(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("imap_status", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_imap_status(arg0, arg1));
  CVarRef arg2(a2);
  return (x_imap_status(arg0, arg1, arg2));
}
Variant i_imap_status(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_status);
}
Variant ifa_memcache_pconnect(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("memcache_pconnect", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_memcache_pconnect(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (x_memcache_pconnect(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_memcache_pconnect(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_memcache_pconnect(arg0, arg1, arg2, arg3));
}
Variant i_memcache_pconnect(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_memcache_pconnect);
}
Variant ifa_strcspn(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("strcspn", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_strcspn(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (x_strcspn(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (x_strcspn(arg0, arg1, arg2, arg3));
}
Variant i_strcspn(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strcspn);
}
Variant ifa_hphp_recursiveiteratoriterator_valid(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_recursiveiteratoriterator_valid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_recursiveiteratoriterator_valid(arg0));
}
Variant i_hphp_recursiveiteratoriterator_valid(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_recursiveiteratoriterator_valid);
}
Variant ifa_date_timezone_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("date_timezone_get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_date_timezone_get(arg0));
}
Variant i_date_timezone_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_timezone_get);
}
Variant ifa_filemtime(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("filemtime", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_filemtime(arg0));
}
Variant i_filemtime(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_filemtime);
}
Variant ifa_ceil(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ceil", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ceil(arg0));
}
Variant i_ceil(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ceil);
}
Variant ifa_xml_set_external_entity_ref_handler(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xml_set_external_entity_ref_handler", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xml_set_external_entity_ref_handler(arg0, arg1));
}
Variant i_xml_set_external_entity_ref_handler(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_set_external_entity_ref_handler);
}
Variant ifa_date_offset_get(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("date_offset_get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_date_offset_get(arg0));
}
Variant i_date_offset_get(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_date_offset_get);
}
Variant ifa_openssl_pkey_free(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openssl_pkey_free", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_openssl_pkey_free(arg0), null);
}
Variant i_openssl_pkey_free(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_openssl_pkey_free);
}
Variant ifa_dom_attr_is_id(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("dom_attr_is_id", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_dom_attr_is_id(arg0));
}
Variant i_dom_attr_is_id(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_attr_is_id);
}
Variant ifa_dom_namednodemap_item(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("dom_namednodemap_item", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_dom_namednodemap_item(arg0, arg1));
}
Variant i_dom_namednodemap_item(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_dom_namednodemap_item);
}
Variant ifa_xmlwriter_end_cdata(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xmlwriter_end_cdata", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xmlwriter_end_cdata(arg0));
}
Variant i_xmlwriter_end_cdata(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xmlwriter_end_cdata);
}
Variant ifa_hphp_directoryiterator_seek(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hphp_directoryiterator_seek", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_hphp_directoryiterator_seek(arg0, arg1), null);
}
Variant i_hphp_directoryiterator_seek(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_directoryiterator_seek);
}
Variant ifa_imap_bodystruct(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("imap_bodystruct", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_imap_bodystruct(arg0, arg1, arg2));
}
Variant i_imap_bodystruct(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_bodystruct);
}
Variant ifa_stristr(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("stristr", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_stristr(arg0, arg1));
}
Variant i_stristr(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_stristr);
}
Variant ifa_is_a(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("is_a", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_is_a(arg0, arg1));
}
Variant i_is_a(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_a);
}
Variant ifa_xml_get_current_column_number(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xml_get_current_column_number", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_xml_get_current_column_number(arg0));
}
Variant i_xml_get_current_column_number(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_get_current_column_number);
}
Variant ifa_rad2deg(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("rad2deg", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_rad2deg(arg0));
}
Variant i_rad2deg(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rad2deg);
}
Variant ifa_xhprof_run_trace(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("xhprof_run_trace", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_xhprof_run_trace(arg0, arg1));
}
Variant i_xhprof_run_trace(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xhprof_run_trace);
}
Variant ifa_printf(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1)) return throw_missing_arguments("printf", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (x_printf(count, arg0, p));
}
Variant i_printf(void *extra, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("printf", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (x_printf(count, arg0, p));
  }
}
Variant ifa_imagefontwidth(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("imagefontwidth", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_imagefontwidth(arg0));
}
Variant i_imagefontwidth(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imagefontwidth);
}
Variant ifa_atan2(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("atan2", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_atan2(arg0, arg1));
}
Variant i_atan2(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_atan2);
}
Variant ifa_drawrender(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("drawrender", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_drawrender(arg0));
}
Variant i_drawrender(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawrender);
}
Variant ifa_is_bool(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_bool", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_bool(arg0));
}
Variant i_is_bool(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_bool);
}
Variant ifa_class_implements(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("class_implements", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_class_implements(arg0));
  CVarRef arg1(a1);
  return (x_class_implements(arg0, arg1));
}
Variant i_class_implements(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_class_implements);
}
Variant ifa_ldap_explode_dn(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ldap_explode_dn", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_ldap_explode_dn(arg0, arg1));
}
Variant i_ldap_explode_dn(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_explode_dn);
}
Variant ifa_ldap_free_result(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ldap_free_result", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ldap_free_result(arg0));
}
Variant i_ldap_free_result(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ldap_free_result);
}
Variant ifa_hphp_splfileinfo_islink(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hphp_splfileinfo_islink", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hphp_splfileinfo_islink(arg0));
}
Variant i_hphp_splfileinfo_islink(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hphp_splfileinfo_islink);
}
Variant ifa_hex2bin(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hex2bin", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_hex2bin(arg0));
}
Variant i_hex2bin(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_hex2bin);
}
Variant ifa_array_reduce(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("array_reduce", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_array_reduce(arg0, arg1));
  CVarRef arg2(a2);
  return (x_array_reduce(arg0, arg1, arg2));
}
Variant i_array_reduce(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_array_reduce);
}
Variant ifa_imap_open(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 3 || count > 5)) return throw_wrong_arguments("imap_open", count, 3, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (x_imap_open(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (x_imap_open(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (x_imap_open(arg0, arg1, arg2, arg3, arg4));
}
Variant i_imap_open(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_imap_open);
}
Variant ifa_magickrotateimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickrotateimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickrotateimage(arg0, arg1, arg2));
}
Variant i_magickrotateimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickrotateimage);
}
Variant ifa_magickcharcoalimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("magickcharcoalimage", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (x_magickcharcoalimage(arg0, arg1, arg2));
}
Variant i_magickcharcoalimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickcharcoalimage);
}
Variant ifa_magickimplodeimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("magickimplodeimage", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_magickimplodeimage(arg0, arg1));
}
Variant i_magickimplodeimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickimplodeimage);
}
Variant ifa_is_null(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("is_null", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_is_null(arg0));
}
Variant i_is_null(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_is_null);
}
Variant ifa_strtok(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("strtok", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_strtok(arg0));
  CVarRef arg1(a1);
  return (x_strtok(arg0, arg1));
}
Variant i_strtok(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_strtok);
}
Variant ifa_xml_parse(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("xml_parse", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (x_xml_parse(arg0, arg1));
  CVarRef arg2(a2);
  return (x_xml_parse(arg0, arg1, arg2));
}
Variant i_xml_parse(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_xml_parse);
}
Variant ifa_drawcircle(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 5)) return throw_wrong_arguments("drawcircle", count, 5, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  return (x_drawcircle(arg0, arg1, arg2, arg3, arg4), null);
}
Variant i_drawcircle(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawcircle);
}
Variant ifa_magickshearimage(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("magickshearimage", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (x_magickshearimage(arg0, arg1, arg2, arg3));
}
Variant i_magickshearimage(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_magickshearimage);
}
Variant ifa_htmlspecialchars_decode(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("htmlspecialchars_decode", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_htmlspecialchars_decode(arg0));
  CVarRef arg1(a1);
  return (x_htmlspecialchars_decode(arg0, arg1));
}
Variant i_htmlspecialchars_decode(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_htmlspecialchars_decode);
}
Variant ifa_fflush(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("fflush", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_fflush(arg0));
}
Variant i_fflush(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_fflush);
}
Variant ifa_ctype_print(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ctype_print", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (x_ctype_print(arg0));
}
Variant i_ctype_print(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_ctype_print);
}
Variant ifa_drawsetstrokedashoffset(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("drawsetstrokedashoffset", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (x_drawsetstrokedashoffset(arg0, arg1), null);
}
Variant i_drawsetstrokedashoffset(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_drawsetstrokedashoffset);
}
Variant ifa_session_save_path(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("session_save_path", 1, 1);
  if (count <= 0) return (x_session_save_path());
  CVarRef arg0(a0);
  return (x_session_save_path(arg0));
}
Variant i_session_save_path(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_session_save_path);
}
Variant ifa_rtrim(void *extra, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("rtrim", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (x_rtrim(arg0));
  CVarRef arg1(a1);
  return (x_rtrim(arg0, arg1));
}
Variant i_rtrim(void *extra, CArrRef params) {
  return invoke_func_few_handler(extra, params, &ifa_rtrim);
}
extern const CallInfo ci_stream_get_wrappers = {(void*)&i_stream_get_wrappers, (void*)&ifa_stream_get_wrappers, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_class_methods = {(void*)&i_get_class_methods, (void*)&ifa_get_class_methods, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkey_export_to_file = {(void*)&i_openssl_pkey_export_to_file, (void*)&ifa_openssl_pkey_export_to_file, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_field_type = {(void*)&i_mysql_field_type, (void*)&ifa_mysql_field_type, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_newpixelwandarray = {(void*)&i_newpixelwandarray, (void*)&ifa_newpixelwandarray, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_call_user_func_safe_return = {(void*)&i_fb_call_user_func_safe_return, (void*)&ifa_fb_call_user_func_safe_return, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_override_function = {(void*)&i_override_function, (void*)&ifa_override_function, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_sort = {(void*)&i_imap_sort, (void*)&ifa_imap_sort, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_get_length = {(void*)&i_ob_get_length, (void*)&ifa_ob_get_length, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickqueryfontmetrics = {(void*)&i_magickqueryfontmetrics, (void*)&ifa_magickqueryfontmetrics, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_strtr = {(void*)&i_strtr, (void*)&ifa_strtr, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetmimetype = {(void*)&i_magickgetmimetype, (void*)&ifa_magickgetmimetype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_data_seek = {(void*)&i_mysql_data_seek, (void*)&ifa_mysql_data_seek, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_num_rows = {(void*)&i_mysql_num_rows, (void*)&ifa_mysql_num_rows, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_func_get_arg = {(void*)&i_func_get_arg, (void*)&ifa_func_get_arg, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagestringup = {(void*)&i_imagestringup, (void*)&ifa_imagestringup, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_floatval = {(void*)&i_floatval, (void*)&ifa_floatval, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_set_hardware_events = {(void*)&i_hphp_set_hardware_events, (void*)&ifa_hphp_set_hardware_events, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_close = {(void*)&i_memcache_close, (void*)&ifa_memcache_close, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagelayereffect = {(void*)&i_imagelayereffect, (void*)&ifa_imagelayereffect, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_realpath = {(void*)&i_realpath, (void*)&ifa_realpath, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strstr = {(void*)&i_mb_strstr, (void*)&ifa_mb_strstr, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_spl_object_hash = {(void*)&i_spl_object_hash, (void*)&ifa_spl_object_hash, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_reset = {(void*)&i_reset, (void*)&ifa_reset, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_deg2rad = {(void*)&i_deg2rad, (void*)&ifa_deg2rad, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_shm_put_var = {(void*)&i_shm_put_var, (void*)&ifa_shm_put_var, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_append = {(void*)&i_imap_append, (void*)&ifa_imap_append, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_original_class_name = {(void*)&i_hphp_get_original_class_name, (void*)&ifa_hphp_get_original_class_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokelinejoin = {(void*)&i_drawgetstrokelinejoin, (void*)&ifa_drawgetstrokelinejoin, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_valid = {(void*)&i_hphp_recursivedirectoryiterator_valid, (void*)&ifa_hphp_recursivedirectoryiterator_valid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathlinetoabsolute = {(void*)&i_drawpathlinetoabsolute, (void*)&ifa_drawpathlinetoabsolute, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawrotate = {(void*)&i_drawrotate, (void*)&ifa_drawrotate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkcs12_read = {(void*)&i_openssl_pkcs12_read, (void*)&ifa_openssl_pkcs12_read, 3, 0, 0x0000000000000002LL};
extern const CallInfo ci_i18n_loc_get_error_code = {(void*)&i_i18n_loc_get_error_code, (void*)&ifa_i18n_loc_get_error_code, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpushdefs = {(void*)&i_drawpushdefs, (void*)&ifa_drawpushdefs, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_bin_dump = {(void*)&i_apc_bin_dump, (void*)&ifa_apc_bin_dump, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetmagentaquantum = {(void*)&i_pixelsetmagentaquantum, (void*)&ifa_pixelsetmagentaquantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatetruecolor = {(void*)&i_imagecreatetruecolor, (void*)&ifa_imagecreatetruecolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawcomposite = {(void*)&i_drawcomposite, (void*)&ifa_drawcomposite, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_evhttp_get = {(void*)&i_evhttp_get, (void*)&ifa_evhttp_get, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageheight = {(void*)&i_magickgetimageheight, (void*)&ifa_magickgetimageheight, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fprintf = {(void*)&i_fprintf, (void*)&ifa_fprintf, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_eregi = {(void*)&i_eregi, (void*)&ifa_eregi, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_drawpolyline = {(void*)&i_drawpolyline, (void*)&ifa_drawpolyline, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_get_error_code = {(void*)&i_collator_get_error_code, (void*)&ifa_collator_get_error_code, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_output_compression = {(void*)&i_fb_output_compression, (void*)&ifa_fb_output_compression, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_clock_getres = {(void*)&i_clock_getres, (void*)&ifa_clock_getres, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_hphp_splfileobject_fseek = {(void*)&i_hphp_splfileobject_fseek, (void*)&ifa_hphp_splfileobject_fseek, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_element = {(void*)&i_xmlwriter_write_element, (void*)&ifa_xmlwriter_write_element, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_debug_zval_dump = {(void*)&i_debug_zval_dump, (void*)&ifa_debug_zval_dump, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_fetch_field = {(void*)&i_mysql_fetch_field, (void*)&ifa_mysql_fetch_field, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_search_getregs = {(void*)&i_mb_ereg_search_getregs, (void*)&ifa_mb_ereg_search_getregs, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagegreenprimary = {(void*)&i_magickgetimagegreenprimary, (void*)&ifa_magickgetimagegreenprimary, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_method_array = {(void*)&i_call_user_method_array, (void*)&ifa_call_user_method_array, 3, 0, 0x0000000000000002LL};
extern const CallInfo ci_newmagickwand = {(void*)&i_newmagickwand, (void*)&ifa_newmagickwand, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_default_timezone_get = {(void*)&i_date_default_timezone_get, (void*)&ifa_date_default_timezone_get, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_preg_match = {(void*)&i_preg_match, (void*)&ifa_preg_match, 5, 0, 0x0000000000000004LL};
extern const CallInfo ci_hphp_splfileinfo_getbasename = {(void*)&i_hphp_splfileinfo_getbasename, (void*)&ifa_hphp_splfileinfo_getbasename, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_pack_continuation = {(void*)&i_hphp_pack_continuation, (void*)&ifa_hphp_pack_continuation, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fgetc = {(void*)&i_hphp_splfileobject_fgetc, (void*)&ifa_hphp_splfileobject_fgetc, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imageline = {(void*)&i_imageline, (void*)&ifa_imageline, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_socket_pair = {(void*)&i_stream_socket_pair, (void*)&ifa_stream_socket_pair, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_closedir = {(void*)&i_closedir, (void*)&ifa_closedir, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_seteuid = {(void*)&i_posix_seteuid, (void*)&ifa_posix_seteuid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_closelog = {(void*)&i_closelog, (void*)&ifa_closelog, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickwriteimage = {(void*)&i_magickwriteimage, (void*)&ifa_magickwriteimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzread = {(void*)&i_gzread, (void*)&ifa_gzread, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ord = {(void*)&i_ord, (void*)&ifa_ord, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getgrnam = {(void*)&i_posix_getgrnam, (void*)&ifa_posix_getgrnam, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickappendimages = {(void*)&i_magickappendimages, (void*)&ifa_magickappendimages, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_declared_traits = {(void*)&i_get_declared_traits, (void*)&ifa_get_declared_traits, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_entity_reference = {(void*)&i_dom_document_create_entity_reference, (void*)&ifa_dom_document_create_entity_reference, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagetypes = {(void*)&i_imagetypes, (void*)&ifa_imagetypes, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_ftell = {(void*)&i_hphp_splfileobject_ftell, (void*)&ifa_hphp_splfileobject_ftell, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_fork = {(void*)&i_pcntl_fork, (void*)&ifa_pcntl_fork, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_apd_breakpoint = {(void*)&i_apd_breakpoint, (void*)&ifa_apd_breakpoint, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_list_modes = {(void*)&i_mcrypt_list_modes, (void*)&ifa_mcrypt_list_modes, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_newpixelregioniterator = {(void*)&i_newpixelregioniterator, (void*)&ifa_newpixelregioniterator, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetgreen = {(void*)&i_pixelsetgreen, (void*)&ifa_pixelsetgreen, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcoalesceimages = {(void*)&i_magickcoalesceimages, (void*)&ifa_magickcoalesceimages, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strtolower = {(void*)&i_mb_strtolower, (void*)&ifa_mb_strtolower, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicktextureimage = {(void*)&i_magicktextureimage, (void*)&ifa_magicktextureimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg = {(void*)&i_mb_ereg, (void*)&ifa_mb_ereg, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_magickresetiterator = {(void*)&i_magickresetiterator, (void*)&ifa_magickresetiterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_clear_error = {(void*)&i_socket_clear_error, (void*)&ifa_socket_clear_error, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_object = {(void*)&i_xml_set_object, (void*)&ifa_xml_set_object, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_hphp_directoryiterator_valid = {(void*)&i_hphp_directoryiterator_valid, (void*)&ifa_hphp_directoryiterator_valid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_waitpid = {(void*)&i_pcntl_waitpid, (void*)&ifa_pcntl_waitpid, 3, 0, 0x0000000000000002LL};
extern const CallInfo ci_imageistruecolor = {(void*)&i_imageistruecolor, (void*)&ifa_imageistruecolor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_bin_dumpfile = {(void*)&i_apc_bin_dumpfile, (void*)&ifa_apc_bin_dumpfile, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_set_compress_threshold = {(void*)&i_memcache_set_compress_threshold, (void*)&ifa_memcache_set_compress_threshold, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_error_log = {(void*)&i_error_log, (void*)&ifa_error_log, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_die = {(void*)&i_die, (void*)&ifa_die, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_phpcredits = {(void*)&i_phpcredits, (void*)&ifa_phpcredits, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetexceptionstring = {(void*)&i_drawgetexceptionstring, (void*)&ifa_drawgetexceptionstring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkey_get_public = {(void*)&i_openssl_pkey_get_public, (void*)&ifa_openssl_pkey_get_public, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_pconnect = {(void*)&i_mysql_pconnect, (void*)&ifa_mysql_pconnect, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursiveiteratoriterator_rewind = {(void*)&i_hphp_recursiveiteratoriterator_rewind, (void*)&ifa_hphp_recursiveiteratoriterator_rewind, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetresolution = {(void*)&i_magicksetresolution, (void*)&ifa_magicksetresolution, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_magic_quotes_gpc = {(void*)&i_get_magic_quotes_gpc, (void*)&ifa_get_magic_quotes_gpc, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_cdata = {(void*)&i_xmlwriter_write_cdata, (void*)&ifa_xmlwriter_write_cdata, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_str_word_count = {(void*)&i_str_word_count, (void*)&ifa_str_word_count, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_tmpfile = {(void*)&i_tmpfile, (void*)&ifa_tmpfile, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_uintersect_assoc = {(void*)&i_array_uintersect_assoc, (void*)&ifa_array_uintersect_assoc, 3, 1, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetyellow = {(void*)&i_pixelgetyellow, (void*)&ifa_pixelgetyellow, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_current_ref = {(void*)&i_hphp_current_ref, (void*)&ifa_hphp_current_ref, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_drawgetfillrule = {(void*)&i_drawgetfillrule, (void*)&ifa_drawgetfillrule, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_warning_count = {(void*)&i_mysql_warning_count, (void*)&ifa_mysql_warning_count, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_current = {(void*)&i_hphp_splfileobject_current, (void*)&ifa_hphp_splfileobject_current, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getservbyname = {(void*)&i_getservbyname, (void*)&ifa_getservbyname, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_get_iv_size = {(void*)&i_mcrypt_enc_get_iv_size, (void*)&ifa_mcrypt_enc_get_iv_size, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getrlimit = {(void*)&i_posix_getrlimit, (void*)&ifa_posix_getrlimit, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_clearflag_full = {(void*)&i_imap_clearflag_full, (void*)&ifa_imap_clearflag_full, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_wtermsig = {(void*)&i_pcntl_wtermsig, (void*)&ifa_pcntl_wtermsig, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_seek = {(void*)&i_hphp_recursivedirectoryiterator_seek, (void*)&ifa_hphp_recursivedirectoryiterator_seek, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_getsubpath = {(void*)&i_hphp_recursivedirectoryiterator_getsubpath, (void*)&ifa_hphp_recursivedirectoryiterator_getsubpath, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_str_ireplace = {(void*)&i_str_ireplace, (void*)&ifa_str_ireplace, 4, 0, 0x0000000000000008LL};
extern const CallInfo ci_mysql_query = {(void*)&i_mysql_query, (void*)&ifa_mysql_query, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_xpath_register_php_functions = {(void*)&i_dom_xpath_register_php_functions, (void*)&ifa_dom_xpath_register_php_functions, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imageellipse = {(void*)&i_imageellipse, (void*)&ifa_imageellipse, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_define = {(void*)&i_define, (void*)&ifa_define, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_simplexml_load_file = {(void*)&i_simplexml_load_file, (void*)&ifa_simplexml_load_file, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_real_escape_string = {(void*)&i_mysql_real_escape_string, (void*)&ifa_mysql_real_escape_string, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_min = {(void*)&i_min, (void*)&ifa_min, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_fb_lazy_stat = {(void*)&i_fb_lazy_stat, (void*)&ifa_fb_lazy_stat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageinterlacescheme = {(void*)&i_magickgetimageinterlacescheme, (void*)&ifa_magickgetimageinterlacescheme, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_scandir = {(void*)&i_scandir, (void*)&ifa_scandir, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickremoveimage = {(void*)&i_magickremoveimage, (void*)&ifa_magickremoveimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_setprofile = {(void*)&i_fb_setprofile, (void*)&ifa_fb_setprofile, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpoppattern = {(void*)&i_drawpoppattern, (void*)&ifa_drawpoppattern, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_parser_create = {(void*)&i_xml_parser_create, (void*)&ifa_xml_parser_create, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_srand = {(void*)&i_srand, (void*)&ifa_srand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetalpha = {(void*)&i_pixelgetalpha, (void*)&ifa_pixelgetalpha, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathcurvetosmoothabsolute = {(void*)&i_drawpathcurvetosmoothabsolute, (void*)&ifa_drawpathcurvetosmoothabsolute, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_wandgetexception = {(void*)&i_wandgetexception, (void*)&ifa_wandgetexception, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_crc32 = {(void*)&i_crc32, (void*)&ifa_crc32, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_utf7_decode = {(void*)&i_imap_utf7_decode, (void*)&ifa_imap_utf7_decode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memory_get_allocation = {(void*)&i_memory_get_allocation, (void*)&ifa_memory_get_allocation, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicknextimage = {(void*)&i_magicknextimage, (void*)&ifa_magicknextimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromwbmp = {(void*)&i_imagecreatefromwbmp, (void*)&ifa_imagecreatefromwbmp, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_libxml_get_last_error = {(void*)&i_libxml_get_last_error, (void*)&ifa_libxml_get_last_error, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_get_elements_by_tag_name_ns = {(void*)&i_dom_document_get_elements_by_tag_name_ns, (void*)&ifa_dom_document_get_elements_by_tag_name_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_search = {(void*)&i_imap_search, (void*)&ifa_imap_search, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_sort = {(void*)&i_collator_sort, (void*)&ifa_collator_sort, 3, 0, 0x0000000000000002LL};
extern const CallInfo ci_imagepsbbox = {(void*)&i_imagepsbbox, (void*)&ifa_imagepsbbox, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagefilename = {(void*)&i_magickgetimagefilename, (void*)&ifa_magickgetimagefilename, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_gettype = {(void*)&i_hphp_splfileinfo_gettype, (void*)&ifa_hphp_splfileinfo_gettype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_inclued_get_data = {(void*)&i_inclued_get_data, (void*)&ifa_inclued_get_data, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetblackquantum = {(void*)&i_pixelsetblackquantum, (void*)&ifa_pixelsetblackquantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_msgno = {(void*)&i_imap_msgno, (void*)&ifa_imap_msgno, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_socket_shutdown = {(void*)&i_stream_socket_shutdown, (void*)&ifa_stream_socket_shutdown, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_usort = {(void*)&i_usort, (void*)&ifa_usort, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_array_rand = {(void*)&i_array_rand, (void*)&ifa_array_rand, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ispixelwand = {(void*)&i_ispixelwand, (void*)&ifa_ispixelwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_hardware_counters = {(void*)&i_hphp_get_hardware_counters, (void*)&ifa_hphp_get_hardware_counters, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetgravity = {(void*)&i_drawsetgravity, (void*)&ifa_drawsetgravity, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_eregi = {(void*)&i_mb_eregi, (void*)&ifa_mb_eregi, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_mb_strtoupper = {(void*)&i_mb_strtoupper, (void*)&ifa_mb_strtoupper, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetformat = {(void*)&i_magickgetformat, (void*)&ifa_magickgetformat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_func_array = {(void*)&i_call_user_func_array, (void*)&ifa_call_user_func_array, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_set_option = {(void*)&i_socket_set_option, (void*)&ifa_socket_set_option, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_upper = {(void*)&i_ctype_upper, (void*)&ifa_ctype_upper, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_socket_enable_crypto = {(void*)&i_stream_socket_enable_crypto, (void*)&ifa_stream_socket_enable_crypto, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicknormalizeimage = {(void*)&i_magicknormalizeimage, (void*)&ifa_magicknormalizeimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_readdir = {(void*)&i_readdir, (void*)&ifa_readdir, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_current_user = {(void*)&i_get_current_user, (void*)&ifa_get_current_user, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_fseek = {(void*)&i_fseek, (void*)&ifa_fseek, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_cpu_get_model = {(void*)&i_cpu_get_model, (void*)&ifa_cpu_get_model, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcombineimages = {(void*)&i_magickcombineimages, (void*)&ifa_magickcombineimages, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagewbmp = {(void*)&i_imagewbmp, (void*)&ifa_imagewbmp, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_unregister = {(void*)&i_session_unregister, (void*)&ifa_session_unregister, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgettextdecoration = {(void*)&i_drawgettextdecoration, (void*)&ifa_drawgettextdecoration, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pathinfo = {(void*)&i_pathinfo, (void*)&ifa_pathinfo, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_substitute_character = {(void*)&i_mb_substitute_character, (void*)&ifa_mb_substitute_character, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickwaveimage = {(void*)&i_magickwaveimage, (void*)&ifa_magickwaveimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_fwrite = {(void*)&i_fwrite, (void*)&ifa_fwrite, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_open = {(void*)&i_openssl_open, (void*)&ifa_openssl_open, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_drawsetfillpatternurl = {(void*)&i_drawsetfillpatternurl, (void*)&ifa_drawsetfillpatternurl, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dangling_server_proxy_new_request = {(void*)&i_dangling_server_proxy_new_request, (void*)&ifa_dangling_server_proxy_new_request, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfontstyle = {(void*)&i_drawsetfontstyle, (void*)&ifa_drawsetfontstyle, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fileatime = {(void*)&i_fileatime, (void*)&ifa_fileatime, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_connect = {(void*)&i_memcache_connect, (void*)&ifa_memcache_connect, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_mutable_iterator = {(void*)&i_hphp_get_mutable_iterator, (void*)&ifa_hphp_get_mutable_iterator, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_set_include_path = {(void*)&i_set_include_path, (void*)&ifa_set_include_path, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_processing_instruction_handler = {(void*)&i_xml_set_processing_instruction_handler, (void*)&ifa_xml_set_processing_instruction_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_listscan = {(void*)&i_imap_listscan, (void*)&ifa_imap_listscan, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_property_exists = {(void*)&i_property_exists, (void*)&ifa_property_exists, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_msg_set_queue = {(void*)&i_msg_set_queue, (void*)&ifa_msg_set_queue, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_stripos = {(void*)&i_mb_stripos, (void*)&ifa_mb_stripos, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetopacityquantum = {(void*)&i_pixelsetopacityquantum, (void*)&ifa_pixelsetopacityquantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzseek = {(void*)&i_gzseek, (void*)&ifa_gzseek, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagebordercolor = {(void*)&i_magickgetimagebordercolor, (void*)&ifa_magickgetimagebordercolor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorclosestalpha = {(void*)&i_imagecolorclosestalpha, (void*)&ifa_imagecolorclosestalpha, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_uintersect_uassoc = {(void*)&i_array_uintersect_uassoc, (void*)&ifa_array_uintersect_uassoc, 4, 1, 0x0000000000000000LL};
extern const CallInfo ci_apc_exists = {(void*)&i_apc_exists, (void*)&ifa_apc_exists, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_get_attribute_node = {(void*)&i_dom_element_get_attribute_node, (void*)&ifa_dom_element_get_attribute_node, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_connect = {(void*)&i_socket_connect, (void*)&ifa_socket_connect, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetblue = {(void*)&i_pixelsetblue, (void*)&ifa_pixelsetblue, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_mail = {(void*)&i_imap_mail, (void*)&ifa_imap_mail, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_set_magic_quotes_runtime = {(void*)&i_set_magic_quotes_runtime, (void*)&ifa_set_magic_quotes_runtime, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_next_attribute = {(void*)&i_ldap_next_attribute, (void*)&ifa_ldap_next_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_isexecutable = {(void*)&i_hphp_splfileinfo_isexecutable, (void*)&ifa_hphp_splfileinfo_isexecutable, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stripcslashes = {(void*)&i_stripcslashes, (void*)&ifa_stripcslashes, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicktrimimage = {(void*)&i_magicktrimimage, (void*)&ifa_magicktrimimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetwandsize = {(void*)&i_magicksetwandsize, (void*)&ifa_magicksetwandsize, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_error_string = {(void*)&i_openssl_error_string, (void*)&ifa_openssl_error_string, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_attribute_ns = {(void*)&i_dom_document_create_attribute_ns, (void*)&ifa_dom_document_create_attribute_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_connect = {(void*)&i_ldap_connect, (void*)&ifa_ldap_connect, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_get_attributes = {(void*)&i_ldap_get_attributes, (void*)&ifa_ldap_get_attributes, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_load_local_databases = {(void*)&i_fb_load_local_databases, (void*)&ifa_fb_load_local_databases, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_free_key = {(void*)&i_openssl_free_key, (void*)&ifa_openssl_free_key, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_implicit_flush = {(void*)&i_ob_implicit_flush, (void*)&ifa_ob_implicit_flush, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_get_host_info = {(void*)&i_mysql_get_host_info, (void*)&ifa_mysql_get_host_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_diff = {(void*)&i_array_diff, (void*)&ifa_array_diff, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_fb_htmlspecialchars = {(void*)&i_fb_htmlspecialchars, (void*)&ifa_fb_htmlspecialchars, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageblob = {(void*)&i_magickgetimageblob, (void*)&ifa_magickgetimageblob, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pagelet_server_task_start = {(void*)&i_pagelet_server_task_start, (void*)&ifa_pagelet_server_task_start, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_included_files = {(void*)&i_get_included_files, (void*)&ifa_get_included_files, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_apache_request_headers = {(void*)&i_apache_request_headers, (void*)&ifa_apache_request_headers, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagegrabwindow = {(void*)&i_imagegrabwindow, (void*)&ifa_imagegrabwindow, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpopclippath = {(void*)&i_drawpopclippath, (void*)&ifa_drawpopclippath, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_register_tick_function = {(void*)&i_register_tick_function, (void*)&ifa_register_tick_function, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfillalpha = {(void*)&i_drawsetfillalpha, (void*)&ifa_drawsetfillalpha, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_idn_to_unicode = {(void*)&i_idn_to_unicode, (void*)&ifa_idn_to_unicode, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_parse_str = {(void*)&i_parse_str, (void*)&ifa_parse_str, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_bccomp = {(void*)&i_bccomp, (void*)&ifa_bccomp, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_get_attribute_node_ns = {(void*)&i_dom_element_get_attribute_node_ns, (void*)&ifa_dom_element_get_attribute_node_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecopy = {(void*)&i_imagecopy, (void*)&ifa_imagecopy, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_subclass_of = {(void*)&i_is_subclass_of, (void*)&ifa_is_subclass_of, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_fill_keys = {(void*)&i_array_fill_keys, (void*)&ifa_array_fill_keys, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmodulateimage = {(void*)&i_magickmodulateimage, (void*)&ifa_magickmodulateimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_walk_recursive = {(void*)&i_array_walk_recursive, (void*)&ifa_array_walk_recursive, 3, 0, 0x0000000000000001LL};
extern const CallInfo ci_curl_multi_add_handle = {(void*)&i_curl_multi_add_handle, (void*)&ifa_curl_multi_add_handle, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_stat = {(void*)&i_stat, (void*)&ifa_stat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursiveiteratoriterator___construct = {(void*)&i_hphp_recursiveiteratoriterator___construct, (void*)&ifa_hphp_recursiveiteratoriterator___construct, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fgetss = {(void*)&i_hphp_splfileobject_fgetss, (void*)&ifa_hphp_splfileobject_fgetss, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_xpath_register_ns = {(void*)&i_dom_xpath_register_ns, (void*)&ifa_dom_xpath_register_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_getprotobyname = {(void*)&i_getprotobyname, (void*)&ifa_getprotobyname, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_range = {(void*)&i_range, (void*)&ifa_range, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_strcoll = {(void*)&i_strcoll, (void*)&ifa_strcoll, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetmagenta = {(void*)&i_pixelgetmagenta, (void*)&ifa_pixelgetmagenta, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetinterlacescheme = {(void*)&i_magickgetinterlacescheme, (void*)&ifa_magickgetinterlacescheme, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_gd_info = {(void*)&i_gd_info, (void*)&ifa_gd_info, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ini_get = {(void*)&i_ini_get, (void*)&ifa_ini_get, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_timezone_offset_get = {(void*)&i_timezone_offset_get, (void*)&ifa_timezone_offset_get, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagedispose = {(void*)&i_magickgetimagedispose, (void*)&ifa_magickgetimagedispose, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagesize = {(void*)&i_magickgetimagesize, (void*)&ifa_magickgetimagesize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_long2ip = {(void*)&i_long2ip, (void*)&ifa_long2ip, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_search_pos = {(void*)&i_mb_ereg_search_pos, (void*)&ifa_mb_ereg_search_pos, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_htmlentities = {(void*)&i_htmlentities, (void*)&ifa_htmlentities, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_system = {(void*)&i_system, (void*)&ifa_system, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_version_compare = {(void*)&i_version_compare, (void*)&ifa_version_compare, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageredprimary = {(void*)&i_magicksetimageredprimary, (void*)&ifa_magicksetimageredprimary, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_num_fields = {(void*)&i_mysql_num_fields, (void*)&ifa_mysql_num_fields, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_context_set_param = {(void*)&i_stream_context_set_param, (void*)&ifa_stream_context_set_param, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_rewind = {(void*)&i_hphp_recursivedirectoryiterator_rewind, (void*)&ifa_hphp_recursivedirectoryiterator_rewind, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickqueryconfigureoption = {(void*)&i_magickqueryconfigureoption, (void*)&ifa_magickqueryconfigureoption, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_assert = {(void*)&i_assert, (void*)&ifa_assert, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_name = {(void*)&i_session_name, (void*)&ifa_session_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_get_meta_data = {(void*)&i_stream_get_meta_data, (void*)&ifa_stream_get_meta_data, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_sign = {(void*)&i_openssl_sign, (void*)&ifa_openssl_sign, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_mb_get_info = {(void*)&i_mb_get_info, (void*)&ifa_mb_get_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_x509_export = {(void*)&i_openssl_x509_export, (void*)&ifa_openssl_x509_export, 3, 0, 0x0000000000000002LL};
extern const CallInfo ci_chop = {(void*)&i_chop, (void*)&ifa_chop, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagefilledellipse = {(void*)&i_imagefilledellipse, (void*)&ifa_imagefilledellipse, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_header = {(void*)&i_imap_header, (void*)&ifa_imap_header, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzfile = {(void*)&i_gzfile, (void*)&ifa_gzfile, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_sprintf = {(void*)&i_sprintf, (void*)&ifa_sprintf, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_magickgetwandsize = {(void*)&i_magickgetwandsize, (void*)&ifa_magickgetwandsize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcropimage = {(void*)&i_magickcropimage, (void*)&ifa_magickcropimage, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_function_exists = {(void*)&i_function_exists, (void*)&ifa_function_exists, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_encode_mimeheader = {(void*)&i_mb_encode_mimeheader, (void*)&ifa_mb_encode_mimeheader, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_bucket_append = {(void*)&i_stream_bucket_append, (void*)&ifa_stream_bucket_append, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfillopacity = {(void*)&i_drawgetfillopacity, (void*)&ifa_drawgetfillopacity, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_func_array_async = {(void*)&i_call_user_func_array_async, (void*)&ifa_call_user_func_array_async, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_get_cipher_name = {(void*)&i_mcrypt_get_cipher_name, (void*)&ifa_mcrypt_get_cipher_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_touch = {(void*)&i_touch, (void*)&ifa_touch, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfont = {(void*)&i_drawsetfont, (void*)&ifa_drawsetfont, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_writeable = {(void*)&i_is_writeable, (void*)&ifa_is_writeable, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_getflags = {(void*)&i_hphp_splfileobject_getflags, (void*)&ifa_hphp_splfileobject_getflags, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mt_getrandmax = {(void*)&i_mt_getrandmax, (void*)&ifa_mt_getrandmax, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_rfc822_parse_adrlist = {(void*)&i_imap_rfc822_parse_adrlist, (void*)&ifa_imap_rfc822_parse_adrlist, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_output_handler = {(void*)&i_mb_output_handler, (void*)&ifa_mb_output_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_quoted_printable_encode = {(void*)&i_quoted_printable_encode, (void*)&ifa_quoted_printable_encode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_get_taint_warning_counts = {(void*)&i_fb_get_taint_warning_counts, (void*)&ifa_fb_get_taint_warning_counts, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_qprint = {(void*)&i_imap_qprint, (void*)&ifa_imap_qprint, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_set_time_limit = {(void*)&i_set_time_limit, (void*)&ifa_set_time_limit, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getmyinode = {(void*)&i_getmyinode, (void*)&ifa_getmyinode, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_match = {(void*)&i_mb_ereg_match, (void*)&ifa_mb_ereg_match, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_strval = {(void*)&i_strval, (void*)&ifa_strval, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickprofileimage = {(void*)&i_magickprofileimage, (void*)&ifa_magickprofileimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphpd_get_user_commands = {(void*)&i_hphpd_get_user_commands, (void*)&ifa_hphpd_get_user_commands, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphpd_break = {(void*)&i_hphpd_break, (void*)&ifa_hphpd_break, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfontfamily = {(void*)&i_drawsetfontfamily, (void*)&ifa_drawsetfontfamily, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_resolve_include_path = {(void*)&i_stream_resolve_include_path, (void*)&ifa_stream_resolve_include_path, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_quotemeta = {(void*)&i_quotemeta, (void*)&ifa_quotemeta, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_exif_imagetype = {(void*)&i_exif_imagetype, (void*)&ifa_exif_imagetype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stripslashes = {(void*)&i_stripslashes, (void*)&ifa_stripslashes, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_var_export = {(void*)&i_var_export, (void*)&ifa_var_export, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkcs12_export = {(void*)&i_openssl_pkcs12_export, (void*)&ifa_openssl_pkcs12_export, 5, 0, 0x0000000000000002LL};
extern const CallInfo ci_date_default_timezone_set = {(void*)&i_date_default_timezone_set, (void*)&ifa_date_default_timezone_set, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagecompose = {(void*)&i_magickgetimagecompose, (void*)&ifa_magickgetimagecompose, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_get_strength = {(void*)&i_collator_get_strength, (void*)&ifa_collator_get_strength, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_namednodemap_get_named_item = {(void*)&i_dom_namednodemap_get_named_item, (void*)&ifa_dom_namednodemap_get_named_item, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_get_extended_stats = {(void*)&i_memcache_get_extended_stats, (void*)&ifa_memcache_get_extended_stats, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_ksort = {(void*)&i_ksort, (void*)&ifa_ksort, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_xmlwriter_write_dtd_attlist = {(void*)&i_xmlwriter_write_dtd_attlist, (void*)&ifa_xmlwriter_write_dtd_attlist, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getppid = {(void*)&i_posix_getppid, (void*)&ifa_posix_getppid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_curl_multi_fdset = {(void*)&i_fb_curl_multi_fdset, (void*)&ifa_fb_curl_multi_fdset, 5, 0, 0x000000000000001ELL};
extern const CallInfo ci_imagefilter = {(void*)&i_imagefilter, (void*)&ifa_imagefilter, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_socket_recvfrom = {(void*)&i_stream_socket_recvfrom, (void*)&ifa_stream_socket_recvfrom, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo___tostring = {(void*)&i_hphp_splfileinfo___tostring, (void*)&ifa_hphp_splfileinfo___tostring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_timezone_open = {(void*)&i_timezone_open, (void*)&ifa_timezone_open, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetgreenquantum = {(void*)&i_pixelsetgreenquantum, (void*)&ifa_pixelsetgreenquantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathellipticarcabsolute = {(void*)&i_drawpathellipticarcabsolute, (void*)&ifa_drawpathellipticarcabsolute, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_clone_node = {(void*)&i_dom_node_clone_node, (void*)&ifa_dom_node_clone_node, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepstext = {(void*)&i_imagepstext, (void*)&ifa_imagepstext, 12, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_sort = {(void*)&i_ldap_sort, (void*)&ifa_ldap_sort, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_escapeshellcmd = {(void*)&i_escapeshellcmd, (void*)&ifa_escapeshellcmd, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_object_pointer = {(void*)&i_hphp_object_pointer, (void*)&ifa_hphp_object_pointer, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickequalizeimage = {(void*)&i_magickequalizeimage, (void*)&ifa_magickequalizeimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_signal = {(void*)&i_pcntl_signal, (void*)&ifa_pcntl_signal, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_clearstatcache = {(void*)&i_clearstatcache, (void*)&ifa_clearstatcache, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_zend_logo_guid = {(void*)&i_zend_logo_guid, (void*)&ifa_zend_logo_guid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmontageimage = {(void*)&i_magickmontageimage, (void*)&ifa_magickmontageimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_money_format = {(void*)&i_money_format, (void*)&ifa_money_format, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_extract_part_file = {(void*)&i_mailparse_msg_extract_part_file, (void*)&ifa_mailparse_msg_extract_part_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_product = {(void*)&i_array_product, (void*)&ifa_array_product, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_delete = {(void*)&i_imap_delete, (void*)&ifa_imap_delete, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getlinktarget = {(void*)&i_hphp_splfileinfo_getlinktarget, (void*)&ifa_hphp_splfileinfo_getlinktarget, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_get_iv_size = {(void*)&i_mcrypt_get_iv_size, (void*)&ifa_mcrypt_get_iv_size, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_chunk = {(void*)&i_array_chunk, (void*)&ifa_array_chunk, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_encode = {(void*)&i_session_encode, (void*)&ifa_session_encode, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksolarizeimage = {(void*)&i_magicksolarizeimage, (void*)&ifa_magicksolarizeimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromxpm = {(void*)&i_imagecreatefromxpm, (void*)&ifa_imagecreatefromxpm, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_has_attribute = {(void*)&i_dom_element_has_attribute, (void*)&ifa_dom_element_has_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator___construct = {(void*)&i_hphp_recursivedirectoryiterator___construct, (void*)&ifa_hphp_recursivedirectoryiterator___construct, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickreadimages = {(void*)&i_magickreadimages, (void*)&ifa_magickreadimages, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagebordercolor = {(void*)&i_magicksetimagebordercolor, (void*)&ifa_magicksetimagebordercolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickwriteimagefile = {(void*)&i_magickwriteimagefile, (void*)&ifa_magickwriteimagefile, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_private_encrypt = {(void*)&i_openssl_private_encrypt, (void*)&ifa_openssl_private_encrypt, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_drawgetclipunits = {(void*)&i_drawgetclipunits, (void*)&ifa_drawgetclipunits, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_assert_options = {(void*)&i_assert_options, (void*)&ifa_assert_options, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_rpc_intercept_handler = {(void*)&i_fb_rpc_intercept_handler, (void*)&ifa_fb_rpc_intercept_handler, 5, 0, 0x0000000000000010LL};
extern const CallInfo ci_curl_multi_info_read = {(void*)&i_curl_multi_info_read, (void*)&ifa_curl_multi_info_read, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_mb_encode_numericentity = {(void*)&i_mb_encode_numericentity, (void*)&ifa_mb_encode_numericentity, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_proc_get_status = {(void*)&i_proc_get_status, (void*)&ifa_proc_get_status, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_set_id_attribute = {(void*)&i_dom_element_set_id_attribute, (void*)&ifa_dom_element_set_id_attribute, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getinode = {(void*)&i_hphp_splfileinfo_getinode, (void*)&ifa_hphp_splfileinfo_getinode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_fetch_row = {(void*)&i_mysql_fetch_row, (void*)&ifa_mysql_fetch_row, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorallocatealpha = {(void*)&i_imagecolorallocatealpha, (void*)&ifa_imagecolorallocatealpha, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_parse_str = {(void*)&i_mb_parse_str, (void*)&ifa_mb_parse_str, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_fb_thrift_serialize = {(void*)&i_fb_thrift_serialize, (void*)&ifa_fb_thrift_serialize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_numeric = {(void*)&i_is_numeric, (void*)&ifa_is_numeric, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_sunset = {(void*)&i_date_sunset, (void*)&ifa_date_sunset, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_generic_init = {(void*)&i_mcrypt_generic_init, (void*)&ifa_mcrypt_generic_init, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_get_quota = {(void*)&i_imap_get_quota, (void*)&ifa_imap_get_quota, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsettextencoding = {(void*)&i_drawsettextencoding, (void*)&ifa_drawsettextencoding, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_rewinddir = {(void*)&i_rewinddir, (void*)&ifa_rewinddir, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fileperms = {(void*)&i_fileperms, (void*)&ifa_fileperms, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fscanf = {(void*)&i_fscanf, (void*)&ifa_fscanf, 2, 2, 0x0000000000000000LL};
extern const CallInfo ci_read_exif_data = {(void*)&i_read_exif_data, (void*)&ifa_read_exif_data, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetblackquantum = {(void*)&i_pixelgetblackquantum, (void*)&ifa_pixelgetblackquantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fstat = {(void*)&i_hphp_splfileobject_fstat, (void*)&ifa_hphp_splfileobject_fstat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagepixels = {(void*)&i_magicksetimagepixels, (void*)&ifa_magicksetimagepixels, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphpd_client_ctrl = {(void*)&i_hphpd_client_ctrl, (void*)&ifa_hphpd_client_ctrl, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getctime = {(void*)&i_hphp_splfileinfo_getctime, (void*)&ifa_hphp_splfileinfo_getctime, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageiterations = {(void*)&i_magicksetimageiterations, (void*)&ifa_magicksetimageiterations, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_fetch_assoc = {(void*)&i_mysql_fetch_assoc, (void*)&ifa_mysql_fetch_assoc, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_x509_free = {(void*)&i_openssl_x509_free, (void*)&ifa_openssl_x509_free, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_get_md_methods = {(void*)&i_openssl_get_md_methods, (void*)&ifa_openssl_get_md_methods, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetsize = {(void*)&i_magicksetsize, (void*)&ifa_magicksetsize, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_replace = {(void*)&i_memcache_replace, (void*)&ifa_memcache_replace, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagetype = {(void*)&i_magicksetimagetype, (void*)&ifa_magicksetimagetype, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_check_user_func_async = {(void*)&i_check_user_func_async, (void*)&ifa_check_user_func_async, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_disk_free_space = {(void*)&i_disk_free_space, (void*)&ifa_disk_free_space, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_affected_rows = {(void*)&i_mysql_affected_rows, (void*)&ifa_mysql_affected_rows, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_sql_regcase = {(void*)&i_sql_regcase, (void*)&ifa_sql_regcase, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_socket_get_name = {(void*)&i_stream_socket_get_name, (void*)&ifa_stream_socket_get_name, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_merge = {(void*)&i_array_merge, (void*)&ifa_array_merge, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_dom_xpath_query = {(void*)&i_dom_xpath_query, (void*)&ifa_dom_xpath_query, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickrollimage = {(void*)&i_magickrollimage, (void*)&ifa_magickrollimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickhasnextimage = {(void*)&i_magickhasnextimage, (void*)&ifa_magickhasnextimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawaffine = {(void*)&i_drawaffine, (void*)&ifa_drawaffine, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetsamplingfactors = {(void*)&i_magickgetsamplingfactors, (void*)&ifa_magickgetsamplingfactors, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_octdec = {(void*)&i_octdec, (void*)&ifa_octdec, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_i18n_loc_get_default = {(void*)&i_i18n_loc_get_default, (void*)&ifa_i18n_loc_get_default, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_mail_move = {(void*)&i_imap_mail_move, (void*)&ifa_imap_mail_move, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolortransparent = {(void*)&i_imagecolortransparent, (void*)&ifa_imagecolortransparent, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apache_setenv = {(void*)&i_apache_setenv, (void*)&ifa_apache_setenv, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_search = {(void*)&i_mb_ereg_search, (void*)&ifa_mb_ereg_search, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_setgid = {(void*)&i_posix_setgid, (void*)&ifa_posix_setgid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_destroypixelwands = {(void*)&i_destroypixelwands, (void*)&ifa_destroypixelwands, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_setlocale = {(void*)&i_setlocale, (void*)&ifa_setlocale, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_hphp_process_abort = {(void*)&i_hphp_process_abort, (void*)&ifa_hphp_process_abort, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_extension_info = {(void*)&i_hphp_get_extension_info, (void*)&ifa_hphp_get_extension_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_clock_gettime = {(void*)&i_clock_gettime, (void*)&ifa_clock_gettime, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_pixelgetgreenquantum = {(void*)&i_pixelgetgreenquantum, (void*)&ifa_pixelgetgreenquantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_private_decrypt = {(void*)&i_openssl_private_decrypt, (void*)&ifa_openssl_private_decrypt, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_hphp_instanceof = {(void*)&i_hphp_instanceof, (void*)&ifa_hphp_instanceof, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetiteratorexceptionstring = {(void*)&i_pixelgetiteratorexceptionstring, (void*)&ifa_pixelgetiteratorexceptionstring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_callable = {(void*)&i_is_callable, (void*)&ifa_is_callable, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_imap_subscribe = {(void*)&i_imap_subscribe, (void*)&ifa_imap_subscribe, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_dir = {(void*)&i_is_dir, (void*)&ifa_is_dir, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_link = {(void*)&i_link, (void*)&ifa_link, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_parser_create_ns = {(void*)&i_xml_parser_create_ns, (void*)&ifa_xml_parser_create_ns, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_asort = {(void*)&i_collator_asort, (void*)&ifa_collator_asort, 3, 0, 0x0000000000000002LL};
extern const CallInfo ci_hphp_get_call_info = {(void*)&i_hphp_get_call_info, (void*)&ifa_hphp_get_call_info, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_shell_exec = {(void*)&i_shell_exec, (void*)&ifa_shell_exec, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_remove_attribute_node = {(void*)&i_dom_element_remove_attribute_node, (void*)&ifa_dom_element_remove_attribute_node, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_call_user_func_array_safe = {(void*)&i_fb_call_user_func_array_safe, (void*)&ifa_fb_call_user_func_array_safe, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_gc = {(void*)&i_imap_gc, (void*)&ifa_imap_gc, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_setrawcookie = {(void*)&i_setrawcookie, (void*)&ifa_setrawcookie, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_intl_error_name = {(void*)&i_intl_error_name, (void*)&ifa_intl_error_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_cdatasection = {(void*)&i_dom_document_create_cdatasection, (void*)&ifa_dom_document_create_cdatasection, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolormatch = {(void*)&i_imagecolormatch, (void*)&ifa_imagecolormatch, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_date_set = {(void*)&i_date_date_set, (void*)&ifa_date_date_set, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_copy_handle = {(void*)&i_curl_copy_handle, (void*)&ifa_curl_copy_handle, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_base64 = {(void*)&i_imap_base64, (void*)&ifa_imap_base64, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetmagenta = {(void*)&i_pixelsetmagenta, (void*)&ifa_pixelsetmagenta, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepsslantfont = {(void*)&i_imagepsslantfont, (void*)&ifa_imagepsslantfont, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_getsubscribed = {(void*)&i_imap_getsubscribed, (void*)&ifa_imap_getsubscribed, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_property = {(void*)&i_hphp_get_property, (void*)&ifa_hphp_get_property, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_mknod = {(void*)&i_posix_mknod, (void*)&ifa_posix_mknod, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageformat = {(void*)&i_magicksetimageformat, (void*)&ifa_magicksetimageformat, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_intersect_assoc = {(void*)&i_array_intersect_assoc, (void*)&ifa_array_intersect_assoc, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_drawskewy = {(void*)&i_drawskewy, (void*)&ifa_drawskewy, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepolygon = {(void*)&i_imagepolygon, (void*)&ifa_imagepolygon, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_createmailbox = {(void*)&i_imap_createmailbox, (void*)&ifa_imap_createmailbox, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_remove_attribute = {(void*)&i_dom_element_remove_attribute, (void*)&ifa_dom_element_remove_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_init = {(void*)&i_curl_init, (void*)&ifa_curl_init, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagesx = {(void*)&i_imagesx, (void*)&ifa_imagesx, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_iptcparse = {(void*)&i_iptcparse, (void*)&ifa_iptcparse, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_timezone_identifiers_list = {(void*)&i_timezone_identifiers_list, (void*)&ifa_timezone_identifiers_list, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_get_quotaroot = {(void*)&i_imap_get_quotaroot, (void*)&ifa_imap_get_quotaroot, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_db_name = {(void*)&i_mysql_db_name, (void*)&ifa_mysql_db_name, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_method_info = {(void*)&i_hphp_get_method_info, (void*)&ifa_hphp_get_method_info, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetexceptiontype = {(void*)&i_drawgetexceptiontype, (void*)&ifa_drawgetexceptiontype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_str_replace = {(void*)&i_str_replace, (void*)&ifa_str_replace, 4, 0, 0x0000000000000008LL};
extern const CallInfo ci_session_get_cookie_params = {(void*)&i_session_get_cookie_params, (void*)&ifa_session_get_cookie_params, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ini_get_all = {(void*)&i_ini_get_all, (void*)&ifa_ini_get_all, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strrichr = {(void*)&i_mb_strrichr, (void*)&ifa_mb_strrichr, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_iterator_to_array = {(void*)&i_iterator_to_array, (void*)&ifa_iterator_to_array, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfontstretch = {(void*)&i_drawsetfontstretch, (void*)&ifa_drawsetfontstretch, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_xinclude = {(void*)&i_dom_document_xinclude, (void*)&ifa_dom_document_xinclude, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_strripos = {(void*)&i_strripos, (void*)&ifa_strripos, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_extract_whole_part_file = {(void*)&i_mailparse_msg_extract_whole_part_file, (void*)&ifa_mailparse_msg_extract_whole_part_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_apache_note = {(void*)&i_apache_note, (void*)&ifa_apache_note, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_output_add_rewrite_var = {(void*)&i_output_add_rewrite_var, (void*)&ifa_output_add_rewrite_var, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromstring = {(void*)&i_imagecreatefromstring, (void*)&ifa_imagecreatefromstring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzflush = {(void*)&i_bzflush, (void*)&ifa_bzflush, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_unique = {(void*)&i_array_unique, (void*)&ifa_array_unique, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpushpattern = {(void*)&i_drawpushpattern, (void*)&ifa_drawpushpattern, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetopacityquantum = {(void*)&i_pixelgetopacityquantum, (void*)&ifa_pixelgetopacityquantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_eval = {(void*)&i_eval, (void*)&ifa_eval, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_msg_send = {(void*)&i_msg_send, (void*)&ifa_msg_send, 6, 0, 0x0000000000000020LL};
extern const CallInfo ci_preg_match_all = {(void*)&i_preg_match_all, (void*)&ifa_preg_match_all, 5, 0, 0x0000000000000004LL};
extern const CallInfo ci_memcache_flush = {(void*)&i_memcache_flush, (void*)&ifa_memcache_flush, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_get_attribute_ns = {(void*)&i_dom_element_get_attribute_ns, (void*)&ifa_dom_element_get_attribute_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_class_vars = {(void*)&i_get_class_vars, (void*)&ifa_get_class_vars, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_save_html = {(void*)&i_dom_document_save_html, (void*)&ifa_dom_document_save_html, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickechoimageblob = {(void*)&i_magickechoimageblob, (void*)&ifa_magickechoimageblob, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_murmurhash = {(void*)&i_hphp_murmurhash, (void*)&ifa_hphp_murmurhash, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_dtd_attlist = {(void*)&i_xmlwriter_start_dtd_attlist, (void*)&ifa_xmlwriter_start_dtd_attlist, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_join = {(void*)&i_join, (void*)&ifa_join, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_qlzcompress = {(void*)&i_qlzcompress, (void*)&ifa_qlzcompress, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimage = {(void*)&i_magickgetimage, (void*)&ifa_magickgetimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_replace_recursive = {(void*)&i_array_replace_recursive, (void*)&ifa_array_replace_recursive, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_bcpow = {(void*)&i_bcpow, (void*)&ifa_bcpow, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_memory_get_usage = {(void*)&i_memory_get_usage, (void*)&ifa_memory_get_usage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_element_ns = {(void*)&i_xmlwriter_start_element_ns, (void*)&ifa_xmlwriter_start_element_ns, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagepixels = {(void*)&i_magickgetimagepixels, (void*)&ifa_magickgetimagepixels, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_cipher_iv_length = {(void*)&i_openssl_cipher_iv_length, (void*)&ifa_openssl_cipher_iv_length, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagegrabscreen = {(void*)&i_imagegrabscreen, (void*)&ifa_imagegrabscreen, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecopymergegray = {(void*)&i_imagecopymergegray, (void*)&ifa_imagecopymergegray, 9, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_directoryiterator___tostring = {(void*)&i_hphp_directoryiterator___tostring, (void*)&ifa_hphp_directoryiterator___tostring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_sin = {(void*)&i_sin, (void*)&ifa_sin, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_rand = {(void*)&i_rand, (void*)&ifa_rand, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_spl_autoload = {(void*)&i_spl_autoload, (void*)&ifa_spl_autoload, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_sys_get_temp_dir = {(void*)&i_sys_get_temp_dir, (void*)&ifa_sys_get_temp_dir, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_spliti = {(void*)&i_spliti, (void*)&ifa_spliti, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawellipse = {(void*)&i_drawellipse, (void*)&ifa_drawellipse, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_walk = {(void*)&i_array_walk, (void*)&ifa_array_walk, 3, 0, 0x0000000000000001LL};
extern const CallInfo ci_hphp_stats = {(void*)&i_hphp_stats, (void*)&ifa_hphp_stats, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_get_current_byte_index = {(void*)&i_xml_get_current_byte_index, (void*)&ifa_xml_get_current_byte_index, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_set_blocking = {(void*)&i_socket_set_blocking, (void*)&ifa_socket_set_blocking, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_iconv_strlen = {(void*)&i_iconv_strlen, (void*)&ifa_iconv_strlen, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_class_info = {(void*)&i_hphp_get_class_info, (void*)&ifa_hphp_get_class_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_decrypt = {(void*)&i_openssl_decrypt, (void*)&ifa_openssl_decrypt, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_mktime = {(void*)&i_mktime, (void*)&ifa_mktime, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_decode_mimeheader = {(void*)&i_mb_decode_mimeheader, (void*)&ifa_mb_decode_mimeheader, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_cos = {(void*)&i_cos, (void*)&ifa_cos, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickshaveimage = {(void*)&i_magickshaveimage, (void*)&ifa_magickshaveimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_getmypid = {(void*)&i_getmypid, (void*)&ifa_getmypid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetiteratorexception = {(void*)&i_pixelgetiteratorexception, (void*)&ifa_pixelgetiteratorexception, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_libxml_use_internal_errors = {(void*)&i_libxml_use_internal_errors, (void*)&ifa_libxml_use_internal_errors, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_intersect_uassoc = {(void*)&i_array_intersect_uassoc, (void*)&ifa_array_intersect_uassoc, 3, 1, 0x0000000000000000LL};
extern const CallInfo ci_gzinflate = {(void*)&i_gzinflate, (void*)&ifa_gzinflate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_character_data_handler = {(void*)&i_xml_set_character_data_handler, (void*)&ifa_xml_set_character_data_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_scalar_typehints_enabled = {(void*)&i_hphp_scalar_typehints_enabled, (void*)&ifa_hphp_scalar_typehints_enabled, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_atan = {(void*)&i_atan, (void*)&ifa_atan, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_wrapper_register = {(void*)&i_stream_wrapper_register, (void*)&ifa_stream_wrapper_register, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_get_option = {(void*)&i_ldap_get_option, (void*)&ifa_ldap_get_option, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_magickgetimageindex = {(void*)&i_magickgetimageindex, (void*)&ifa_magickgetimageindex, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_extension_loaded = {(void*)&i_extension_loaded, (void*)&ifa_extension_loaded, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memory_get_peak_usage = {(void*)&i_memory_get_peak_usage, (void*)&ifa_memory_get_peak_usage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_set_attribute = {(void*)&i_dom_element_set_attribute, (void*)&ifa_dom_element_set_attribute, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_scanmailbox = {(void*)&i_imap_scanmailbox, (void*)&ifa_imap_scanmailbox, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_nan = {(void*)&i_is_nan, (void*)&ifa_is_nan, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_popdrawingwand = {(void*)&i_popdrawingwand, (void*)&ifa_popdrawingwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_tan = {(void*)&i_tan, (void*)&ifa_tan, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetyellow = {(void*)&i_pixelsetyellow, (void*)&ifa_pixelsetyellow, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzclose = {(void*)&i_bzclose, (void*)&ifa_bzclose, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagesetpixel = {(void*)&i_imagesetpixel, (void*)&ifa_imagesetpixel, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_error = {(void*)&i_ldap_error, (void*)&ifa_ldap_error, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fgets = {(void*)&i_hphp_splfileobject_fgets, (void*)&ifa_hphp_splfileobject_fgets, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_static_property = {(void*)&i_hphp_get_static_property, (void*)&ifa_hphp_get_static_property, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_thrift_protocol_read_compact = {(void*)&i_thrift_protocol_read_compact, (void*)&ifa_thrift_protocol_read_compact, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_glob = {(void*)&i_glob, (void*)&ifa_glob, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_decbin = {(void*)&i_decbin, (void*)&ifa_decbin, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_symlink = {(void*)&i_symlink, (void*)&ifa_symlink, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_floor = {(void*)&i_floor, (void*)&ifa_floor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_end_user_func_async = {(void*)&i_end_user_func_async, (void*)&ifa_end_user_func_async, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_dtd_entity = {(void*)&i_xmlwriter_write_dtd_entity, (void*)&ifa_xmlwriter_write_dtd_entity, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_chown = {(void*)&i_chown, (void*)&ifa_chown, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagecompression = {(void*)&i_magickgetimagecompression, (void*)&ifa_magickgetimagecompression, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagealphablending = {(void*)&i_imagealphablending, (void*)&ifa_imagealphablending, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_readlink = {(void*)&i_readlink, (void*)&ifa_readlink, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_idn_to_ascii = {(void*)&i_idn_to_ascii, (void*)&ifa_idn_to_ascii, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_xml_parser_free = {(void*)&i_xml_parser_free, (void*)&ifa_xml_parser_free, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_ecb = {(void*)&i_mcrypt_ecb, (void*)&ifa_mcrypt_ecb, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getgrgid = {(void*)&i_posix_getgrgid, (void*)&ifa_posix_getgrgid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getpathname = {(void*)&i_hphp_splfileinfo_getpathname, (void*)&ifa_hphp_splfileinfo_getpathname, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_zend_version = {(void*)&i_zend_version, (void*)&ifa_zend_version, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathcurvetoquadraticbezierrelative = {(void*)&i_drawpathcurvetoquadraticbezierrelative, (void*)&ifa_drawpathcurvetoquadraticbezierrelative, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzopen = {(void*)&i_gzopen, (void*)&ifa_gzopen, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_select = {(void*)&i_socket_select, (void*)&ifa_socket_select, 5, 0, 0x0000000000000007LL};
extern const CallInfo ci_ini_set = {(void*)&i_ini_set, (void*)&ifa_ini_set, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_set_save_handler = {(void*)&i_session_set_save_handler, (void*)&ifa_session_set_save_handler, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzwrite = {(void*)&i_gzwrite, (void*)&ifa_gzwrite, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagearc = {(void*)&i_imagearc, (void*)&ifa_imagearc, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_service_thread_stopped = {(void*)&i_hphp_service_thread_stopped, (void*)&ifa_hphp_service_thread_stopped, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fopen = {(void*)&i_fopen, (void*)&ifa_fopen, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetexceptiontype = {(void*)&i_magickgetexceptiontype, (void*)&ifa_magickgetexceptiontype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_start = {(void*)&i_ob_start, (void*)&ifa_ob_start, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_writable = {(void*)&i_is_writable, (void*)&ifa_is_writable, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagedepth = {(void*)&i_magicksetimagedepth, (void*)&ifa_magicksetimagedepth, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_listen = {(void*)&i_socket_listen, (void*)&ifa_socket_listen, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_csr_sign = {(void*)&i_openssl_csr_sign, (void*)&ifa_openssl_csr_sign, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_trait_exists = {(void*)&i_trait_exists, (void*)&ifa_trait_exists, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromgd2part = {(void*)&i_imagecreatefromgd2part, (void*)&ifa_imagecreatefromgd2part, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_pi = {(void*)&i_xmlwriter_start_pi, (void*)&ifa_xmlwriter_start_pi, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_setflag_full = {(void*)&i_imap_setflag_full, (void*)&ifa_imap_setflag_full, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_infinite = {(void*)&i_is_infinite, (void*)&ifa_is_infinite, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_thread = {(void*)&i_imap_thread, (void*)&ifa_imap_thread, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_8bit = {(void*)&i_imap_8bit, (void*)&ifa_imap_8bit, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_file = {(void*)&i_hash_file, (void*)&ifa_hash_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_furchash_hphp_ext = {(void*)&i_furchash_hphp_ext, (void*)&ifa_furchash_hphp_ext, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_acos = {(void*)&i_acos, (void*)&ifa_acos, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_multi_close = {(void*)&i_curl_multi_close, (void*)&ifa_curl_multi_close, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_set_error_page = {(void*)&i_hphp_set_error_page, (void*)&ifa_hphp_set_error_page, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fmod = {(void*)&i_fmod, (void*)&ifa_fmod, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_characterdata_replace_data = {(void*)&i_dom_characterdata_replace_data, (void*)&ifa_dom_characterdata_replace_data, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzpassthru = {(void*)&i_gzpassthru, (void*)&ifa_gzpassthru, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_digest = {(void*)&i_openssl_digest, (void*)&ifa_openssl_digest, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_multi_getcontent = {(void*)&i_curl_multi_getcontent, (void*)&ifa_curl_multi_getcontent, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fgetss = {(void*)&i_fgetss, (void*)&ifa_fgetss, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickresampleimage = {(void*)&i_magickresampleimage, (void*)&ifa_magickresampleimage, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickaffinetransformimage = {(void*)&i_magickaffinetransformimage, (void*)&ifa_magickaffinetransformimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepng = {(void*)&i_imagepng, (void*)&ifa_imagepng, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagesettile = {(void*)&i_imagesettile, (void*)&ifa_imagesettile, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzerror = {(void*)&i_bzerror, (void*)&ifa_bzerror, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_metaphone = {(void*)&i_metaphone, (void*)&ifa_metaphone, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzgets = {(void*)&i_gzgets, (void*)&ifa_gzgets, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfontsize = {(void*)&i_drawgetfontsize, (void*)&ifa_drawgetfontsize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfillrule = {(void*)&i_drawsetfillrule, (void*)&ifa_drawsetfillrule, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagesblob = {(void*)&i_magickgetimagesblob, (void*)&ifa_magickgetimagesblob, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickaddnoiseimage = {(void*)&i_magickaddnoiseimage, (void*)&ifa_magickaddnoiseimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_float = {(void*)&i_is_float, (void*)&ifa_is_float, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_increment = {(void*)&i_memcache_increment, (void*)&ifa_memcache_increment, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_rfc822_parse_addresses = {(void*)&i_mailparse_rfc822_parse_addresses, (void*)&ifa_mailparse_rfc822_parse_addresses, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_current = {(void*)&i_hphp_recursivedirectoryiterator_current, (void*)&ifa_hphp_recursivedirectoryiterator_current, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_next = {(void*)&i_next, (void*)&ifa_next, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_is_executable = {(void*)&i_is_executable, (void*)&ifa_is_executable, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_parse_file = {(void*)&i_mailparse_msg_parse_file, (void*)&ifa_mailparse_msg_parse_file, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_set_timeout = {(void*)&i_mysql_set_timeout, (void*)&ifa_mysql_set_timeout, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_write = {(void*)&i_socket_write, (void*)&ifa_socket_write, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickradialblurimage = {(void*)&i_magickradialblurimage, (void*)&ifa_magickradialblurimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagecompressionquality = {(void*)&i_magicksetimagecompressionquality, (void*)&ifa_magicksetimagecompressionquality, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_required_files = {(void*)&i_get_required_files, (void*)&ifa_get_required_files, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_undelete = {(void*)&i_imap_undelete, (void*)&ifa_imap_undelete, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_defined_constants = {(void*)&i_get_defined_constants, (void*)&ifa_get_defined_constants, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetbluequantum = {(void*)&i_pixelgetbluequantum, (void*)&ifa_pixelgetbluequantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagesetstyle = {(void*)&i_imagesetstyle, (void*)&ifa_imagesetstyle, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_wifsignaled = {(void*)&i_pcntl_wifsignaled, (void*)&ifa_pcntl_wifsignaled, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_jpeg2wbmp = {(void*)&i_jpeg2wbmp, (void*)&ifa_jpeg2wbmp, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_sunrise = {(void*)&i_date_sunrise, (void*)&ifa_date_sunrise, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_is_block_algorithm = {(void*)&i_mcrypt_module_is_block_algorithm, (void*)&ifa_mcrypt_module_is_block_algorithm, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_register = {(void*)&i_session_register, (void*)&ifa_session_register, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_sample_enable = {(void*)&i_xhprof_sample_enable, (void*)&ifa_xhprof_sample_enable, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_delete = {(void*)&i_ldap_delete, (void*)&ifa_ldap_delete, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_parallel_query = {(void*)&i_fb_parallel_query, (void*)&ifa_fb_parallel_query, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_regenerate_id = {(void*)&i_session_regenerate_id, (void*)&ifa_session_regenerate_id, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepsloadfont = {(void*)&i_imagepsloadfont, (void*)&ifa_imagepsloadfont, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetmagentaquantum = {(void*)&i_pixelgetmagentaquantum, (void*)&ifa_pixelgetmagentaquantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfontweight = {(void*)&i_drawgetfontweight, (void*)&ifa_drawgetfontweight, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_image2wbmp = {(void*)&i_image2wbmp, (void*)&ifa_image2wbmp, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_get_algorithms_name = {(void*)&i_mcrypt_enc_get_algorithms_name, (void*)&ifa_mcrypt_enc_get_algorithms_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_settype = {(void*)&i_settype, (void*)&ifa_settype, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_fb_const_fetch = {(void*)&i_fb_const_fetch, (void*)&ifa_fb_const_fetch, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_recvfrom = {(void*)&i_socket_recvfrom, (void*)&ifa_socket_recvfrom, 6, 0, 0x0000000000000032LL};
extern const CallInfo ci_drawgettextencoding = {(void*)&i_drawgettextencoding, (void*)&ifa_drawgettextencoding, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_double = {(void*)&i_is_double, (void*)&ifa_is_double, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_thrift_protocol_read_binary = {(void*)&i_thrift_protocol_read_binary, (void*)&ifa_thrift_protocol_read_binary, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_compare = {(void*)&i_ldap_compare, (void*)&ifa_ldap_compare, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickaverageimages = {(void*)&i_magickaverageimages, (void*)&ifa_magickaverageimages, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_element = {(void*)&i_dom_document_create_element, (void*)&ifa_dom_document_create_element, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_task_result = {(void*)&i_xbox_task_result, (void*)&ifa_xbox_task_result, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_localeconv = {(void*)&i_localeconv, (void*)&ifa_localeconv, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagefilledrectangle = {(void*)&i_imagefilledrectangle, (void*)&ifa_imagefilledrectangle, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_csr_export_to_file = {(void*)&i_openssl_csr_export_to_file, (void*)&ifa_openssl_csr_export_to_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_set_id_attribute_ns = {(void*)&i_dom_element_set_id_attribute_ns, (void*)&ifa_dom_element_set_id_attribute_ns, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickpingimage = {(void*)&i_magickpingimage, (void*)&ifa_magickpingimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageindex = {(void*)&i_magicksetimageindex, (void*)&ifa_magicksetimageindex, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imageantialias = {(void*)&i_imageantialias, (void*)&ifa_imageantialias, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_call_info_extra = {(void*)&i_hphp_get_call_info_extra, (void*)&ifa_hphp_get_call_info_extra, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickclipimage = {(void*)&i_magickclipimage, (void*)&ifa_magickclipimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_newdrawingwand = {(void*)&i_newdrawingwand, (void*)&ifa_newdrawingwand, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickswirlimage = {(void*)&i_magickswirlimage, (void*)&ifa_magickswirlimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pagelet_server_task_result = {(void*)&i_pagelet_server_task_result, (void*)&ifa_pagelet_server_task_result, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_newpixeliterator = {(void*)&i_newpixeliterator, (void*)&ifa_newpixeliterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_deletemailbox = {(void*)&i_imap_deletemailbox, (void*)&ifa_imap_deletemailbox, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_thread_is_warmup_enabled = {(void*)&i_hphp_thread_is_warmup_enabled, (void*)&ifa_hphp_thread_is_warmup_enabled, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_pclose = {(void*)&i_pclose, (void*)&ifa_pclose, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageunits = {(void*)&i_magicksetimageunits, (void*)&ifa_magicksetimageunits, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_task_start = {(void*)&i_xbox_task_start, (void*)&ifa_xbox_task_start, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_delete = {(void*)&i_memcache_delete, (void*)&ifa_memcache_delete, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_compare = {(void*)&i_collator_compare, (void*)&ifa_collator_compare, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_mime_header_decode = {(void*)&i_imap_mime_header_decode, (void*)&ifa_imap_mime_header_decode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_filter_prepend = {(void*)&i_stream_filter_prepend, (void*)&ifa_stream_filter_prepend, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_token_name = {(void*)&i_token_name, (void*)&ifa_token_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_flush = {(void*)&i_flush, (void*)&ifa_flush, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_search = {(void*)&i_ldap_search, (void*)&ifa_ldap_search, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_create_function = {(void*)&i_create_function, (void*)&ifa_create_function, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_thread_set_warmup_enabled = {(void*)&i_hphp_thread_set_warmup_enabled, (void*)&ifa_hphp_thread_set_warmup_enabled, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorresolve = {(void*)&i_imagecolorresolve, (void*)&ifa_imagecolorresolve, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetnextiteratorrow = {(void*)&i_pixelgetnextiteratorrow, (void*)&ifa_pixelgetnextiteratorrow, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsettextdecoration = {(void*)&i_drawsettextdecoration, (void*)&ifa_drawsettextdecoration, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_getcvscontrol = {(void*)&i_hphp_splfileobject_getcvscontrol, (void*)&ifa_hphp_splfileobject_getcvscontrol, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickfximage = {(void*)&i_magickfximage, (void*)&ifa_magickfximage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_commit = {(void*)&i_session_commit, (void*)&ifa_session_commit, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_get_privatekey = {(void*)&i_openssl_get_privatekey, (void*)&ifa_openssl_get_privatekey, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mt_srand = {(void*)&i_mt_srand, (void*)&ifa_mt_srand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawarc = {(void*)&i_drawarc, (void*)&ifa_drawarc, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_msg_queue_exists = {(void*)&i_msg_queue_exists, (void*)&ifa_msg_queue_exists, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_strtotime = {(void*)&i_strtotime, (void*)&ifa_strtotime, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_thread_id = {(void*)&i_hphp_get_thread_id, (void*)&ifa_hphp_get_thread_id, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_feof = {(void*)&i_feof, (void*)&ifa_feof, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksteganoimage = {(void*)&i_magicksteganoimage, (void*)&ifa_magicksteganoimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getfilename = {(void*)&i_hphp_splfileinfo_getfilename, (void*)&ifa_hphp_splfileinfo_getfilename, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_pop = {(void*)&i_array_pop, (void*)&ifa_array_pop, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_memcache_get = {(void*)&i_memcache_get, (void*)&ifa_memcache_get, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_magicklevelimage = {(void*)&i_magicklevelimage, (void*)&ifa_magicklevelimage, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_opendir = {(void*)&i_opendir, (void*)&ifa_opendir, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetsamplingfactors = {(void*)&i_magicksetsamplingfactors, (void*)&ifa_magicksetsamplingfactors, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_pad = {(void*)&i_array_pad, (void*)&ifa_array_pad, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_split = {(void*)&i_split, (void*)&ifa_split, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_atanh = {(void*)&i_atanh, (void*)&ifa_atanh, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_characterdata_append_data = {(void*)&i_dom_characterdata_append_data, (void*)&ifa_dom_characterdata_append_data, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_cleardrawingwand = {(void*)&i_cleardrawingwand, (void*)&ifa_cleardrawingwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_element_handler = {(void*)&i_xml_set_element_handler, (void*)&ifa_xml_set_element_handler, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dechex = {(void*)&i_dechex, (void*)&ifa_dechex, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_normalize_document = {(void*)&i_dom_document_normalize_document, (void*)&ifa_dom_document_normalize_document, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_socket_accept = {(void*)&i_stream_socket_accept, (void*)&ifa_stream_socket_accept, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_pagelet_server_task_status = {(void*)&i_pagelet_server_task_status, (void*)&ifa_pagelet_server_task_status, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagettftext = {(void*)&i_imagettftext, (void*)&ifa_imagettftext, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_shm_attach = {(void*)&i_shm_attach, (void*)&ifa_shm_attach, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagecompose = {(void*)&i_magicksetimagecompose, (void*)&ifa_magicksetimagecompose, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_chdir = {(void*)&i_chdir, (void*)&ifa_chdir, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetexception = {(void*)&i_magickgetexception, (void*)&ifa_magickgetexception, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_get_part_data = {(void*)&i_mailparse_msg_get_part_data, (void*)&ifa_mailparse_msg_get_part_data, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_chroot = {(void*)&i_chroot, (void*)&ifa_chroot, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_exif_tagname = {(void*)&i_exif_tagname, (void*)&ifa_exif_tagname, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_crypt = {(void*)&i_crypt, (void*)&ifa_crypt, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_levenshtein = {(void*)&i_levenshtein, (void*)&ifa_levenshtein, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_send = {(void*)&i_socket_send, (void*)&ifa_socket_send, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_resource_type = {(void*)&i_get_resource_type, (void*)&ifa_get_resource_type, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_get_dn = {(void*)&i_ldap_get_dn, (void*)&ifa_ldap_get_dn, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_abs = {(void*)&i_abs, (void*)&ifa_abs, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_decode_numericentity = {(void*)&i_mb_decode_numericentity, (void*)&ifa_mb_decode_numericentity, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_clock_settime = {(void*)&i_clock_settime, (void*)&ifa_clock_settime, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetiteratorrow = {(void*)&i_pixelsetiteratorrow, (void*)&ifa_pixelsetiteratorrow, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetcliprule = {(void*)&i_drawsetcliprule, (void*)&ifa_drawsetcliprule, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetclippath = {(void*)&i_drawsetclippath, (void*)&ifa_drawsetclippath, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strrpos = {(void*)&i_mb_strrpos, (void*)&ifa_mb_strrpos, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_next_entry = {(void*)&i_ldap_next_entry, (void*)&ifa_ldap_next_entry, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetfilename = {(void*)&i_magickgetfilename, (void*)&ifa_magickgetfilename, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_free_result = {(void*)&i_mysql_free_result, (void*)&ifa_mysql_free_result, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagecolorspace = {(void*)&i_magickgetimagecolorspace, (void*)&ifa_magickgetimagecolorspace, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_convert_encoding = {(void*)&i_mb_convert_encoding, (void*)&ifa_mb_convert_encoding, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_error_reporting = {(void*)&i_error_reporting, (void*)&ifa_error_reporting, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_object_vars = {(void*)&i_get_object_vars, (void*)&ifa_get_object_vars, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_bindec = {(void*)&i_bindec, (void*)&ifa_bindec, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_get_modes_name = {(void*)&i_mcrypt_enc_get_modes_name, (void*)&ifa_mcrypt_enc_get_modes_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_get_clean = {(void*)&i_ob_get_clean, (void*)&ifa_ob_get_clean, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagedelay = {(void*)&i_magicksetimagedelay, (void*)&ifa_magicksetimagedelay, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_sem_get = {(void*)&i_sem_get, (void*)&ifa_sem_get, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_iswritable = {(void*)&i_hphp_splfileinfo_iswritable, (void*)&ifa_hphp_splfileinfo_iswritable, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_context_set_option = {(void*)&i_stream_context_set_option, (void*)&ifa_stream_context_set_option, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageresolution = {(void*)&i_magickgetimageresolution, (void*)&ifa_magickgetimageresolution, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_digit = {(void*)&i_ctype_digit, (void*)&ifa_ctype_digit, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_parse_into_struct = {(void*)&i_xml_parse_into_struct, (void*)&ifa_xml_parse_into_struct, 4, 0, 0x000000000000000CLL};
extern const CallInfo ci_nl_langinfo = {(void*)&i_nl_langinfo, (void*)&ifa_nl_langinfo, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_each = {(void*)&i_each, (void*)&ifa_each, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_dns_get_record = {(void*)&i_dns_get_record, (void*)&ifa_dns_get_record, 4, 0, 0x000000000000000CLL};
extern const CallInfo ci_mysql_list_fields = {(void*)&i_mysql_list_fields, (void*)&ifa_mysql_list_fields, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_ofb = {(void*)&i_mcrypt_ofb, (void*)&ifa_mcrypt_ofb, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolordeallocate = {(void*)&i_imagecolordeallocate, (void*)&ifa_imagecolordeallocate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfontsize = {(void*)&i_drawsetfontsize, (void*)&ifa_drawsetfontsize, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathcurvetorelative = {(void*)&i_drawpathcurvetorelative, (void*)&ifa_drawpathcurvetorelative, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagechar = {(void*)&i_imagechar, (void*)&ifa_imagechar, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_random_pseudo_bytes = {(void*)&i_openssl_random_pseudo_bytes, (void*)&ifa_openssl_random_pseudo_bytes, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_session_cache_limiter = {(void*)&i_session_cache_limiter, (void*)&ifa_session_cache_limiter, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_filter_remove = {(void*)&i_stream_filter_remove, (void*)&ifa_stream_filter_remove, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagefttext = {(void*)&i_imagefttext, (void*)&ifa_imagefttext, 9, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagescene = {(void*)&i_magickgetimagescene, (void*)&ifa_magickgetimagescene, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hypot = {(void*)&i_hypot, (void*)&ifa_hypot, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagewhitepoint = {(void*)&i_magicksetimagewhitepoint, (void*)&ifa_magicksetimagewhitepoint, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_arsort = {(void*)&i_arsort, (void*)&ifa_arsort, 3, 0, 0x0000000000000001LL};
extern const CallInfo ci_simplexml_load_string = {(void*)&i_simplexml_load_string, (void*)&ifa_simplexml_load_string, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_reverse = {(void*)&i_array_reverse, (void*)&ifa_array_reverse, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorset = {(void*)&i_imagecolorset, (void*)&ifa_imagecolorset, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetlastiterator = {(void*)&i_magicksetlastiterator, (void*)&ifa_magicksetlastiterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathstart = {(void*)&i_drawpathstart, (void*)&ifa_drawpathstart, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicklabelimage = {(void*)&i_magicklabelimage, (void*)&ifa_magicklabelimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_use_soap_error_handler = {(void*)&i_use_soap_error_handler, (void*)&ifa_use_soap_error_handler, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_update = {(void*)&i_hash_update, (void*)&ifa_hash_update, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_file_get_contents = {(void*)&i_file_get_contents, (void*)&ifa_file_get_contents, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_set_cookie_params = {(void*)&i_session_set_cookie_params, (void*)&ifa_session_set_cookie_params, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_push = {(void*)&i_array_push, (void*)&ifa_array_push, 2, 1, 0x0000000000000001LL};
extern const CallInfo ci_drawgetexception = {(void*)&i_drawgetexception, (void*)&ifa_drawgetexception, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_errno = {(void*)&i_ldap_errno, (void*)&ifa_ldap_errno, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_move_uploaded_file = {(void*)&i_move_uploaded_file, (void*)&ifa_move_uploaded_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetfirstiterator = {(void*)&i_magicksetfirstiterator, (void*)&ifa_magicksetfirstiterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_soundex = {(void*)&i_soundex, (void*)&ifa_soundex, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_unparsed_entity_decl_handler = {(void*)&i_xml_set_unparsed_entity_decl_handler, (void*)&ifa_xml_set_unparsed_entity_decl_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_sum = {(void*)&i_array_sum, (void*)&ifa_array_sum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_get_last_error = {(void*)&i_posix_get_last_error, (void*)&ifa_posix_get_last_error, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_fetchheader = {(void*)&i_imap_fetchheader, (void*)&ifa_imap_fetchheader, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_file_exists = {(void*)&i_file_exists, (void*)&ifa_file_exists, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathcurvetoquadraticbeziersmoothabsolute = {(void*)&i_drawpathcurvetoquadraticbeziersmoothabsolute, (void*)&ifa_drawpathcurvetoquadraticbeziersmoothabsolute, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_declared_interfaces = {(void*)&i_get_declared_interfaces, (void*)&ifa_get_declared_interfaces, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetcyanquantum = {(void*)&i_pixelgetcyanquantum, (void*)&ifa_pixelgetcyanquantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_diff_ukey = {(void*)&i_array_diff_ukey, (void*)&ifa_array_diff_ukey, 3, 1, 0x0000000000000000LL};
extern const CallInfo ci_log1p = {(void*)&i_log1p, (void*)&ifa_log1p, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmedianfilterimage = {(void*)&i_magickmedianfilterimage, (void*)&ifa_magickmedianfilterimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getowner = {(void*)&i_hphp_splfileinfo_getowner, (void*)&ifa_hphp_splfileinfo_getowner, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetgravity = {(void*)&i_drawgetgravity, (void*)&ifa_drawgetgravity, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_frame_begin = {(void*)&i_xhprof_frame_begin, (void*)&ifa_xhprof_frame_begin, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_uploaded_file = {(void*)&i_is_uploaded_file, (void*)&ifa_is_uploaded_file, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_flock = {(void*)&i_hphp_splfileobject_flock, (void*)&ifa_hphp_splfileobject_flock, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_curl_setopt = {(void*)&i_curl_setopt, (void*)&ifa_curl_setopt, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_error = {(void*)&i_mysql_error, (void*)&ifa_mysql_error, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_drop_db = {(void*)&i_mysql_drop_db, (void*)&ifa_mysql_drop_db, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_is_service_thread = {(void*)&i_hphp_is_service_thread, (void*)&ifa_hphp_is_service_thread, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_set_thread_timeout = {(void*)&i_xbox_set_thread_timeout, (void*)&ifa_xbox_set_thread_timeout, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_flush = {(void*)&i_xmlwriter_flush, (void*)&ifa_xmlwriter_flush, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getpgid = {(void*)&i_posix_getpgid, (void*)&ifa_posix_getpgid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_destroy = {(void*)&i_session_destroy, (void*)&ifa_session_destroy, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_sinh = {(void*)&i_sinh, (void*)&ifa_sinh, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_doubleval = {(void*)&i_doubleval, (void*)&ifa_doubleval, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_listmailbox = {(void*)&i_imap_listmailbox, (void*)&ifa_imap_listmailbox, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_bucket_new = {(void*)&i_stream_bucket_new, (void*)&ifa_stream_bucket_new, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_hmac_file = {(void*)&i_hash_hmac_file, (void*)&ifa_hash_hmac_file, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetpassphrase = {(void*)&i_magicksetpassphrase, (void*)&ifa_magicksetpassphrase, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_flip = {(void*)&i_array_flip, (void*)&ifa_array_flip, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fpassthru = {(void*)&i_fpassthru, (void*)&ifa_fpassthru, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_rmdir = {(void*)&i_rmdir, (void*)&ifa_rmdir, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_post_message = {(void*)&i_xbox_post_message, (void*)&ifa_xbox_post_message, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_preg_grep = {(void*)&i_preg_grep, (void*)&ifa_preg_grep, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzdeflate = {(void*)&i_gzdeflate, (void*)&ifa_gzdeflate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_headers_sent = {(void*)&i_headers_sent, (void*)&ifa_headers_sent, 2, 0, 0x0000000000000003LL};
extern const CallInfo ci_clearpixelwand = {(void*)&i_clearpixelwand, (void*)&ifa_clearpixelwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_microtime = {(void*)&i_microtime, (void*)&ifa_microtime, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsettextalignment = {(void*)&i_drawsettextalignment, (void*)&ifa_drawsettextalignment, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_alerts = {(void*)&i_imap_alerts, (void*)&ifa_imap_alerts, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mail = {(void*)&i_mail, (void*)&ifa_mail, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_db_query = {(void*)&i_mysql_db_query, (void*)&ifa_mysql_db_query, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_explode = {(void*)&i_explode, (void*)&ifa_explode, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dirname = {(void*)&i_dirname, (void*)&ifa_dirname, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_called_class = {(void*)&i_get_called_class, (void*)&ifa_get_called_class, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ini_alter = {(void*)&i_ini_alter, (void*)&ifa_ini_alter, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_php_logo_guid = {(void*)&i_php_logo_guid, (void*)&ifa_php_logo_guid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_set_error_handler = {(void*)&i_set_error_handler, (void*)&ifa_set_error_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_text_node = {(void*)&i_dom_document_create_text_node, (void*)&ifa_dom_document_create_text_node, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_libxml_set_streams_context = {(void*)&i_libxml_set_streams_context, (void*)&ifa_libxml_set_streams_context, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_create_db = {(void*)&i_mysql_create_db, (void*)&ifa_mysql_create_db, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_create_pair = {(void*)&i_socket_create_pair, (void*)&ifa_socket_create_pair, 4, 0, 0x0000000000000008LL};
extern const CallInfo ci_shm_get_var = {(void*)&i_shm_get_var, (void*)&ifa_shm_get_var, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fgetc = {(void*)&i_fgetc, (void*)&ifa_fgetc, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_wrapper_restore = {(void*)&i_stream_wrapper_restore, (void*)&ifa_stream_wrapper_restore, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagesy = {(void*)&i_imagesy, (void*)&ifa_imagesy, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fclose = {(void*)&i_fclose, (void*)&ifa_fclose, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetindex = {(void*)&i_pixelsetindex, (void*)&ifa_pixelsetindex, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_parser_get_option = {(void*)&i_xml_parser_get_option, (void*)&ifa_xml_parser_get_option, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_prev = {(void*)&i_prev, (void*)&ifa_prev, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_hphp_splfileobject_setflags = {(void*)&i_hphp_splfileobject_setflags, (void*)&ifa_hphp_splfileobject_setflags, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_set_server_params = {(void*)&i_memcache_set_server_params, (void*)&ifa_memcache_set_server_params, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_gztell = {(void*)&i_gztell, (void*)&ifa_gztell, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ltrim = {(void*)&i_ltrim, (void*)&ifa_ltrim, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickstripimage = {(void*)&i_magickstripimage, (void*)&ifa_magickstripimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_update_file = {(void*)&i_hash_update_file, (void*)&ifa_hash_update_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_unlink = {(void*)&i_unlink, (void*)&ifa_unlink, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzdecompress = {(void*)&i_bzdecompress, (void*)&ifa_bzdecompress, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_wait = {(void*)&i_pcntl_wait, (void*)&ifa_pcntl_wait, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_strrchr = {(void*)&i_strrchr, (void*)&ifa_strrchr, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorat = {(void*)&i_imagecolorat, (void*)&ifa_imagecolorat, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_clean = {(void*)&i_ob_clean, (void*)&ifa_ob_clean, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_map = {(void*)&i_array_map, (void*)&ifa_array_map, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_ldap_parse_reference = {(void*)&i_ldap_parse_reference, (void*)&ifa_ldap_parse_reference, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_mysql_get_proto_info = {(void*)&i_mysql_get_proto_info, (void*)&ifa_mysql_get_proto_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_libxml_clear_errors = {(void*)&i_libxml_clear_errors, (void*)&ifa_libxml_clear_errors, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawannotation = {(void*)&i_drawannotation, (void*)&ifa_drawannotation, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_dir = {(void*)&i_dir, (void*)&ifa_dir, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_gettimeofday = {(void*)&i_gettimeofday, (void*)&ifa_gettimeofday, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawcolor = {(void*)&i_drawcolor, (void*)&ifa_drawcolor, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_disable_code_coverage = {(void*)&i_fb_disable_code_coverage, (void*)&ifa_fb_disable_code_coverage, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_initgroups = {(void*)&i_posix_initgroups, (void*)&ifa_posix_initgroups, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsynciterator = {(void*)&i_pixelsynciterator, (void*)&ifa_pixelsynciterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagesetthickness = {(void*)&i_imagesetthickness, (void*)&ifa_imagesetthickness, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fread = {(void*)&i_fread, (void*)&ifa_fread, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_task_status = {(void*)&i_xbox_task_status, (void*)&ifa_xbox_task_status, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetstringheight = {(void*)&i_magickgetstringheight, (void*)&ifa_magickgetstringheight, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcolorizeimage = {(void*)&i_magickcolorizeimage, (void*)&ifa_magickcolorizeimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_chunk_split = {(void*)&i_chunk_split, (void*)&ifa_chunk_split, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_image_type_to_extension = {(void*)&i_image_type_to_extension, (void*)&ifa_image_type_to_extension, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_krsort = {(void*)&i_krsort, (void*)&ifa_krsort, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_pcntl_wstopsig = {(void*)&i_pcntl_wstopsig, (void*)&ifa_pcntl_wstopsig, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagefilledarc = {(void*)&i_imagefilledarc, (void*)&ifa_imagefilledarc, 9, 0, 0x0000000000000000LL};
extern const CallInfo ci_intl_get_error_message = {(void*)&i_intl_get_error_message, (void*)&ifa_intl_get_error_message, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fscanf = {(void*)&i_hphp_splfileobject_fscanf, (void*)&ifa_hphp_splfileobject_fscanf, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_eregi_replace = {(void*)&i_eregi_replace, (void*)&ifa_eregi_replace, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_get_supported_key_sizes = {(void*)&i_mcrypt_module_get_supported_key_sizes, (void*)&ifa_mcrypt_module_get_supported_key_sizes, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hebrevc = {(void*)&i_hebrevc, (void*)&ifa_hebrevc, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_str_rot13 = {(void*)&i_str_rot13, (void*)&ifa_str_rot13, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageformat = {(void*)&i_magickgetimageformat, (void*)&ifa_magickgetimageformat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_sample_disable = {(void*)&i_xhprof_sample_disable, (void*)&ifa_xhprof_sample_disable, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_thread_id = {(void*)&i_mysql_thread_id, (void*)&ifa_mysql_thread_id, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_close = {(void*)&i_socket_close, (void*)&ifa_socket_close, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_rawurldecode = {(void*)&i_rawurldecode, (void*)&ifa_rawurldecode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getpath = {(void*)&i_hphp_splfileinfo_getpath, (void*)&ifa_hphp_splfileinfo_getpath, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_getacl = {(void*)&i_imap_getacl, (void*)&ifa_imap_getacl, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagefontheight = {(void*)&i_imagefontheight, (void*)&ifa_imagefontheight, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_reopen = {(void*)&i_imap_reopen, (void*)&ifa_imap_reopen, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_getenv = {(void*)&i_getenv, (void*)&ifa_getenv, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_virtual = {(void*)&i_virtual, (void*)&ifa_virtual, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fpassthru = {(void*)&i_hphp_splfileobject_fpassthru, (void*)&ifa_hphp_splfileobject_fpassthru, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getlastmod = {(void*)&i_getlastmod, (void*)&ifa_getlastmod, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_timezone_name_from_abbr = {(void*)&i_timezone_name_from_abbr, (void*)&ifa_timezone_name_from_abbr, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_language = {(void*)&i_mb_language, (void*)&ifa_mb_language, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathlinetohorizontalabsolute = {(void*)&i_drawpathlinetohorizontalabsolute, (void*)&ifa_drawpathlinetohorizontalabsolute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_rfc822_parse_headers = {(void*)&i_imap_rfc822_parse_headers, (void*)&ifa_imap_rfc822_parse_headers, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_multi_remove_handle = {(void*)&i_curl_multi_remove_handle, (void*)&ifa_curl_multi_remove_handle, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzread = {(void*)&i_bzread, (void*)&ifa_bzread, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_setcsvcontrol = {(void*)&i_hphp_splfileobject_setcsvcontrol, (void*)&ifa_hphp_splfileobject_setcsvcontrol, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_status = {(void*)&i_hphp_get_status, (void*)&ifa_hphp_get_status, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_list_dbs = {(void*)&i_mysql_list_dbs, (void*)&ifa_mysql_list_dbs, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apache_get_scoreboard = {(void*)&i_apache_get_scoreboard, (void*)&ifa_apache_get_scoreboard, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_interface_exists = {(void*)&i_interface_exists, (void*)&ifa_interface_exists, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcolorfloodfillimage = {(void*)&i_magickcolorfloodfillimage, (void*)&ifa_magickcolorfloodfillimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_document = {(void*)&i_xmlwriter_start_document, (void*)&ifa_xmlwriter_start_document, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator___tostring = {(void*)&i_hphp_recursivedirectoryiterator___tostring, (void*)&ifa_hphp_recursivedirectoryiterator___tostring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_chr = {(void*)&i_chr, (void*)&ifa_chr, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_server = {(void*)&i_socket_server, (void*)&ifa_socket_server, 4, 0, 0x000000000000000CLL};
extern const CallInfo ci_ereg_replace = {(void*)&i_ereg_replace, (void*)&ifa_ereg_replace, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_get_publickey = {(void*)&i_openssl_get_publickey, (void*)&ifa_openssl_get_publickey, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_update_stream = {(void*)&i_hash_update_stream, (void*)&ifa_hash_update_stream, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkcs7_sign = {(void*)&i_openssl_pkcs7_sign, (void*)&ifa_openssl_pkcs7_sign, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathlinetoverticalabsolute = {(void*)&i_drawpathlinetoverticalabsolute, (void*)&ifa_drawpathlinetoverticalabsolute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_combine = {(void*)&i_array_combine, (void*)&ifa_array_combine, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_filetype = {(void*)&i_filetype, (void*)&ifa_filetype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_set_taint = {(void*)&i_fb_set_taint, (void*)&ifa_fb_set_taint, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_key_exists = {(void*)&i_key_exists, (void*)&ifa_key_exists, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_add_server = {(void*)&i_memcache_add_server, (void*)&ifa_memcache_add_server, 10, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_soap_fault = {(void*)&i_is_soap_fault, (void*)&ifa_is_soap_fault, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_directoryiterator_isdot = {(void*)&i_hphp_directoryiterator_isdot, (void*)&ifa_hphp_directoryiterator_isdot, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagesavealpha = {(void*)&i_imagesavealpha, (void*)&ifa_imagesavealpha, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_shm_remove = {(void*)&i_shm_remove, (void*)&ifa_shm_remove, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageextrema = {(void*)&i_magickgetimageextrema, (void*)&ifa_magickgetimageextrema, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_get_server_status = {(void*)&i_memcache_get_server_status, (void*)&ifa_memcache_get_server_status, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_shutdown = {(void*)&i_socket_shutdown, (void*)&ifa_socket_shutdown, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetcompressionquality = {(void*)&i_magicksetcompressionquality, (void*)&ifa_magicksetcompressionquality, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_is_registered = {(void*)&i_session_is_registered, (void*)&ifa_session_is_registered, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagefilename = {(void*)&i_magicksetimagefilename, (void*)&ifa_magicksetimagefilename, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickaddimage = {(void*)&i_magickaddimage, (void*)&ifa_magickaddimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_get_supported_key_sizes = {(void*)&i_mcrypt_enc_get_supported_key_sizes, (void*)&ifa_mcrypt_enc_get_supported_key_sizes, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_get_flush_stat = {(void*)&i_fb_get_flush_stat, (void*)&ifa_fb_get_flush_stat, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_exif_thumbnail = {(void*)&i_exif_thumbnail, (void*)&ifa_exif_thumbnail, 4, 0, 0x000000000000000ELL};
extern const CallInfo ci_mkdir = {(void*)&i_mkdir, (void*)&ifa_mkdir, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_iconv_strpos = {(void*)&i_iconv_strpos, (void*)&ifa_iconv_strpos, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_checkdate = {(void*)&i_checkdate, (void*)&ifa_checkdate, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_udiff_assoc = {(void*)&i_array_udiff_assoc, (void*)&ifa_array_udiff_assoc, 3, 1, 0x0000000000000000LL};
extern const CallInfo ci_msg_stat_queue = {(void*)&i_msg_stat_queue, (void*)&ifa_msg_stat_queue, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_copy = {(void*)&i_copy, (void*)&ifa_copy, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_network_disable = {(void*)&i_xhprof_network_disable, (void*)&ifa_xhprof_network_disable, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_json_encode = {(void*)&i_json_encode, (void*)&ifa_json_encode, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_getrusage = {(void*)&i_getrusage, (void*)&ifa_getrusage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_read = {(void*)&i_socket_read, (void*)&ifa_socket_read, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_key = {(void*)&i_hphp_splfileobject_key, (void*)&ifa_hphp_splfileobject_key, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_setuid = {(void*)&i_posix_setuid, (void*)&ifa_posix_setuid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_attribute_ns = {(void*)&i_xmlwriter_write_attribute_ns, (void*)&ifa_xmlwriter_write_attribute_ns, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_finite = {(void*)&i_is_finite, (void*)&ifa_is_finite, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_destroypixelwandarray = {(void*)&i_destroypixelwandarray, (void*)&ifa_destroypixelwandarray, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_clear_hardware_events = {(void*)&i_hphp_clear_hardware_events, (void*)&ifa_hphp_clear_hardware_events, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgettextalignment = {(void*)&i_drawgettextalignment, (void*)&ifa_drawgettextalignment, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicknegateimage = {(void*)&i_magicknegateimage, (void*)&ifa_magicknegateimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_num_msg = {(void*)&i_imap_num_msg, (void*)&ifa_imap_num_msg, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_get_block_size = {(void*)&i_mcrypt_enc_get_block_size, (void*)&ifa_mcrypt_enc_get_block_size, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetclipunits = {(void*)&i_drawsetclipunits, (void*)&ifa_drawsetclipunits, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_enable = {(void*)&i_xhprof_enable, (void*)&ifa_xhprof_enable, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickdeconstructimages = {(void*)&i_magickdeconstructimages, (void*)&ifa_magickdeconstructimages, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hexdec = {(void*)&i_hexdec, (void*)&ifa_hexdec, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorstotal = {(void*)&i_imagecolorstotal, (void*)&ifa_imagecolorstotal, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_utf8_substr = {(void*)&i_fb_utf8_substr, (void*)&ifa_fb_utf8_substr, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_ctermid = {(void*)&i_posix_ctermid, (void*)&ifa_posix_ctermid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_png2wbmp = {(void*)&i_png2wbmp, (void*)&ifa_png2wbmp, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_method = {(void*)&i_call_user_method, (void*)&ifa_call_user_method, 2, 1, 0x0000000000000002LL};
extern const CallInfo ci_posix_getlogin = {(void*)&i_posix_getlogin, (void*)&ifa_posix_getlogin, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecopyresampled = {(void*)&i_imagecopyresampled, (void*)&ifa_imagecopyresampled, 10, 0, 0x0000000000000000LL};
extern const CallInfo ci_proc_nice = {(void*)&i_proc_nice, (void*)&ifa_proc_nice, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagecolorspace = {(void*)&i_magicksetimagecolorspace, (void*)&ifa_magicksetimagecolorspace, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bcscale = {(void*)&i_bcscale, (void*)&ifa_bcscale, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetcopyright = {(void*)&i_magickgetcopyright, (void*)&ifa_magickgetcopyright, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_context_get_options = {(void*)&i_stream_context_get_options, (void*)&ifa_stream_context_get_options, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getrandmax = {(void*)&i_getrandmax, (void*)&ifa_getrandmax, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_highlight_file = {(void*)&i_highlight_file, (void*)&ifa_highlight_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_fetch_object = {(void*)&i_mysql_fetch_object, (void*)&ifa_mysql_fetch_object, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_urldecode = {(void*)&i_urldecode, (void*)&ifa_urldecode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_keys = {(void*)&i_array_keys, (void*)&ifa_array_keys, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_seek = {(void*)&i_hphp_splfileobject_seek, (void*)&ifa_hphp_splfileobject_seek, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorsforindex = {(void*)&i_imagecolorsforindex, (void*)&ifa_imagecolorsforindex, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_rename = {(void*)&i_ldap_rename, (void*)&ifa_ldap_rename, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_directoryiterator_next = {(void*)&i_hphp_directoryiterator_next, (void*)&ifa_hphp_directoryiterator_next, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagecolormapcolor = {(void*)&i_magickgetimagecolormapcolor, (void*)&ifa_magickgetimagecolormapcolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_sun_info = {(void*)&i_date_sun_info, (void*)&ifa_date_sun_info, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_select = {(void*)&i_stream_select, (void*)&ifa_stream_select, 5, 0, 0x0000000000000007LL};
extern const CallInfo ci_xml_set_end_namespace_decl_handler = {(void*)&i_xml_set_end_namespace_decl_handler, (void*)&ifa_xml_set_end_namespace_decl_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gethostbynamel = {(void*)&i_gethostbynamel, (void*)&ifa_gethostbynamel, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_version = {(void*)&i_curl_version, (void*)&ifa_curl_version, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ispixeliterator = {(void*)&i_ispixeliterator, (void*)&ifa_ispixeliterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_get_elements_by_tag_name = {(void*)&i_dom_element_get_elements_by_tag_name, (void*)&ifa_dom_element_get_elements_by_tag_name, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzerrstr = {(void*)&i_bzerrstr, (void*)&ifa_bzerrstr, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_field_flags = {(void*)&i_mysql_field_flags, (void*)&ifa_mysql_field_flags, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_isreadable = {(void*)&i_hphp_splfileinfo_isreadable, (void*)&ifa_hphp_splfileinfo_isreadable, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_proc_open = {(void*)&i_proc_open, (void*)&ifa_proc_open, 6, 0, 0x0000000000000004LL};
extern const CallInfo ci_imagettfbbox = {(void*)&i_imagettfbbox, (void*)&ifa_imagettfbbox, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_open_memory = {(void*)&i_xmlwriter_open_memory, (void*)&ifa_xmlwriter_open_memory, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_determine_best_xfer_encoding = {(void*)&i_mailparse_determine_best_xfer_encoding, (void*)&ifa_mailparse_determine_best_xfer_encoding, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetvectorgraphics = {(void*)&i_drawgetvectorgraphics, (void*)&ifa_drawgetvectorgraphics, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getdate = {(void*)&i_getdate, (void*)&ifa_getdate, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromgd2 = {(void*)&i_imagecreatefromgd2, (void*)&ifa_imagecreatefromgd2, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_get_locale = {(void*)&i_collator_get_locale, (void*)&ifa_collator_get_locale, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_wexitstatus = {(void*)&i_pcntl_wexitstatus, (void*)&ifa_pcntl_wexitstatus, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apd_set_session_trace_socket = {(void*)&i_apd_set_session_trace_socket, (void*)&ifa_apd_set_session_trace_socket, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_filectime = {(void*)&i_filectime, (void*)&ifa_filectime, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getopt = {(void*)&i_getopt, (void*)&ifa_getopt, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_get_key_size = {(void*)&i_mcrypt_get_key_size, (void*)&ifa_mcrypt_get_key_size, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gethostbyname = {(void*)&i_gethostbyname, (void*)&ifa_gethostbyname, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_bin_load = {(void*)&i_apc_bin_load, (void*)&ifa_apc_bin_load, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_context_get_default = {(void*)&i_stream_context_get_default, (void*)&ifa_stream_context_get_default, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_qlzuncompress = {(void*)&i_qlzuncompress, (void*)&ifa_qlzuncompress, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_snuncompress = {(void*)&i_snuncompress, (void*)&ifa_snuncompress, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_umask = {(void*)&i_umask, (void*)&ifa_umask, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_udiff_uassoc = {(void*)&i_array_udiff_uassoc, (void*)&ifa_array_udiff_uassoc, 4, 1, 0x0000000000000000LL};
extern const CallInfo ci_iconv_set_encoding = {(void*)&i_iconv_set_encoding, (void*)&ifa_iconv_set_encoding, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepsfreefont = {(void*)&i_imagepsfreefont, (void*)&ifa_imagepsfreefont, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagedispose = {(void*)&i_magicksetimagedispose, (void*)&ifa_magicksetimagedispose, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokewidth = {(void*)&i_drawsetstrokewidth, (void*)&ifa_drawsetstrokewidth, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_geteuid = {(void*)&i_posix_geteuid, (void*)&ifa_posix_geteuid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_error = {(void*)&i_curl_error, (void*)&ifa_curl_error, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_close = {(void*)&i_curl_close, (void*)&ifa_curl_close, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_public_decrypt = {(void*)&i_openssl_public_decrypt, (void*)&ifa_openssl_public_decrypt, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_drawsetvectorgraphics = {(void*)&i_drawsetvectorgraphics, (void*)&ifa_drawsetvectorgraphics, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_get_current_line_number = {(void*)&i_xml_get_current_line_number, (void*)&ifa_xml_get_current_line_number, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_errno = {(void*)&i_curl_errno, (void*)&ifa_curl_errno, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawcomment = {(void*)&i_drawcomment, (void*)&ifa_drawcomment, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_basename = {(void*)&i_basename, (void*)&ifa_basename, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmotionblurimage = {(void*)&i_magickmotionblurimage, (void*)&ifa_magickmotionblurimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickspreadimage = {(void*)&i_magickspreadimage, (void*)&ifa_magickspreadimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetquantumcolor = {(void*)&i_pixelsetquantumcolor, (void*)&ifa_pixelsetquantumcolor, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_fsockopen = {(void*)&i_fsockopen, (void*)&ifa_fsockopen, 5, 0, 0x000000000000000CLL};
extern const CallInfo ci_xmlwriter_end_dtd_attlist = {(void*)&i_xmlwriter_end_dtd_attlist, (void*)&ifa_xmlwriter_end_dtd_attlist, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_msg_get_queue = {(void*)&i_msg_get_queue, (void*)&ifa_msg_get_queue, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_utf8_encode = {(void*)&i_utf8_encode, (void*)&ifa_utf8_encode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_destroypixeliterator = {(void*)&i_destroypixeliterator, (void*)&ifa_destroypixeliterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawbezier = {(void*)&i_drawbezier, (void*)&ifa_drawbezier, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_substr_compare = {(void*)&i_substr_compare, (void*)&ifa_substr_compare, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getmtime = {(void*)&i_hphp_splfileinfo_getmtime, (void*)&ifa_hphp_splfileinfo_getmtime, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_parse_hdf_string = {(void*)&i_parse_hdf_string, (void*)&ifa_parse_hdf_string, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strwidth = {(void*)&i_mb_strwidth, (void*)&ifa_mb_strwidth, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_add = {(void*)&i_apc_add, (void*)&ifa_apc_add, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfillcolor = {(void*)&i_drawgetfillcolor, (void*)&ifa_drawgetfillcolor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickreadimagefile = {(void*)&i_magickreadimagefile, (void*)&ifa_magickreadimagefile, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_has_child_nodes = {(void*)&i_dom_node_has_child_nodes, (void*)&ifa_dom_node_has_child_nodes, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_phpversion = {(void*)&i_phpversion, (void*)&ifa_phpversion, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_accept = {(void*)&i_socket_accept, (void*)&ifa_socket_accept, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ftruncate = {(void*)&i_ftruncate, (void*)&ifa_ftruncate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_getsockname = {(void*)&i_socket_getsockname, (void*)&ifa_socket_getsockname, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_set_exception_handler = {(void*)&i_set_exception_handler, (void*)&ifa_set_exception_handler, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_fetch_result = {(void*)&i_mysql_fetch_result, (void*)&ifa_mysql_fetch_result, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursiveiteratoriterator_getinneriterator = {(void*)&i_hphp_recursiveiteratoriterator_getinneriterator, (void*)&ifa_hphp_recursiveiteratoriterator_getinneriterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_msg_remove_queue = {(void*)&i_msg_remove_queue, (void*)&ifa_msg_remove_queue, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_comment = {(void*)&i_dom_document_create_comment, (void*)&ifa_dom_document_create_comment, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_parse_hdf_file = {(void*)&i_parse_hdf_file, (void*)&ifa_parse_hdf_file, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_file_put_contents = {(void*)&i_file_put_contents, (void*)&ifa_file_put_contents, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_encrypt = {(void*)&i_mcrypt_encrypt, (void*)&ifa_mcrypt_encrypt, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_debug_caller_info = {(void*)&i_hphp_debug_caller_info, (void*)&ifa_hphp_debug_caller_info, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_getservbyport = {(void*)&i_getservbyport, (void*)&ifa_getservbyport, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_graph = {(void*)&i_ctype_graph, (void*)&ifa_ctype_graph, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageprofile = {(void*)&i_magicksetimageprofile, (void*)&ifa_magicksetimageprofile, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_get_algo_block_size = {(void*)&i_mcrypt_module_get_algo_block_size, (void*)&ifa_mcrypt_module_get_algo_block_size, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_passthru = {(void*)&i_passthru, (void*)&ifa_passthru, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_drawpathellipticarcrelative = {(void*)&i_drawpathellipticarcrelative, (void*)&ifa_drawpathellipticarcrelative, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_defined_functions = {(void*)&i_get_defined_functions, (void*)&ifa_get_defined_functions, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_rename = {(void*)&i_rename, (void*)&ifa_rename, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_wandgetexceptiontype = {(void*)&i_wandgetexceptiontype, (void*)&ifa_wandgetexceptiontype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_has_attributes = {(void*)&i_dom_node_has_attributes, (void*)&ifa_dom_node_has_attributes, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagestring = {(void*)&i_imagestring, (void*)&ifa_imagestring, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_detect_order = {(void*)&i_mb_detect_order, (void*)&ifa_mb_detect_order, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromgd = {(void*)&i_imagecreatefromgd, (void*)&ifa_imagecreatefromgd, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_cas = {(void*)&i_apc_cas, (void*)&ifa_apc_cas, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_image_type_to_mime_type = {(void*)&i_image_type_to_mime_type, (void*)&ifa_image_type_to_mime_type, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strrchr = {(void*)&i_mb_strrchr, (void*)&ifa_mb_strrchr, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_real = {(void*)&i_is_real, (void*)&ifa_is_real, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_strncasecmp = {(void*)&i_strncasecmp, (void*)&ifa_strncasecmp, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagescene = {(void*)&i_magicksetimagescene, (void*)&ifa_magicksetimagescene, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkey_export = {(void*)&i_openssl_pkey_export, (void*)&ifa_openssl_pkey_export, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_xmlwriter_start_element = {(void*)&i_xmlwriter_start_element, (void*)&ifa_xmlwriter_start_element, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fgetcsv = {(void*)&i_fgetcsv, (void*)&ifa_fgetcsv, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_scalar = {(void*)&i_is_scalar, (void*)&ifa_is_scalar, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getmxrr = {(void*)&i_getmxrr, (void*)&ifa_getmxrr, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_getimagesize = {(void*)&i_getimagesize, (void*)&ifa_getimagesize, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_icu_transliterate = {(void*)&i_icu_transliterate, (void*)&ifa_icu_transliterate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_iconv_mime_decode_headers = {(void*)&i_iconv_mime_decode_headers, (void*)&ifa_iconv_mime_decode_headers, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_apd_continue = {(void*)&i_apd_continue, (void*)&ifa_apd_continue, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_restore_exception_handler = {(void*)&i_restore_exception_handler, (void*)&ifa_restore_exception_handler, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkcs7_encrypt = {(void*)&i_openssl_pkcs7_encrypt, (void*)&ifa_openssl_pkcs7_encrypt, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_header_register_callback = {(void*)&i_header_register_callback, (void*)&ifa_header_register_callback, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_md5 = {(void*)&i_md5, (void*)&ifa_md5, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_end_dtd_element = {(void*)&i_xmlwriter_end_dtd_element, (void*)&ifa_xmlwriter_end_dtd_element, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_gethostname = {(void*)&i_gethostname, (void*)&ifa_gethostname, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_unserialize = {(void*)&i_fb_unserialize, (void*)&ifa_fb_unserialize, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_ftok = {(void*)&i_ftok, (void*)&ifa_ftok, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_class_constant = {(void*)&i_hphp_get_class_constant, (void*)&ifa_hphp_get_class_constant, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_str_shuffle = {(void*)&i_str_shuffle, (void*)&ifa_str_shuffle, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_wifexited = {(void*)&i_pcntl_wifexited, (void*)&ifa_pcntl_wifexited, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_asinh = {(void*)&i_asinh, (void*)&ifa_asinh, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_characterdata_delete_data = {(void*)&i_dom_characterdata_delete_data, (void*)&ifa_dom_characterdata_delete_data, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_intersect_key = {(void*)&i_array_intersect_key, (void*)&ifa_array_intersect_key, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_stream_bucket_prepend = {(void*)&i_stream_bucket_prepend, (void*)&ifa_stream_bucket_prepend, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_i18n_loc_set_attribute = {(void*)&i_i18n_loc_set_attribute, (void*)&ifa_i18n_loc_set_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_strerror = {(void*)&i_socket_strerror, (void*)&ifa_socket_strerror, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetviewbox = {(void*)&i_drawsetviewbox, (void*)&ifa_drawsetviewbox, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_magic_quotes_runtime = {(void*)&i_get_magic_quotes_runtime, (void*)&ifa_get_magic_quotes_runtime, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetexceptiontype = {(void*)&i_pixelgetexceptiontype, (void*)&ifa_pixelgetexceptiontype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokedasharray = {(void*)&i_drawsetstrokedasharray, (void*)&ifa_drawsetstrokedasharray, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_libxml_get_errors = {(void*)&i_libxml_get_errors, (void*)&ifa_libxml_get_errors, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagewidth = {(void*)&i_magickgetimagewidth, (void*)&ifa_magickgetimagewidth, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_time = {(void*)&i_time, (void*)&ifa_time, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_compile_file = {(void*)&i_apc_compile_file, (void*)&ifa_apc_compile_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo___construct = {(void*)&i_hphp_splfileinfo___construct, (void*)&ifa_hphp_splfileinfo___construct, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_define_constants = {(void*)&i_apc_define_constants, (void*)&ifa_apc_define_constants, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_service_thread_started = {(void*)&i_hphp_service_thread_started, (void*)&ifa_hphp_service_thread_started, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_trigger_error = {(void*)&i_trigger_error, (void*)&ifa_trigger_error, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_convert_variables = {(void*)&i_mb_convert_variables, (void*)&ifa_mb_convert_variables, 3, 1, 0x0000000000000004LL};
extern const CallInfo ci_nzuncompress = {(void*)&i_nzuncompress, (void*)&ifa_nzuncompress, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_internal_encoding = {(void*)&i_mb_internal_encoding, (void*)&ifa_mb_internal_encoding, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetfilename = {(void*)&i_magicksetfilename, (void*)&ifa_magicksetfilename, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_disable = {(void*)&i_xhprof_disable, (void*)&ifa_xhprof_disable, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfontfamily = {(void*)&i_drawgetfontfamily, (void*)&ifa_drawgetfontfamily, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_register_cleanup_function = {(void*)&i_register_cleanup_function, (void*)&ifa_register_cleanup_function, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_ftell = {(void*)&i_ftell, (void*)&ifa_ftell, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_wifstopped = {(void*)&i_pcntl_wifstopped, (void*)&ifa_pcntl_wifstopped, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_add = {(void*)&i_memcache_add, (void*)&ifa_memcache_add, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagebackgroundcolor = {(void*)&i_magickgetimagebackgroundcolor, (void*)&ifa_magickgetimagebackgroundcolor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_csr_get_subject = {(void*)&i_openssl_csr_get_subject, (void*)&ifa_openssl_csr_get_subject, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_isatty = {(void*)&i_posix_isatty, (void*)&ifa_posix_isatty, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_schema_validate_file = {(void*)&i_dom_document_schema_validate_file, (void*)&ifa_dom_document_schema_validate_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawrectangle = {(void*)&i_drawrectangle, (void*)&ifa_drawrectangle, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_array = {(void*)&i_is_array, (void*)&ifa_is_array, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_copy_to_stream = {(void*)&i_stream_copy_to_stream, (void*)&ifa_stream_copy_to_stream, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkcs7_decrypt = {(void*)&i_openssl_pkcs7_decrypt, (void*)&ifa_openssl_pkcs7_decrypt, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_round = {(void*)&i_round, (void*)&ifa_round, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bcdiv = {(void*)&i_bcdiv, (void*)&ifa_bcdiv, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_iostatus = {(void*)&i_hphp_get_iostatus, (void*)&ifa_hphp_get_iostatus, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_x509_check_private_key = {(void*)&i_openssl_x509_check_private_key, (void*)&ifa_openssl_x509_check_private_key, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagegd2 = {(void*)&i_imagegd2, (void*)&ifa_imagegd2, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_substr = {(void*)&i_substr, (void*)&ifa_substr, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_base64_decode = {(void*)&i_base64_decode, (void*)&ifa_base64_decode, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickpreviewimages = {(void*)&i_magickpreviewimages, (void*)&ifa_magickpreviewimages, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_isodate_set = {(void*)&i_date_isodate_set, (void*)&ifa_date_isodate_set, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_generic = {(void*)&i_mcrypt_generic, (void*)&ifa_mcrypt_generic, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_linkinfo = {(void*)&i_linkinfo, (void*)&ifa_linkinfo, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_set_charset = {(void*)&i_mysql_set_charset, (void*)&ifa_mysql_set_charset, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokepatternurl = {(void*)&i_drawsetstrokepatternurl, (void*)&ifa_drawsetstrokepatternurl, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_fetch_array = {(void*)&i_mysql_fetch_array, (void*)&ifa_mysql_fetch_array, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fputs = {(void*)&i_fputs, (void*)&ifa_fputs, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_fetchbody = {(void*)&i_imap_fetchbody, (void*)&ifa_imap_fetchbody, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawskewx = {(void*)&i_drawskewx, (void*)&ifa_drawskewx, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_format = {(void*)&i_date_format, (void*)&ifa_date_format, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_func_rpc = {(void*)&i_call_user_func_rpc, (void*)&ifa_call_user_func_rpc, 5, 32, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_save = {(void*)&i_dom_document_save, (void*)&ifa_dom_document_save, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_generic_deinit = {(void*)&i_mcrypt_generic_deinit, (void*)&ifa_mcrypt_generic_deinit, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_last_error = {(void*)&i_socket_last_error, (void*)&ifa_socket_last_error, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_lookup_namespace_uri = {(void*)&i_dom_node_lookup_namespace_uri, (void*)&ifa_dom_node_lookup_namespace_uri, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetred = {(void*)&i_pixelgetred, (void*)&ifa_pixelgetred, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_evhttp_set_cache = {(void*)&i_evhttp_set_cache, (void*)&ifa_evhttp_set_cache, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strimwidth = {(void*)&i_mb_strimwidth, (void*)&ifa_mb_strimwidth, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_access = {(void*)&i_posix_access, (void*)&ifa_posix_access, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepalettecopy = {(void*)&i_imagepalettecopy, (void*)&ifa_imagepalettecopy, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokecolor = {(void*)&i_drawsetstrokecolor, (void*)&ifa_drawsetstrokecolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gmstrftime = {(void*)&i_gmstrftime, (void*)&ifa_gmstrftime, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_savebody = {(void*)&i_imap_savebody, (void*)&ifa_imap_savebody, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_popen = {(void*)&i_popen, (void*)&ifa_popen, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_strcmp = {(void*)&i_strcmp, (void*)&ifa_strcmp, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagecompressionquality = {(void*)&i_magickgetimagecompressionquality, (void*)&ifa_magickgetimagecompressionquality, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_evhttp_async_post = {(void*)&i_evhttp_async_post, (void*)&ifa_evhttp_async_post, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_pconnect_with_db = {(void*)&i_mysql_pconnect_with_db, (void*)&ifa_mysql_pconnect_with_db, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getsize = {(void*)&i_hphp_splfileinfo_getsize, (void*)&ifa_hphp_splfileinfo_getsize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_class_constants = {(void*)&i_get_class_constants, (void*)&ifa_get_class_constants, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathfinish = {(void*)&i_drawpathfinish, (void*)&ifa_drawpathfinish, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_mail_compose = {(void*)&i_imap_mail_compose, (void*)&ifa_imap_mail_compose, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_check = {(void*)&i_imap_check, (void*)&ifa_imap_check, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmorphimages = {(void*)&i_magickmorphimages, (void*)&ifa_magickmorphimages, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_list_handlers = {(void*)&i_ob_list_handlers, (void*)&ifa_ob_list_handlers, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_include_path = {(void*)&i_get_include_path, (void*)&ifa_get_include_path, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_hebrev = {(void*)&i_hebrev, (void*)&ifa_hebrev, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_get_structure = {(void*)&i_mailparse_msg_get_structure, (void*)&ifa_mailparse_msg_get_structure, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_time_nanosleep = {(void*)&i_time_nanosleep, (void*)&ifa_time_nanosleep, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetnumberimages = {(void*)&i_magickgetnumberimages, (void*)&ifa_magickgetnumberimages, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pi = {(void*)&i_pi, (void*)&ifa_pi, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkey_new = {(void*)&i_openssl_pkey_new, (void*)&ifa_openssl_pkey_new, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_declared_classes = {(void*)&i_get_declared_classes, (void*)&ifa_get_declared_classes, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_headers = {(void*)&i_get_headers, (void*)&ifa_get_headers, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathcurvetoabsolute = {(void*)&i_drawpathcurvetoabsolute, (void*)&ifa_drawpathcurvetoabsolute, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_uid = {(void*)&i_imap_uid, (void*)&ifa_imap_uid, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_inet_ntop = {(void*)&i_inet_ntop, (void*)&ifa_inet_ntop, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_detect_encoding = {(void*)&i_mb_detect_encoding, (void*)&ifa_mb_detect_encoding, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_end_comment = {(void*)&i_xmlwriter_end_comment, (void*)&ifa_xmlwriter_end_comment, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursiveiteratoriterator_key = {(void*)&i_hphp_recursiveiteratoriterator_key, (void*)&ifa_hphp_recursiveiteratoriterator_key, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetblack = {(void*)&i_pixelgetblack, (void*)&ifa_pixelgetblack, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_lower = {(void*)&i_ctype_lower, (void*)&ifa_ctype_lower, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageunits = {(void*)&i_magickgetimageunits, (void*)&ifa_magickgetimageunits, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_strrev = {(void*)&i_strrev, (void*)&ifa_strrev, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_clearmagickwand = {(void*)&i_clearmagickwand, (void*)&ifa_clearmagickwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_end_pi = {(void*)&i_xmlwriter_end_pi, (void*)&ifa_xmlwriter_end_pi, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_nl2br = {(void*)&i_nl2br, (void*)&ifa_nl2br, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetiteratorexceptiontype = {(void*)&i_pixelgetiteratorexceptiontype, (void*)&ifa_pixelgetiteratorexceptiontype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_defined_vars = {(void*)&i_get_defined_vars, (void*)&ifa_get_defined_vars, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorexact = {(void*)&i_imagecolorexact, (void*)&ifa_imagecolorexact, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_wandgetexceptionstring = {(void*)&i_wandgetexceptionstring, (void*)&ifa_wandgetexceptionstring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagegd = {(void*)&i_imagegd, (void*)&ifa_imagegd, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickposterizeimage = {(void*)&i_magickposterizeimage, (void*)&ifa_magickposterizeimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_usleep = {(void*)&i_usleep, (void*)&ifa_usleep, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_directoryiterator_key = {(void*)&i_hphp_directoryiterator_key, (void*)&ifa_hphp_directoryiterator_key, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_current = {(void*)&i_current, (void*)&ifa_current, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_stream_socket_sendto = {(void*)&i_stream_socket_sendto, (void*)&ifa_stream_socket_sendto, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_body = {(void*)&i_imap_body, (void*)&ifa_imap_body, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_iconv_get_encoding = {(void*)&i_iconv_get_encoding, (void*)&ifa_iconv_get_encoding, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokealpha = {(void*)&i_drawgetstrokealpha, (void*)&ifa_drawgetstrokealpha, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_count = {(void*)&i_count, (void*)&ifa_count, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bcmod = {(void*)&i_bcmod, (void*)&ifa_bcmod, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetcharheight = {(void*)&i_magickgetcharheight, (void*)&ifa_magickgetcharheight, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_func_async = {(void*)&i_call_user_func_async, (void*)&ifa_call_user_func_async, 1, 32, 0x0000000000000000LL};
extern const CallInfo ci_urlencode = {(void*)&i_urlencode, (void*)&ifa_urlencode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokecolor = {(void*)&i_drawgetstrokecolor, (void*)&ifa_drawgetstrokecolor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_first_entry = {(void*)&i_ldap_first_entry, (void*)&ifa_ldap_first_entry, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_context_create = {(void*)&i_stream_context_create, (void*)&ifa_stream_context_create, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetmaxtextadvance = {(void*)&i_magickgetmaxtextadvance, (void*)&ifa_magickgetmaxtextadvance, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfillcolor = {(void*)&i_drawsetfillcolor, (void*)&ifa_drawsetfillcolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_getaddrinfo = {(void*)&i_getaddrinfo, (void*)&ifa_getaddrinfo, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_preg_quote = {(void*)&i_preg_quote, (void*)&ifa_preg_quote, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickblurimage = {(void*)&i_magickblurimage, (void*)&ifa_magickblurimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_parent_class = {(void*)&i_get_parent_class, (void*)&ifa_get_parent_class, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagefilltoborder = {(void*)&i_imagefilltoborder, (void*)&ifa_imagefilltoborder, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_convert_uudecode = {(void*)&i_convert_uudecode, (void*)&ifa_convert_uudecode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_define_syslog_variables = {(void*)&i_define_syslog_variables, (void*)&ifa_define_syslog_variables, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_strtolower = {(void*)&i_strtolower, (void*)&ifa_strtolower, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_expm1 = {(void*)&i_expm1, (void*)&ifa_expm1, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_spl_autoload_extensions = {(void*)&i_spl_autoload_extensions, (void*)&ifa_spl_autoload_extensions, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getpid = {(void*)&i_posix_getpid, (void*)&ifa_posix_getpid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_list = {(void*)&i_imap_list, (void*)&ifa_imap_list, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_sem_acquire = {(void*)&i_sem_acquire, (void*)&ifa_sem_acquire, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagegamma = {(void*)&i_magickgetimagegamma, (void*)&ifa_magickgetimagegamma, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_end_document = {(void*)&i_xmlwriter_end_document, (void*)&ifa_xmlwriter_end_document, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_sys_getloadavg = {(void*)&i_sys_getloadavg, (void*)&ifa_sys_getloadavg, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_strncmp = {(void*)&i_strncmp, (void*)&ifa_strncmp, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_remove_child = {(void*)&i_dom_node_remove_child, (void*)&ifa_dom_node_remove_child, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_headers_list = {(void*)&i_headers_list, (void*)&ifa_headers_list, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagejpeg = {(void*)&i_imagejpeg, (void*)&ifa_imagejpeg, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetred = {(void*)&i_pixelsetred, (void*)&ifa_pixelsetred, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_init = {(void*)&i_hash_init, (void*)&ifa_hash_init, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_get_server_info = {(void*)&i_mysql_get_server_info, (void*)&ifa_mysql_get_server_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawtranslate = {(void*)&i_drawtranslate, (void*)&ifa_drawtranslate, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokewidth = {(void*)&i_drawgetstrokewidth, (void*)&ifa_drawgetstrokewidth, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_key = {(void*)&i_hphp_recursivedirectoryiterator_key, (void*)&ifa_hphp_recursivedirectoryiterator_key, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_readfile = {(void*)&i_readfile, (void*)&ifa_readfile, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_get_flush = {(void*)&i_ob_get_flush, (void*)&ifa_ob_get_flush, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_send_mail = {(void*)&i_mb_send_mail, (void*)&ifa_mb_send_mail, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzgetc = {(void*)&i_gzgetc, (void*)&ifa_gzgetc, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fputcsv = {(void*)&i_fputcsv, (void*)&ifa_fputcsv, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_var_dump = {(void*)&i_var_dump, (void*)&ifa_var_dump, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_xml_get_error_code = {(void*)&i_xml_get_error_code, (void*)&ifa_xml_get_error_code, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_connect = {(void*)&i_mysql_connect, (void*)&ifa_mysql_connect, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_evhttp_recv = {(void*)&i_evhttp_recv, (void*)&ifa_evhttp_recv, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getcwd = {(void*)&i_posix_getcwd, (void*)&ifa_posix_getcwd, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_sqrt = {(void*)&i_sqrt, (void*)&ifa_sqrt, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetcyanquantum = {(void*)&i_pixelsetcyanquantum, (void*)&ifa_pixelsetcyanquantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetquantumdepth = {(void*)&i_magickgetquantumdepth, (void*)&ifa_magickgetquantumdepth, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_class_parents = {(void*)&i_class_parents, (void*)&ifa_class_parents, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_unserialize = {(void*)&i_unserialize, (void*)&ifa_unserialize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_set = {(void*)&i_memcache_set, (void*)&ifa_memcache_set, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_field_table = {(void*)&i_mysql_field_table, (void*)&ifa_mysql_field_table, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetbluequantum = {(void*)&i_pixelsetbluequantum, (void*)&ifa_pixelsetbluequantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_get_values_len = {(void*)&i_ldap_get_values_len, (void*)&ifa_ldap_get_values_len, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetinterlacescheme = {(void*)&i_magicksetinterlacescheme, (void*)&ifa_magicksetinterlacescheme, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_strpos = {(void*)&i_strpos, (void*)&ifa_strpos, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickhaspreviousimage = {(void*)&i_magickhaspreviousimage, (void*)&ifa_magickhaspreviousimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickdespeckleimage = {(void*)&i_magickdespeckleimage, (void*)&ifa_magickdespeckleimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_strptime = {(void*)&i_strptime, (void*)&ifa_strptime, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_intl_get_error_code = {(void*)&i_intl_get_error_code, (void*)&ifa_intl_get_error_code, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_rename_function = {(void*)&i_rename_function, (void*)&ifa_rename_function, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apd_set_pprof_trace = {(void*)&i_apd_set_pprof_trace, (void*)&ifa_apd_set_pprof_trace, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_public_encrypt = {(void*)&i_openssl_public_encrypt, (void*)&ifa_openssl_public_encrypt, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_fnmatch = {(void*)&i_fnmatch, (void*)&ifa_fnmatch, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_process_call_message = {(void*)&i_xbox_process_call_message, (void*)&ifa_xbox_process_call_message, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_forward_static_call_array = {(void*)&i_forward_static_call_array, (void*)&ifa_forward_static_call_array, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_dtd_element = {(void*)&i_xmlwriter_write_dtd_element, (void*)&ifa_xmlwriter_write_dtd_element, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_utf8_strlen = {(void*)&i_fb_utf8_strlen, (void*)&ifa_fb_utf8_strlen, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_intval = {(void*)&i_intval, (void*)&ifa_intval, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_more_results = {(void*)&i_mysql_more_results, (void*)&ifa_mysql_more_results, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzrewind = {(void*)&i_gzrewind, (void*)&ifa_gzrewind, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_split = {(void*)&i_mb_split, (void*)&ifa_mb_split, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageprofile = {(void*)&i_magickgetimageprofile, (void*)&ifa_magickgetimageprofile, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkey_get_private = {(void*)&i_openssl_pkey_get_private, (void*)&ifa_openssl_pkey_get_private, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_evhttp_post = {(void*)&i_evhttp_post, (void*)&ifa_evhttp_post, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_sendto = {(void*)&i_socket_sendto, (void*)&ifa_socket_sendto, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_namednodemap_get_named_item_ns = {(void*)&i_dom_namednodemap_get_named_item_ns, (void*)&ifa_dom_namednodemap_get_named_item_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getrealpath = {(void*)&i_hphp_splfileinfo_getrealpath, (void*)&ifa_hphp_splfileinfo_getrealpath, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_search_init = {(void*)&i_mb_ereg_search_init, (void*)&ifa_mb_ereg_search_init, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_trim = {(void*)&i_trim, (void*)&ifa_trim, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_php_strip_whitespace = {(void*)&i_php_strip_whitespace, (void*)&ifa_php_strip_whitespace, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_serialize = {(void*)&i_fb_serialize, (void*)&ifa_fb_serialize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_filter = {(void*)&i_array_filter, (void*)&ifa_array_filter, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_preg_replace = {(void*)&i_preg_replace, (void*)&ifa_preg_replace, 5, 0, 0x0000000000000010LL};
extern const CallInfo ci_mcrypt_get_block_size = {(void*)&i_mcrypt_get_block_size, (void*)&ifa_mcrypt_get_block_size, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_field_name = {(void*)&i_mysql_field_name, (void*)&ifa_mysql_field_name, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_get_part = {(void*)&i_mailparse_msg_get_part, (void*)&ifa_mailparse_msg_get_part, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetversionstring = {(void*)&i_magickgetversionstring, (void*)&ifa_magickgetversionstring, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_furchash_hphp_ext_supported = {(void*)&i_furchash_hphp_ext_supported, (void*)&ifa_furchash_hphp_ext_supported, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsettextantialias = {(void*)&i_drawsettextantialias, (void*)&ifa_drawsettextantialias, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_is_block_algorithm_mode = {(void*)&i_mcrypt_enc_is_block_algorithm_mode, (void*)&ifa_mcrypt_enc_is_block_algorithm_mode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_i18n_loc_set_strength = {(void*)&i_i18n_loc_set_strength, (void*)&ifa_i18n_loc_set_strength, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_natcasesort = {(void*)&i_natcasesort, (void*)&ifa_natcasesort, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_header_remove = {(void*)&i_header_remove, (void*)&ifa_header_remove, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getgid = {(void*)&i_posix_getgid, (void*)&ifa_posix_getgid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_cdata = {(void*)&i_xmlwriter_start_cdata, (void*)&ifa_xmlwriter_start_cdata, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_iterator_apply = {(void*)&i_iterator_apply, (void*)&ifa_iterator_apply, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_bcmul = {(void*)&i_bcmul, (void*)&ifa_bcmul, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_php_sapi_name = {(void*)&i_php_sapi_name, (void*)&ifa_php_sapi_name, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcontrastimage = {(void*)&i_magickcontrastimage, (void*)&ifa_magickcontrastimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_destroymagickwand = {(void*)&i_destroymagickwand, (void*)&ifa_destroymagickwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_preg_replace_callback = {(void*)&i_preg_replace_callback, (void*)&ifa_preg_replace_callback, 5, 0, 0x0000000000000010LL};
extern const CallInfo ci_ldap_mod_del = {(void*)&i_ldap_mod_del, (void*)&ifa_ldap_mod_del, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_apache_response_headers = {(void*)&i_apache_response_headers, (void*)&ifa_apache_response_headers, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_wandhasexception = {(void*)&i_wandhasexception, (void*)&ifa_wandhasexception, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_bucket_make_writeable = {(void*)&i_stream_bucket_make_writeable, (void*)&ifa_stream_bucket_make_writeable, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_decrypt = {(void*)&i_mcrypt_decrypt, (void*)&ifa_mcrypt_decrypt, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_zend_thread_id = {(void*)&i_zend_thread_id, (void*)&ifa_zend_thread_id, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_punct = {(void*)&i_ctype_punct, (void*)&ifa_ctype_punct, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetsize = {(void*)&i_magickgetsize, (void*)&ifa_magickgetsize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_destroypixelwand = {(void*)&i_destroypixelwand, (void*)&ifa_destroypixelwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_is_block_mode = {(void*)&i_mcrypt_module_is_block_mode, (void*)&ifa_mcrypt_module_is_block_mode, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strcut = {(void*)&i_mb_strcut, (void*)&ifa_mb_strcut, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagerenderingintent = {(void*)&i_magicksetimagerenderingintent, (void*)&ifa_magicksetimagerenderingintent, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_normalize = {(void*)&i_dom_node_normalize, (void*)&ifa_dom_node_normalize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagevirtualpixelmethod = {(void*)&i_magicksetimagevirtualpixelmethod, (void*)&ifa_magicksetimagevirtualpixelmethod, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgettextundercolor = {(void*)&i_drawgettextundercolor, (void*)&ifa_drawgettextundercolor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_sha1 = {(void*)&i_sha1, (void*)&ifa_sha1, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickqueryfonts = {(void*)&i_magickqueryfonts, (void*)&ifa_magickqueryfonts, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_iconv_mime_encode = {(void*)&i_iconv_mime_encode, (void*)&ifa_iconv_mime_encode, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_stubout_intercept_handler = {(void*)&i_fb_stubout_intercept_handler, (void*)&ifa_fb_stubout_intercept_handler, 5, 0, 0x0000000000000010LL};
extern const CallInfo ci_socket_create_listen = {(void*)&i_socket_create_listen, (void*)&ifa_socket_create_listen, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_end_clean = {(void*)&i_ob_end_clean, (void*)&ifa_ob_end_clean, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpoint = {(void*)&i_drawpoint, (void*)&ifa_drawpoint, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_getchildren = {(void*)&i_hphp_recursivedirectoryiterator_getchildren, (void*)&ifa_hphp_recursivedirectoryiterator_getchildren, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepsencodefont = {(void*)&i_imagepsencodefont, (void*)&ifa_imagepsencodefont, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ucwords = {(void*)&i_ucwords, (void*)&ifa_ucwords, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_remove_attribute_ns = {(void*)&i_dom_element_remove_attribute_ns, (void*)&ifa_dom_element_remove_attribute_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagepsextendfont = {(void*)&i_imagepsextendfont, (void*)&ifa_imagepsextendfont, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetresourcelimit = {(void*)&i_magickgetresourcelimit, (void*)&ifa_magickgetresourcelimit, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfont = {(void*)&i_drawgetfont, (void*)&ifa_drawgetfont, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_unpack = {(void*)&i_unpack, (void*)&ifa_unpack, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_compact = {(void*)&i_compact, (void*)&ifa_compact, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetgreen = {(void*)&i_pixelgetgreen, (void*)&ifa_pixelgetgreen, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_lookup_prefix = {(void*)&i_dom_node_lookup_prefix, (void*)&ifa_dom_node_lookup_prefix, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetcyan = {(void*)&i_pixelsetcyan, (void*)&ifa_pixelsetcyan, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_sma_info = {(void*)&i_apc_sma_info, (void*)&ifa_apc_sma_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickseparateimagechannel = {(void*)&i_magickseparateimagechannel, (void*)&ifa_magickseparateimagechannel, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathlinetoverticalrelative = {(void*)&i_drawpathlinetoverticalrelative, (void*)&ifa_drawpathlinetoverticalrelative, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickthresholdimage = {(void*)&i_magickthresholdimage, (void*)&ifa_magickthresholdimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_max = {(void*)&i_max, (void*)&ifa_max, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_end = {(void*)&i_end, (void*)&ifa_end, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_imagexbm = {(void*)&i_imagexbm, (void*)&ifa_imagexbm, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_multi_query = {(void*)&i_mysql_multi_query, (void*)&ifa_mysql_multi_query, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_filter_register = {(void*)&i_stream_filter_register, (void*)&ifa_stream_filter_register, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_client_encoding = {(void*)&i_mysql_client_encoding, (void*)&ifa_mysql_client_encoding, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_get_values = {(void*)&i_ldap_get_values, (void*)&ifa_ldap_get_values, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_open_uri = {(void*)&i_xmlwriter_open_uri, (void*)&ifa_xmlwriter_open_uri, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_set_strength = {(void*)&i_collator_set_strength, (void*)&ifa_collator_set_strength, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetredquantum = {(void*)&i_pixelsetredquantum, (void*)&ifa_pixelsetredquantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getgroup = {(void*)&i_hphp_splfileinfo_getgroup, (void*)&ifa_hphp_splfileinfo_getgroup, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_exit = {(void*)&i_exit, (void*)&ifa_exit, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickwriteimages = {(void*)&i_magickwriteimages, (void*)&ifa_magickwriteimages, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getpathinfo = {(void*)&i_hphp_splfileinfo_getpathinfo, (void*)&ifa_hphp_splfileinfo_getpathinfo, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_enable_code_coverage = {(void*)&i_fb_enable_code_coverage, (void*)&ifa_fb_enable_code_coverage, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorresolvealpha = {(void*)&i_imagecolorresolvealpha, (void*)&ifa_imagecolorresolvealpha, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicknewimage = {(void*)&i_magicknewimage, (void*)&ifa_magicknewimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_tempnam = {(void*)&i_tempnam, (void*)&ifa_tempnam, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_get_elements_by_tag_name_ns = {(void*)&i_dom_element_get_elements_by_tag_name_ns, (void*)&ifa_dom_element_get_elements_by_tag_name_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_expunge = {(void*)&i_imap_expunge, (void*)&ifa_imap_expunge, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_idn_to_utf8 = {(void*)&i_idn_to_utf8, (void*)&ifa_idn_to_utf8, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_pixelsetyellowquantum = {(void*)&i_pixelsetyellowquantum, (void*)&ifa_pixelsetyellowquantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickframeimage = {(void*)&i_magickframeimage, (void*)&ifa_magickframeimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetreleasedate = {(void*)&i_magickgetreleasedate, (void*)&ifa_magickgetreleasedate, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_parse_ini_file = {(void*)&i_parse_ini_file, (void*)&ifa_parse_ini_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetalphaquantum = {(void*)&i_pixelgetalphaquantum, (void*)&ifa_pixelgetalphaquantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickminifyimage = {(void*)&i_magickminifyimage, (void*)&ifa_magickminifyimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_get_line = {(void*)&i_stream_get_line, (void*)&ifa_stream_get_line, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_exp = {(void*)&i_exp, (void*)&ifa_exp, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_unsubscribe = {(void*)&i_imap_unsubscribe, (void*)&ifa_imap_unsubscribe, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apache_get_rewrite_rules = {(void*)&i_apache_get_rewrite_rules, (void*)&ifa_apache_get_rewrite_rules, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci__soap_active_version = {(void*)&i__soap_active_version, (void*)&ifa__soap_active_version, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_bcsqrt = {(void*)&i_bcsqrt, (void*)&ifa_bcsqrt, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_flush = {(void*)&i_ob_flush, (void*)&ifa_ob_flush, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_substr_count = {(void*)&i_substr_count, (void*)&ifa_substr_count, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_create = {(void*)&i_mailparse_msg_create, (void*)&ifa_mailparse_msg_create, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_first_reference = {(void*)&i_ldap_first_reference, (void*)&ifa_ldap_first_reference, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmagnifyimage = {(void*)&i_magickmagnifyimage, (void*)&ifa_magickmagnifyimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetblack = {(void*)&i_pixelsetblack, (void*)&ifa_pixelsetblack, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_strcasecmp = {(void*)&i_strcasecmp, (void*)&ifa_strcasecmp, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_key_exists = {(void*)&i_array_key_exists, (void*)&ifa_array_key_exists, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_add = {(void*)&i_ldap_add, (void*)&ifa_ldap_add, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_icu_tokenize = {(void*)&i_icu_tokenize, (void*)&ifa_icu_tokenize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_set_property = {(void*)&i_hphp_set_property, (void*)&ifa_hphp_set_property, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokeopacity = {(void*)&i_drawgetstrokeopacity, (void*)&ifa_drawgetstrokeopacity, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_recv = {(void*)&i_socket_recv, (void*)&ifa_socket_recv, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_magickgetimagehistogram = {(void*)&i_magickgetimagehistogram, (void*)&ifa_magickgetimagehistogram, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getmygid = {(void*)&i_getmygid, (void*)&ifa_getmygid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_evhttp_async_get = {(void*)&i_evhttp_async_get, (void*)&ifa_evhttp_async_get, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagedepth = {(void*)&i_magickgetimagedepth, (void*)&ifa_magickgetimagedepth, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagegif = {(void*)&i_imagegif, (void*)&ifa_imagegif, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_set_indent = {(void*)&i_xmlwriter_set_indent, (void*)&ifa_xmlwriter_set_indent, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_attribute = {(void*)&i_dom_document_create_attribute, (void*)&ifa_dom_document_create_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_get_level = {(void*)&i_ob_get_level, (void*)&ifa_ob_get_level, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_send_message = {(void*)&i_xbox_send_message, (void*)&ifa_xbox_send_message, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_rawurlencode = {(void*)&i_rawurlencode, (void*)&ifa_rawurlencode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickblackthresholdimage = {(void*)&i_magickblackthresholdimage, (void*)&ifa_magickblackthresholdimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_is_same_node = {(void*)&i_dom_node_is_same_node, (void*)&ifa_dom_node_is_same_node, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_create_continuation = {(void*)&i_hphp_create_continuation, (void*)&ifa_hphp_create_continuation, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicktransformimage = {(void*)&i_magicktransformimage, (void*)&ifa_magicktransformimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_log = {(void*)&i_hphp_log, (void*)&ifa_hphp_log, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_search = {(void*)&i_array_search, (void*)&ifa_array_search, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_extract_part = {(void*)&i_mailparse_msg_extract_part, (void*)&ifa_mailparse_msg_extract_part, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickspliceimage = {(void*)&i_magickspliceimage, (void*)&ifa_magickspliceimage, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getperms = {(void*)&i_hphp_splfileinfo_getperms, (void*)&ifa_hphp_splfileinfo_getperms, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_substr_count = {(void*)&i_mb_substr_count, (void*)&ifa_mb_substr_count, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_set_indent_string = {(void*)&i_xmlwriter_set_indent_string, (void*)&ifa_xmlwriter_set_indent_string, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_haschildren = {(void*)&i_hphp_recursivedirectoryiterator_haschildren, (void*)&ifa_hphp_recursivedirectoryiterator_haschildren, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_comment = {(void*)&i_xmlwriter_start_comment, (void*)&ifa_xmlwriter_start_comment, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_next = {(void*)&i_hphp_recursivedirectoryiterator_next, (void*)&ifa_hphp_recursivedirectoryiterator_next, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzwrite = {(void*)&i_bzwrite, (void*)&ifa_bzwrite, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_output_reset_rewrite_vars = {(void*)&i_output_reset_rewrite_vars, (void*)&ifa_output_reset_rewrite_vars, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_create_iv = {(void*)&i_mcrypt_create_iv, (void*)&ifa_mcrypt_create_iv, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgettextascent = {(void*)&i_magickgettextascent, (void*)&ifa_magickgettextascent, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_strtoupper = {(void*)&i_strtoupper, (void*)&ifa_strtoupper, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_cache_expire = {(void*)&i_session_cache_expire, (void*)&ifa_session_cache_expire, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_set_timeout = {(void*)&i_socket_set_timeout, (void*)&ifa_socket_set_timeout, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetexceptionstring = {(void*)&i_magickgetexceptionstring, (void*)&ifa_magickgetexceptionstring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_stats = {(void*)&i_hphp_get_stats, (void*)&ifa_hphp_get_stats, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_get_filters = {(void*)&i_stream_get_filters, (void*)&ifa_stream_get_filters, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_set_iostatus_address = {(void*)&i_hphp_set_iostatus_address, (void*)&ifa_hphp_set_iostatus_address, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_unset_taint = {(void*)&i_fb_unset_taint, (void*)&ifa_fb_unset_taint, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_date_parse = {(void*)&i_date_parse, (void*)&ifa_date_parse, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_json_decode = {(void*)&i_json_decode, (void*)&ifa_json_decode, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_parse = {(void*)&i_mailparse_msg_parse, (void*)&ifa_mailparse_msg_parse, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_string = {(void*)&i_is_string, (void*)&ifa_is_string, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_num_recent = {(void*)&i_imap_num_recent, (void*)&ifa_imap_num_recent, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_stream_encode = {(void*)&i_mailparse_stream_encode, (void*)&ifa_mailparse_stream_encode, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_exec = {(void*)&i_curl_exec, (void*)&ifa_curl_exec, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getfileinfo = {(void*)&i_hphp_splfileinfo_getfileinfo, (void*)&ifa_hphp_splfileinfo_getfileinfo, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_convert_kana = {(void*)&i_mb_convert_kana, (void*)&ifa_mb_convert_kana, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_chgrp = {(void*)&i_chgrp, (void*)&ifa_chgrp, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getsid = {(void*)&i_posix_getsid, (void*)&ifa_posix_getsid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_is_block_algorithm_mode = {(void*)&i_mcrypt_module_is_block_algorithm_mode, (void*)&ifa_mcrypt_module_is_block_algorithm_mode, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_lazy_lstat = {(void*)&i_fb_lazy_lstat, (void*)&ifa_fb_lazy_lstat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_utf8ize = {(void*)&i_fb_utf8ize, (void*)&ifa_fb_utf8ize, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_hphp_splfileobject_eof = {(void*)&i_hphp_splfileobject_eof, (void*)&ifa_hphp_splfileobject_eof, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_getmailboxes = {(void*)&i_imap_getmailboxes, (void*)&ifa_imap_getmailboxes, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpopdefs = {(void*)&i_drawpopdefs, (void*)&ifa_drawpopdefs, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_vprintf = {(void*)&i_vprintf, (void*)&ifa_vprintf, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_pi = {(void*)&i_xmlwriter_write_pi, (void*)&ifa_xmlwriter_write_pi, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagechannelmean = {(void*)&i_magickgetimagechannelmean, (void*)&ifa_magickgetimagechannelmean, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_end_dtd_entity = {(void*)&i_xmlwriter_end_dtd_entity, (void*)&ifa_xmlwriter_end_dtd_entity, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_libxml_disable_entity_loader = {(void*)&i_libxml_disable_entity_loader, (void*)&ifa_libxml_disable_entity_loader, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_method_exists = {(void*)&i_method_exists, (void*)&ifa_method_exists, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_csr_new = {(void*)&i_openssl_csr_new, (void*)&ifa_openssl_csr_new, 4, 0, 0x0000000000000002LL};
extern const CallInfo ci_gzeof = {(void*)&i_gzeof, (void*)&ifa_gzeof, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_intersect = {(void*)&i_array_intersect, (void*)&ifa_array_intersect, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_array_change_key_case = {(void*)&i_array_change_key_case, (void*)&ifa_array_change_key_case, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_list_processes = {(void*)&i_mysql_list_processes, (void*)&ifa_mysql_list_processes, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetalphaquantum = {(void*)&i_pixelsetalphaquantum, (void*)&ifa_pixelsetalphaquantum, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_filegroup = {(void*)&i_filegroup, (void*)&ifa_filegroup, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_mkfifo = {(void*)&i_posix_mkfifo, (void*)&ifa_posix_mkfifo, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_utf8 = {(void*)&i_imap_utf8, (void*)&ifa_imap_utf8, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_import_request_variables = {(void*)&i_import_request_variables, (void*)&ifa_import_request_variables, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickedgeimage = {(void*)&i_magickedgeimage, (void*)&ifa_magickedgeimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_diff_key = {(void*)&i_array_diff_key, (void*)&ifa_array_diff_key, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_magickresizeimage = {(void*)&i_magickresizeimage, (void*)&ifa_magickresizeimage, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_clearpixeliterator = {(void*)&i_clearpixeliterator, (void*)&ifa_clearpixeliterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursiveiteratoriterator_next = {(void*)&i_hphp_recursiveiteratoriterator_next, (void*)&ifa_hphp_recursiveiteratoriterator_next, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_disk_total_space = {(void*)&i_disk_total_space, (void*)&ifa_disk_total_space, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stripos = {(void*)&i_stripos, (void*)&ifa_stripos, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_acosh = {(void*)&i_acosh, (void*)&ifa_acosh, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_setegid = {(void*)&i_posix_setegid, (void*)&ifa_posix_setegid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetcolorcount = {(void*)&i_pixelsetcolorcount, (void*)&ifa_pixelsetcolorcount, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_bin_loadfile = {(void*)&i_apc_bin_loadfile, (void*)&ifa_apc_bin_loadfile, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetcolorasstring = {(void*)&i_pixelgetcolorasstring, (void*)&ifa_pixelgetcolorasstring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_connection_timeout = {(void*)&i_connection_timeout, (void*)&ifa_connection_timeout, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_strchr = {(void*)&i_strchr, (void*)&ifa_strchr, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_uname = {(void*)&i_posix_uname, (void*)&ifa_posix_uname, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_stristr = {(void*)&i_mb_stristr, (void*)&ifa_mb_stristr, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_sem_release = {(void*)&i_sem_release, (void*)&ifa_sem_release, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_headers = {(void*)&i_imap_headers, (void*)&ifa_imap_headers, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickremoveimageprofile = {(void*)&i_magickremoveimageprofile, (void*)&ifa_magickremoveimageprofile, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagefill = {(void*)&i_imagefill, (void*)&ifa_imagefill, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_ftruncate = {(void*)&i_hphp_splfileobject_ftruncate, (void*)&ifa_hphp_splfileobject_ftruncate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorexactalpha = {(void*)&i_imagecolorexactalpha, (void*)&ifa_imagecolorexactalpha, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_restore_include_path = {(void*)&i_restore_include_path, (void*)&ifa_restore_include_path, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_wrapper_unregister = {(void*)&i_stream_wrapper_unregister, (void*)&ifa_stream_wrapper_unregister, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_unregister_tick_function = {(void*)&i_unregister_tick_function, (void*)&ifa_unregister_tick_function, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_sort = {(void*)&i_sort, (void*)&ifa_sort, 3, 0, 0x0000000000000001LL};
extern const CallInfo ci_shm_remove_var = {(void*)&i_shm_remove_var, (void*)&ifa_shm_remove_var, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_md5_file = {(void*)&i_md5_file, (void*)&ifa_md5_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_decoct = {(void*)&i_decoct, (void*)&ifa_decoct, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_gzhandler = {(void*)&i_ob_gzhandler, (void*)&ifa_ob_gzhandler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_write_hdf_string = {(void*)&i_write_hdf_string, (void*)&ifa_write_hdf_string, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzerrno = {(void*)&i_bzerrno, (void*)&ifa_bzerrno, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_getcwd = {(void*)&i_getcwd, (void*)&ifa_getcwd, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_set_attribute_ns = {(void*)&i_dom_element_set_attribute_ns, (void*)&ifa_dom_element_set_attribute_ns, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokedasharray = {(void*)&i_drawgetstrokedasharray, (void*)&ifa_drawgetstrokedasharray, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fwrite = {(void*)&i_hphp_splfileobject_fwrite, (void*)&ifa_hphp_splfileobject_fwrite, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickannotateimage = {(void*)&i_magickannotateimage, (void*)&ifa_magickannotateimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_alnum = {(void*)&i_ctype_alnum, (void*)&ifa_ctype_alnum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_select_db = {(void*)&i_mysql_select_db, (void*)&ifa_mysql_select_db, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_close = {(void*)&i_mysql_close, (void*)&ifa_mysql_close, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_htmlspecialchars = {(void*)&i_htmlspecialchars, (void*)&ifa_htmlspecialchars, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_time_sleep_until = {(void*)&i_time_sleep_until, (void*)&ifa_time_sleep_until, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorclosest = {(void*)&i_imagecolorclosest, (void*)&ifa_imagecolorclosest, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_token_get_all = {(void*)&i_token_get_all, (void*)&ifa_token_get_all, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickquantizeimages = {(void*)&i_magickquantizeimages, (void*)&ifa_magickquantizeimages, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_sort_with_sort_keys = {(void*)&i_collator_sort_with_sort_keys, (void*)&ifa_collator_sort_with_sort_keys, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_destroydrawingwand = {(void*)&i_destroydrawingwand, (void*)&ifa_destroydrawingwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_msg_receive = {(void*)&i_msg_receive, (void*)&ifa_msg_receive, 8, 0, 0x0000000000000094LL};
extern const CallInfo ci_xml_error_string = {(void*)&i_xml_error_string, (void*)&ifa_xml_error_string, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_spl_autoload_unregister = {(void*)&i_spl_autoload_unregister, (void*)&ifa_spl_autoload_unregister, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_kill = {(void*)&i_posix_kill, (void*)&ifa_posix_kill, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagerotate = {(void*)&i_imagerotate, (void*)&ifa_imagerotate, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickpaintopaqueimage = {(void*)&i_magickpaintopaqueimage, (void*)&ifa_magickpaintopaqueimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_sscanf = {(void*)&i_sscanf, (void*)&ifa_sscanf, 2, 2, 0x0000000000000000LL};
extern const CallInfo ci_mb_http_output = {(void*)&i_mb_http_output, (void*)&ifa_mb_http_output, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_hmac = {(void*)&i_hash_hmac, (void*)&ifa_hash_hmac, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagedestroy = {(void*)&i_imagedestroy, (void*)&ifa_imagedestroy, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_set_option = {(void*)&i_ldap_set_option, (void*)&ifa_ldap_set_option, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_sleep = {(void*)&i_sleep, (void*)&ifa_sleep, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_setpriority = {(void*)&i_pcntl_setpriority, (void*)&ifa_pcntl_setpriority, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_strnatcmp = {(void*)&i_strnatcmp, (void*)&ifa_strnatcmp, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokelinejoin = {(void*)&i_drawsetstrokelinejoin, (void*)&ifa_drawsetstrokelinejoin, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_isdrawingwand = {(void*)&i_isdrawingwand, (void*)&ifa_isdrawingwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_filter_append = {(void*)&i_stream_filter_append, (void*)&ifa_stream_filter_append, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagemattecolor = {(void*)&i_magicksetimagemattecolor, (void*)&ifa_magicksetimagemattecolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_class_uses = {(void*)&i_class_uses, (void*)&ifa_class_uses, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcompareimages = {(void*)&i_magickcompareimages, (void*)&ifa_magickcompareimages, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_thrift_unserialize = {(void*)&i_fb_thrift_unserialize, (void*)&ifa_fb_thrift_unserialize, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_gzclose = {(void*)&i_gzclose, (void*)&ifa_gzclose, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mt_rand = {(void*)&i_mt_rand, (void*)&ifa_mt_rand, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_get_key_size = {(void*)&i_mcrypt_enc_get_key_size, (void*)&ifa_mcrypt_enc_get_key_size, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_get_error_message = {(void*)&i_collator_get_error_message, (void*)&ifa_collator_get_error_message, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_flock = {(void*)&i_flock, (void*)&ifa_flock, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_gethostbyaddr = {(void*)&i_gethostbyaddr, (void*)&ifa_gethostbyaddr, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_exif_read_data = {(void*)&i_exif_read_data, (void*)&ifa_exif_read_data, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkcs12_export_to_file = {(void*)&i_openssl_pkcs12_export_to_file, (void*)&ifa_openssl_pkcs12_export_to_file, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strpos = {(void*)&i_mb_strpos, (void*)&ifa_mb_strpos, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_invoke_method = {(void*)&i_hphp_invoke_method, (void*)&ifa_hphp_invoke_method, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_verify = {(void*)&i_openssl_verify, (void*)&ifa_openssl_verify, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_get_client_info = {(void*)&i_mysql_get_client_info, (void*)&ifa_mysql_get_client_info, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_strip_tags = {(void*)&i_strip_tags, (void*)&ifa_strip_tags, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_directoryiterator_rewind = {(void*)&i_hphp_directoryiterator_rewind, (void*)&ifa_hphp_directoryiterator_rewind, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dangling_server_proxy_old_request = {(void*)&i_dangling_server_proxy_old_request, (void*)&ifa_dangling_server_proxy_old_request, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_is_block_mode = {(void*)&i_mcrypt_enc_is_block_mode, (void*)&ifa_mcrypt_enc_is_block_mode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetquantumcolor = {(void*)&i_pixelgetquantumcolor, (void*)&ifa_pixelgetquantumcolor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_get_thread_time = {(void*)&i_xbox_get_thread_time, (void*)&ifa_xbox_get_thread_time, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_diskfreespace = {(void*)&i_diskfreespace, (void*)&ifa_diskfreespace, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_raw = {(void*)&i_xmlwriter_write_raw, (void*)&ifa_xmlwriter_write_raw, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_characterdata_substring_data = {(void*)&i_dom_characterdata_substring_data, (void*)&ifa_dom_characterdata_substring_data, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_open = {(void*)&i_mcrypt_module_open, (void*)&ifa_mcrypt_module_open, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_pow = {(void*)&i_pow, (void*)&ifa_pow, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_x509_checkpurpose = {(void*)&i_openssl_x509_checkpurpose, (void*)&ifa_openssl_x509_checkpurpose, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_php_uname = {(void*)&i_php_uname, (void*)&ifa_php_uname, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_header = {(void*)&i_header, (void*)&ifa_header, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_bind = {(void*)&i_socket_bind, (void*)&ifa_socket_bind, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagetype = {(void*)&i_magickgetimagetype, (void*)&ifa_magickgetimagetype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_asort = {(void*)&i_asort, (void*)&ifa_asort, 3, 0, 0x0000000000000001LL};
extern const CallInfo ci_imagesetbrush = {(void*)&i_imagesetbrush, (void*)&ifa_imagesetbrush, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_unpack_continuation = {(void*)&i_hphp_unpack_continuation, (void*)&ifa_hphp_unpack_continuation, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_network_enable = {(void*)&i_xhprof_network_enable, (void*)&ifa_xhprof_network_enable, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_attribute_ns = {(void*)&i_xmlwriter_start_attribute_ns, (void*)&ifa_xmlwriter_start_attribute_ns, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_dtd = {(void*)&i_xmlwriter_start_dtd, (void*)&ifa_xmlwriter_start_dtd, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_getallheaders = {(void*)&i_getallheaders, (void*)&ifa_getallheaders, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzdecode = {(void*)&i_gzdecode, (void*)&ifa_gzdecode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzgetss = {(void*)&i_gzgetss, (void*)&ifa_gzgetss, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickqueryformats = {(void*)&i_magickqueryformats, (void*)&ifa_magickqueryformats, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_insert_id = {(void*)&i_mysql_insert_id, (void*)&ifa_mysql_insert_id, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickunsharpmaskimage = {(void*)&i_magickunsharpmaskimage, (void*)&ifa_magickunsharpmaskimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_uksort = {(void*)&i_uksort, (void*)&ifa_uksort, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_dns_check_record = {(void*)&i_dns_check_record, (void*)&ifa_dns_check_record, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_natsort = {(void*)&i_natsort, (void*)&ifa_natsort, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_phpinfo = {(void*)&i_phpinfo, (void*)&ifa_phpinfo, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_create = {(void*)&i_date_create, (void*)&ifa_date_create, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_serialize = {(void*)&i_serialize, (void*)&ifa_serialize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_xpath_evaluate = {(void*)&i_dom_xpath_evaluate, (void*)&ifa_dom_xpath_evaluate, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcyclecolormapimage = {(void*)&i_magickcyclecolormapimage, (void*)&ifa_magickcyclecolormapimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagemimetype = {(void*)&i_magickgetimagemimetype, (void*)&ifa_magickgetimagemimetype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_set_nonblock = {(void*)&i_socket_set_nonblock, (void*)&ifa_socket_set_nonblock, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcommentimage = {(void*)&i_magickcommentimage, (void*)&ifa_magickcommentimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_wordwrap = {(void*)&i_wordwrap, (void*)&ifa_wordwrap, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetredquantum = {(void*)&i_pixelgetredquantum, (void*)&ifa_pixelgetredquantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_extension_funcs = {(void*)&i_get_extension_funcs, (void*)&ifa_get_extension_funcs, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_get_thread_timeout = {(void*)&i_xbox_get_thread_timeout, (void*)&ifa_xbox_get_thread_timeout, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_decode = {(void*)&i_session_decode, (void*)&ifa_session_decode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getgroups = {(void*)&i_posix_getgroups, (void*)&ifa_posix_getgroups, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokealpha = {(void*)&i_drawsetstrokealpha, (void*)&ifa_drawsetstrokealpha, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_csr_export = {(void*)&i_openssl_csr_export, (void*)&ifa_openssl_csr_export, 3, 0, 0x0000000000000002LL};
extern const CallInfo ci_shm_has_var = {(void*)&i_shm_has_var, (void*)&ifa_shm_has_var, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_defined = {(void*)&i_defined, (void*)&ifa_defined, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_parse_result = {(void*)&i_ldap_parse_result, (void*)&ifa_ldap_parse_result, 6, 0, 0x000000000000003CLL};
extern const CallInfo ci_pushdrawingwand = {(void*)&i_pushdrawingwand, (void*)&ifa_pushdrawingwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokemiterlimit = {(void*)&i_drawsetstrokemiterlimit, (void*)&ifa_drawsetstrokemiterlimit, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicktintimage = {(void*)&i_magicktintimage, (void*)&ifa_magicktintimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_intl_is_failure = {(void*)&i_intl_is_failure, (void*)&ifa_intl_is_failure, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_getpeername = {(void*)&i_socket_getpeername, (void*)&ifa_socket_getpeername, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_sncompress = {(void*)&i_sncompress, (void*)&ifa_sncompress, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_end_dtd = {(void*)&i_xmlwriter_end_dtd, (void*)&ifa_xmlwriter_end_dtd, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgammaimage = {(void*)&i_magickgammaimage, (void*)&ifa_magickgammaimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_get_algo_key_size = {(void*)&i_mcrypt_module_get_algo_key_size, (void*)&ifa_mcrypt_module_get_algo_key_size, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_count_values = {(void*)&i_array_count_values, (void*)&ifa_array_count_values, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromjpeg = {(void*)&i_imagecreatefromjpeg, (void*)&ifa_imagecreatefromjpeg, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_func_get_args = {(void*)&i_func_get_args, (void*)&ifa_func_get_args, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfontstretch = {(void*)&i_drawgetfontstretch, (void*)&ifa_drawgetfontstretch, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_setfileclass = {(void*)&i_hphp_splfileinfo_setfileclass, (void*)&ifa_hphp_splfileinfo_setfileclass, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_get_status = {(void*)&i_socket_get_status, (void*)&ifa_socket_get_status, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagerenderingintent = {(void*)&i_magickgetimagerenderingintent, (void*)&ifa_magickgetimagerenderingintent, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_cfb = {(void*)&i_mcrypt_cfb, (void*)&ifa_mcrypt_cfb, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_ini_restore = {(void*)&i_ini_restore, (void*)&ifa_ini_restore, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_import_node = {(void*)&i_dom_document_import_node, (void*)&ifa_dom_document_import_node, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_ttyname = {(void*)&i_posix_ttyname, (void*)&ifa_posix_ttyname, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fgetcsv = {(void*)&i_hphp_splfileobject_fgetcsv, (void*)&ifa_hphp_splfileobject_fgetcsv, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_escapeshellarg = {(void*)&i_escapeshellarg, (void*)&ifa_escapeshellarg, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawline = {(void*)&i_drawline, (void*)&ifa_drawline, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_list = {(void*)&i_ldap_list, (void*)&ifa_ldap_list, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_get_attribute = {(void*)&i_dom_element_get_attribute, (void*)&ifa_dom_element_get_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imageconvolution = {(void*)&i_imageconvolution, (void*)&ifa_imageconvolution, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmosaicimages = {(void*)&i_magickmosaicimages, (void*)&ifa_magickmosaicimages, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_meta_tags = {(void*)&i_get_meta_tags, (void*)&ifa_get_meta_tags, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_unbind = {(void*)&i_ldap_unbind, (void*)&ifa_ldap_unbind, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickdescribeimage = {(void*)&i_magickdescribeimage, (void*)&ifa_magickdescribeimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash = {(void*)&i_hash, (void*)&ifa_hash, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_timezone_abbreviations_list = {(void*)&i_timezone_abbreviations_list, (void*)&ifa_timezone_abbreviations_list, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_iconv = {(void*)&i_iconv, (void*)&ifa_iconv, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_sizeof = {(void*)&i_sizeof, (void*)&ifa_sizeof, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_is_block_algorithm = {(void*)&i_mcrypt_enc_is_block_algorithm, (void*)&ifa_mcrypt_enc_is_block_algorithm, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xbox_schedule_thread_reset = {(void*)&i_xbox_schedule_thread_reset, (void*)&ifa_xbox_schedule_thread_reset, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_gettype = {(void*)&i_gettype, (void*)&ifa_gettype, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_strnatcasecmp = {(void*)&i_strnatcasecmp, (void*)&ifa_strnatcasecmp, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromxbm = {(void*)&i_imagecreatefromxbm, (void*)&ifa_imagecreatefromxbm, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_alarm = {(void*)&i_pcntl_alarm, (void*)&ifa_pcntl_alarm, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_object = {(void*)&i_is_object, (void*)&ifa_is_object, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_start_namespace_decl_handler = {(void*)&i_xml_set_start_namespace_decl_handler, (void*)&ifa_xml_set_start_namespace_decl_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_diff_assoc = {(void*)&i_array_diff_assoc, (void*)&ifa_array_diff_assoc, 2, 1, 0x0000000000000000LL};
extern const CallInfo ci_memcache_get_version = {(void*)&i_memcache_get_version, (void*)&ifa_memcache_get_version, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ucfirst = {(void*)&i_ucfirst, (void*)&ifa_ucfirst, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursivedirectoryiterator_getsubpathname = {(void*)&i_hphp_recursivedirectoryiterator_getsubpathname, (void*)&ifa_hphp_recursivedirectoryiterator_getsubpathname, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagesignature = {(void*)&i_magickgetimagesignature, (void*)&ifa_magickgetimagesignature, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_set_file_buffer = {(void*)&i_set_file_buffer, (void*)&ifa_set_file_buffer, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_forward_static_call = {(void*)&i_forward_static_call, (void*)&ifa_forward_static_call, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_ctype_cntrl = {(void*)&i_ctype_cntrl, (void*)&ifa_ctype_cntrl, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_setmaxlinelen = {(void*)&i_hphp_splfileobject_setmaxlinelen, (void*)&ifa_hphp_splfileobject_setmaxlinelen, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_err2str = {(void*)&i_ldap_err2str, (void*)&ifa_ldap_err2str, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_frame_end = {(void*)&i_xhprof_frame_end, (void*)&ifa_xhprof_frame_end, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickqueryconfigureoptions = {(void*)&i_magickqueryconfigureoptions, (void*)&ifa_magickqueryconfigureoptions, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_lsub = {(void*)&i_imap_lsub, (void*)&ifa_imap_lsub, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_modify = {(void*)&i_date_modify, (void*)&ifa_date_modify, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_base_convert = {(void*)&i_base_convert, (void*)&ifa_base_convert, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_bind = {(void*)&i_ldap_bind, (void*)&ifa_ldap_bind, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_processing_instruction = {(void*)&i_dom_document_create_processing_instruction, (void*)&ifa_dom_document_create_processing_instruction, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_http_build_query = {(void*)&i_http_build_query, (void*)&ifa_http_build_query, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_start = {(void*)&i_session_start, (void*)&ifa_session_start, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_link = {(void*)&i_is_link, (void*)&ifa_is_link, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_start_tls = {(void*)&i_ldap_start_tls, (void*)&ifa_ldap_start_tls, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_multisort = {(void*)&i_array_multisort, (void*)&ifa_array_multisort, 1, 32, 0x0000000000000001LL};
extern const CallInfo ci_mb_strripos = {(void*)&i_mb_strripos, (void*)&ifa_mb_strripos, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_set_rebind_proc = {(void*)&i_ldap_set_rebind_proc, (void*)&ifa_ldap_set_rebind_proc, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fileowner = {(void*)&i_fileowner, (void*)&ifa_fileowner, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apd_echo = {(void*)&i_apd_echo, (void*)&ifa_apd_echo, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_extract = {(void*)&i_extract, (void*)&ifa_extract, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_end_flush = {(void*)&i_ob_end_flush, (void*)&ifa_ob_end_flush, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_iterator_count = {(void*)&i_iterator_count, (void*)&ifa_iterator_count, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_text = {(void*)&i_xmlwriter_text, (void*)&ifa_xmlwriter_text, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_lazy_realpath = {(void*)&i_fb_lazy_realpath, (void*)&ifa_fb_lazy_realpath, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageblueprimary = {(void*)&i_magickgetimageblueprimary, (void*)&ifa_magickgetimageblueprimary, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickflattenimages = {(void*)&i_magickflattenimages, (void*)&ifa_magickflattenimages, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_browser = {(void*)&i_get_browser, (void*)&ifa_get_browser, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzcompress = {(void*)&i_gzcompress, (void*)&ifa_gzcompress, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_get_elements_by_tag_name = {(void*)&i_dom_document_get_elements_by_tag_name, (void*)&ifa_dom_document_get_elements_by_tag_name, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_loaded_extensions = {(void*)&i_get_loaded_extensions, (void*)&ifa_get_loaded_extensions, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_timeout = {(void*)&i_imap_timeout, (void*)&ifa_imap_timeout, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_restore_error_handler = {(void*)&i_restore_error_handler, (void*)&ifa_restore_error_handler, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_getpriority = {(void*)&i_pcntl_getpriority, (void*)&ifa_pcntl_getpriority, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openlog = {(void*)&i_openlog, (void*)&ifa_openlog, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_inet_pton = {(void*)&i_inet_pton, (void*)&ifa_inet_pton, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pagelet_server_flush = {(void*)&i_pagelet_server_flush, (void*)&ifa_pagelet_server_flush, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_strlen = {(void*)&i_mb_strlen, (void*)&ifa_mb_strlen, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickquantizeimage = {(void*)&i_magickquantizeimage, (void*)&ifa_magickquantizeimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_setinfoclass = {(void*)&i_hphp_splfileinfo_setinfoclass, (void*)&ifa_hphp_splfileinfo_setinfoclass, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_spl_autoload_functions = {(void*)&i_spl_autoload_functions, (void*)&ifa_spl_autoload_functions, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_thrift_protocol_write_compact = {(void*)&i_thrift_protocol_write_compact, (void*)&ifa_thrift_protocol_write_compact, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_next_reference = {(void*)&i_ldap_next_reference, (void*)&ifa_ldap_next_reference, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_integer = {(void*)&i_is_integer, (void*)&ifa_is_integer, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_addcslashes = {(void*)&i_addcslashes, (void*)&ifa_addcslashes, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetcolorcount = {(void*)&i_pixelgetcolorcount, (void*)&ifa_pixelgetcolorcount, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_output_memory = {(void*)&i_xmlwriter_output_memory, (void*)&ifa_xmlwriter_output_memory, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_func_serialized = {(void*)&i_call_user_func_serialized, (void*)&ifa_call_user_func_serialized, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagemattecolor = {(void*)&i_magickgetimagemattecolor, (void*)&ifa_magickgetimagemattecolor, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getpgrp = {(void*)&i_posix_getpgrp, (void*)&ifa_posix_getpgrp, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_create = {(void*)&i_socket_create, (void*)&ifa_socket_create, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphpd_get_client = {(void*)&i_hphpd_get_client, (void*)&ifa_hphpd_get_client, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageinterlacescheme = {(void*)&i_magicksetimageinterlacescheme, (void*)&ifa_magicksetimageinterlacescheme, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_debug_backtrace = {(void*)&i_debug_backtrace, (void*)&ifa_debug_backtrace, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_set_timeout = {(void*)&i_stream_set_timeout, (void*)&ifa_stream_set_timeout, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_highlight_string = {(void*)&i_highlight_string, (void*)&ifa_highlight_string, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_modify = {(void*)&i_ldap_modify, (void*)&ifa_ldap_modify, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_rfc822_write_address = {(void*)&i_imap_rfc822_write_address, (void*)&ifa_imap_rfc822_write_address, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_setoptimeout = {(void*)&i_memcache_setoptimeout, (void*)&ifa_memcache_setoptimeout, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelresetiterator = {(void*)&i_pixelresetiterator, (void*)&ifa_pixelresetiterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickreadimage = {(void*)&i_magickreadimage, (void*)&ifa_magickreadimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_get_contents = {(void*)&i_ob_get_contents, (void*)&ifa_ob_get_contents, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokelinecap = {(void*)&i_drawsetstrokelinecap, (void*)&ifa_drawsetstrokelinecap, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_strlen = {(void*)&i_strlen, (void*)&ifa_strlen, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpushclippath = {(void*)&i_drawpushclippath, (void*)&ifa_drawpushclippath, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_func = {(void*)&i_call_user_func, (void*)&ifa_call_user_func, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_dl = {(void*)&i_dl, (void*)&ifa_dl, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_cpu_get_count = {(void*)&i_cpu_get_count, (void*)&ifa_cpu_get_count, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_save_html_file = {(void*)&i_dom_document_save_html_file, (void*)&ifa_dom_document_save_html_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_strerror = {(void*)&i_posix_strerror, (void*)&ifa_posix_strerror, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickreducenoiseimage = {(void*)&i_magickreducenoiseimage, (void*)&ifa_magickreducenoiseimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfillalpha = {(void*)&i_drawgetfillalpha, (void*)&ifa_drawgetfillalpha, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_unbuffered_query = {(void*)&i_mysql_unbuffered_query, (void*)&ifa_mysql_unbuffered_query, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageiterations = {(void*)&i_magickgetimageiterations, (void*)&ifa_magickgetimageiterations, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_timezone_name_get = {(void*)&i_timezone_name_get, (void*)&ifa_timezone_name_get, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_crossall_query = {(void*)&i_fb_crossall_query, (void*)&ifa_fb_crossall_query, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickdrawimage = {(void*)&i_magickdrawimage, (void*)&ifa_magickdrawimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_date = {(void*)&i_date, (void*)&ifa_date, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickchopimage = {(void*)&i_magickchopimage, (void*)&ifa_magickchopimage, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_close = {(void*)&i_mcrypt_module_close, (void*)&ifa_mcrypt_module_close, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetindex = {(void*)&i_pixelgetindex, (void*)&ifa_pixelgetindex, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_debug_print_backtrace = {(void*)&i_debug_print_backtrace, (void*)&ifa_debug_print_backtrace, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_str_pad = {(void*)&i_str_pad, (void*)&ifa_str_pad, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_check_encoding = {(void*)&i_mb_check_encoding, (void*)&ifa_mb_check_encoding, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickremoveimageprofiles = {(void*)&i_magickremoveimageprofiles, (void*)&ifa_magickremoveimageprofiles, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickborderimage = {(void*)&i_magickborderimage, (void*)&ifa_magickborderimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_clear_unflushed = {(void*)&i_hphp_clear_unflushed, (void*)&ifa_hphp_clear_unflushed, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_this = {(void*)&i_hphp_get_this, (void*)&ifa_hphp_get_this, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_udiff = {(void*)&i_array_udiff, (void*)&ifa_array_udiff, 3, 1, 0x0000000000000000LL};
extern const CallInfo ci_write_hdf_file = {(void*)&i_write_hdf_file, (void*)&ifa_write_hdf_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_uintersect = {(void*)&i_array_uintersect, (void*)&ifa_array_uintersect, 3, 1, 0x0000000000000000LL};
extern const CallInfo ci_syslog = {(void*)&i_syslog, (void*)&ifa_syslog, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_vsprintf = {(void*)&i_vsprintf, (void*)&ifa_vsprintf, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pos = {(void*)&i_pos, (void*)&ifa_pos, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_parse_url = {(void*)&i_parse_url, (void*)&ifa_parse_url, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_error_get_last = {(void*)&i_error_get_last, (void*)&ifa_error_get_last, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_generic_end = {(void*)&i_mcrypt_generic_end, (void*)&ifa_mcrypt_generic_end, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_inc = {(void*)&i_apc_inc, (void*)&ifa_apc_inc, 4, 0, 0x0000000000000004LL};
extern const CallInfo ci_gmmktime = {(void*)&i_gmmktime, (void*)&ifa_gmmktime, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathclose = {(void*)&i_drawpathclose, (void*)&ifa_drawpathclose, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_errno = {(void*)&i_mysql_errno, (void*)&ifa_mysql_errno, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfillopacity = {(void*)&i_drawsetfillopacity, (void*)&ifa_drawsetfillopacity, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_diff_uassoc = {(void*)&i_array_diff_uassoc, (void*)&ifa_array_diff_uassoc, 3, 1, 0x0000000000000000LL};
extern const CallInfo ci_iconv_mime_decode = {(void*)&i_iconv_mime_decode, (void*)&ifa_iconv_mime_decode, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pdo_drivers = {(void*)&i_pdo_drivers, (void*)&ifa_pdo_drivers, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzopen = {(void*)&i_bzopen, (void*)&ifa_bzopen, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_spl_classes = {(void*)&i_spl_classes, (void*)&ifa_spl_classes, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_dtd_element = {(void*)&i_xmlwriter_start_dtd_element, (void*)&ifa_xmlwriter_start_dtd_element, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_idate = {(void*)&i_idate, (void*)&ifa_idate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickpainttransparentimage = {(void*)&i_magickpainttransparentimage, (void*)&ifa_magickpainttransparentimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_text_split_text = {(void*)&i_dom_text_split_text, (void*)&ifa_dom_text_split_text, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_space = {(void*)&i_ctype_space, (void*)&ifa_ctype_space, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imageinterlace = {(void*)&i_imageinterlace, (void*)&ifa_imageinterlace, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_strftime = {(void*)&i_strftime, (void*)&ifa_strftime, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_field_seek = {(void*)&i_mysql_field_seek, (void*)&ifa_mysql_field_seek, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ignore_user_abort = {(void*)&i_ignore_user_abort, (void*)&ifa_ignore_user_abort, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursiveiteratoriterator_current = {(void*)&i_hphp_recursiveiteratoriterator_current, (void*)&ifa_hphp_recursiveiteratoriterator_current, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_bzcompress = {(void*)&i_bzcompress, (void*)&ifa_bzcompress, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_merge_recursive = {(void*)&i_array_merge_recursive, (void*)&ifa_array_merge_recursive, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_element_ns = {(void*)&i_xmlwriter_write_element_ns, (void*)&ifa_xmlwriter_write_element_ns, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_encrypt = {(void*)&i_openssl_encrypt, (void*)&ifa_openssl_encrypt, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_binary = {(void*)&i_imap_binary, (void*)&ifa_imap_binary, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_get_status = {(void*)&i_ob_get_status, (void*)&ifa_ob_get_status, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getpwuid = {(void*)&i_posix_getpwuid, (void*)&ifa_posix_getpwuid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_set_id_attribute_node = {(void*)&i_dom_element_set_id_attribute_node, (void*)&ifa_dom_element_set_id_attribute_node, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzuncompress = {(void*)&i_gzuncompress, (void*)&ifa_gzuncompress, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_unshift = {(void*)&i_array_unshift, (void*)&ifa_array_unshift, 2, 1, 0x0000000000000001LL};
extern const CallInfo ci_parse_ini_string = {(void*)&i_parse_ini_string, (void*)&ifa_parse_ini_string, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokelinecap = {(void*)&i_drawgetstrokelinecap, (void*)&ifa_drawgetstrokelinecap, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_count_chars = {(void*)&i_count_chars, (void*)&ifa_count_chars, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_getmaxlinelen = {(void*)&i_hphp_splfileobject_getmaxlinelen, (void*)&ifa_hphp_splfileobject_getmaxlinelen, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_utf8_decode = {(void*)&i_utf8_decode, (void*)&ifa_utf8_decode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_set_blocking = {(void*)&i_stream_set_blocking, (void*)&ifa_stream_set_blocking, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mdecrypt_generic = {(void*)&i_mdecrypt_generic, (void*)&ifa_mdecrypt_generic, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getegid = {(void*)&i_posix_getegid, (void*)&ifa_posix_getegid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_html_entity_decode = {(void*)&i_html_entity_decode, (void*)&ifa_html_entity_decode, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_listsubscribed = {(void*)&i_imap_listsubscribed, (void*)&ifa_imap_listsubscribed, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_connect_with_db = {(void*)&i_mysql_connect_with_db, (void*)&ifa_mysql_connect_with_db, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_x509_export_to_file = {(void*)&i_openssl_x509_export_to_file, (void*)&ifa_openssl_x509_export_to_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_close = {(void*)&i_imap_close, (void*)&ifa_imap_close, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_exec = {(void*)&i_pcntl_exec, (void*)&ifa_pcntl_exec, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_msg_free = {(void*)&i_mailparse_msg_free, (void*)&ifa_mailparse_msg_free, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathlinetorelative = {(void*)&i_drawpathlinetorelative, (void*)&ifa_drawpathlinetorelative, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_setcookie = {(void*)&i_setcookie, (void*)&ifa_setcookie, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_timers = {(void*)&i_hphp_get_timers, (void*)&ifa_hphp_get_timers, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_get_element_by_id = {(void*)&i_dom_document_get_element_by_id, (void*)&ifa_dom_document_get_element_by_id, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_setpgid = {(void*)&i_posix_setpgid, (void*)&ifa_posix_setpgid, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmattefloodfillimage = {(void*)&i_magickmattefloodfillimage, (void*)&ifa_magickmattefloodfillimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_dns_get_mx = {(void*)&i_dns_get_mx, (void*)&ifa_dns_get_mx, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_preg_last_error = {(void*)&i_preg_last_error, (void*)&ifa_preg_last_error, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecopymerge = {(void*)&i_imagecopymerge, (void*)&ifa_imagecopymerge, 9, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_invoke = {(void*)&i_hphp_invoke, (void*)&ifa_hphp_invoke, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_mailboxmsginfo = {(void*)&i_imap_mailboxmsginfo, (void*)&ifa_imap_mailboxmsginfo, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_register_shutdown_function = {(void*)&i_register_shutdown_function, (void*)&ifa_register_shutdown_function, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_set_attribute_node_ns = {(void*)&i_dom_element_set_attribute_node_ns, (void*)&ifa_dom_element_set_attribute_node_ns, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_notation_decl_handler = {(void*)&i_xml_set_notation_decl_handler, (void*)&ifa_xml_set_notation_decl_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_next_result = {(void*)&i_mysql_next_result, (void*)&ifa_mysql_next_result, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetversion = {(void*)&i_magickgetversion, (void*)&ifa_magickgetversion, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_element_ns = {(void*)&i_dom_document_create_element_ns, (void*)&ifa_dom_document_create_element_ns, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickoilpaintimage = {(void*)&i_magickoilpaintimage, (void*)&ifa_magickoilpaintimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickmapimage = {(void*)&i_magickmapimage, (void*)&ifa_magickmapimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_first_attribute = {(void*)&i_ldap_first_attribute, (void*)&ifa_ldap_first_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_lcg_value = {(void*)&i_lcg_value, (void*)&ifa_lcg_value, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagedashedline = {(void*)&i_imagedashedline, (void*)&ifa_imagedashedline, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_ob_iconv_handler = {(void*)&i_ob_iconv_handler, (void*)&ifa_ob_iconv_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_read = {(void*)&i_ldap_read, (void*)&ifa_ldap_read, 8, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetclippath = {(void*)&i_drawgetclippath, (void*)&ifa_drawgetclippath, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_shm_detach = {(void*)&i_shm_detach, (void*)&ifa_shm_detach, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_register_wrapper = {(void*)&i_stream_register_wrapper, (void*)&ifa_stream_register_wrapper, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagebias = {(void*)&i_magicksetimagebias, (void*)&ifa_magicksetimagebias, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ereg = {(void*)&i_ereg, (void*)&ifa_ereg, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_mb_substr = {(void*)&i_mb_substr, (void*)&ifa_mb_substr, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_valid = {(void*)&i_hphp_splfileobject_valid, (void*)&ifa_hphp_splfileobject_valid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_cfg_var = {(void*)&i_get_cfg_var, (void*)&ifa_get_cfg_var, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_substr_replace = {(void*)&i_substr_replace, (void*)&ifa_substr_replace, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_search_regs = {(void*)&i_mb_ereg_search_regs, (void*)&ifa_mb_ereg_search_regs, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_get_entries = {(void*)&i_ldap_get_entries, (void*)&ifa_ldap_get_entries, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_end_attribute = {(void*)&i_xmlwriter_end_attribute, (void*)&ifa_xmlwriter_end_attribute, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetyellowquantum = {(void*)&i_pixelgetyellowquantum, (void*)&ifa_pixelgetyellowquantum, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_isfile = {(void*)&i_hphp_splfileinfo_isfile, (void*)&ifa_hphp_splfileinfo_isfile, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_key = {(void*)&i_key, (void*)&ifa_key, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_drawscale = {(void*)&i_drawscale, (void*)&ifa_drawscale, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_lchown = {(void*)&i_lchown, (void*)&ifa_lchown, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_regex_encoding = {(void*)&i_mb_regex_encoding, (void*)&ifa_mb_regex_encoding, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_file = {(void*)&i_file, (void*)&ifa_file, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_fstat = {(void*)&i_fstat, (void*)&ifa_fstat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_multi_init = {(void*)&i_curl_multi_init, (void*)&ifa_curl_multi_init, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_int = {(void*)&i_is_int, (void*)&ifa_is_int, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_timezone_transitions_get = {(void*)&i_timezone_transitions_get, (void*)&ifa_timezone_transitions_get, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_bin2hex = {(void*)&i_bin2hex, (void*)&ifa_bin2hex, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickflopimage = {(void*)&i_magickflopimage, (void*)&ifa_magickflopimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ip2long = {(void*)&i_ip2long, (void*)&ifa_ip2long, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorclosesthwb = {(void*)&i_imagecolorclosesthwb, (void*)&ifa_imagecolorclosesthwb, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_ezmlm_hash = {(void*)&i_ezmlm_hash, (void*)&ifa_ezmlm_hash, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimageredprimary = {(void*)&i_magickgetimageredprimary, (void*)&ifa_magickgetimageredprimary, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphpd_install_user_command = {(void*)&i_hphpd_install_user_command, (void*)&ifa_hphpd_install_user_command, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_attribute = {(void*)&i_xmlwriter_write_attribute, (void*)&ifa_xmlwriter_write_attribute, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_spl_autoload_call = {(void*)&i_spl_autoload_call, (void*)&ifa_spl_autoload_call, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_list_encodings = {(void*)&i_mb_list_encodings, (void*)&ifa_mb_list_encodings, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_setopt_array = {(void*)&i_curl_setopt_array, (void*)&ifa_curl_setopt_array, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickenhanceimage = {(void*)&i_magickenhanceimage, (void*)&ifa_magickenhanceimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_curl_getopt = {(void*)&i_fb_curl_getopt, (void*)&ifa_fb_curl_getopt, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_ping = {(void*)&i_imap_ping, (void*)&ifa_imap_ping, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathmovetorelative = {(void*)&i_drawpathmovetorelative, (void*)&ifa_drawpathmovetorelative, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_show_source = {(void*)&i_show_source, (void*)&ifa_show_source, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pcntl_signal_dispatch = {(void*)&i_pcntl_signal_dispatch, (void*)&ifa_pcntl_signal_dispatch, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_php_check_syntax = {(void*)&i_php_check_syntax, (void*)&ifa_php_check_syntax, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_hphp_get_function_info = {(void*)&i_hphp_get_function_info, (void*)&ifa_hphp_get_function_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_fetch_lengths = {(void*)&i_mysql_fetch_lengths, (void*)&ifa_mysql_fetch_lengths, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickadaptivethresholdimage = {(void*)&i_magickadaptivethresholdimage, (void*)&ifa_magickadaptivethresholdimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_thrift_protocol_write_binary = {(void*)&i_thrift_protocol_write_binary, (void*)&ifa_thrift_protocol_write_binary, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject___construct = {(void*)&i_hphp_splfileobject___construct, (void*)&ifa_hphp_splfileobject___construct, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagebackgroundcolor = {(void*)&i_magicksetimagebackgroundcolor, (void*)&ifa_magicksetimagebackgroundcolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetstringwidth = {(void*)&i_magickgetstringwidth, (void*)&ifa_magickgetstringwidth, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpolygon = {(void*)&i_drawpolygon, (void*)&ifa_drawpolygon, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_quoted_printable_decode = {(void*)&i_quoted_printable_decode, (void*)&ifa_quoted_printable_decode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickflipimage = {(void*)&i_magickflipimage, (void*)&ifa_magickflipimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_convert_case = {(void*)&i_mb_convert_case, (void*)&ifa_mb_convert_case, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetcyan = {(void*)&i_pixelgetcyan, (void*)&ifa_pixelgetcyan, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_func_num_args = {(void*)&i_func_num_args, (void*)&ifa_func_num_args, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_html_translation_table = {(void*)&i_get_html_translation_table, (void*)&ifa_get_html_translation_table, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokemiterlimit = {(void*)&i_drawgetstrokemiterlimit, (void*)&ifa_drawgetstrokemiterlimit, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetfontweight = {(void*)&i_drawsetfontweight, (void*)&ifa_drawsetfontweight, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_clear_cache = {(void*)&i_apc_clear_cache, (void*)&ifa_apc_clear_cache, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetresourcelimit = {(void*)&i_magicksetresourcelimit, (void*)&ifa_magicksetresourcelimit, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_get_last_flush_size = {(void*)&i_fb_get_last_flush_size, (void*)&ifa_fb_get_last_flush_size, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_csr_get_public_key = {(void*)&i_openssl_csr_get_public_key, (void*)&ifa_openssl_csr_get_public_key, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_ping = {(void*)&i_mysql_ping, (void*)&ifa_mysql_ping, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_rewind = {(void*)&i_rewind, (void*)&ifa_rewind, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokeantialias = {(void*)&i_drawsetstrokeantialias, (void*)&ifa_drawsetstrokeantialias, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_list_algorithms = {(void*)&i_mcrypt_list_algorithms, (void*)&ifa_mcrypt_list_algorithms, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_values = {(void*)&i_array_values, (void*)&ifa_array_values, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_sem_remove = {(void*)&i_sem_remove, (void*)&ifa_sem_remove, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_set_attribute_node = {(void*)&i_dom_element_set_attribute_node, (void*)&ifa_dom_element_set_attribute_node, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_rewind = {(void*)&i_hphp_splfileobject_rewind, (void*)&ifa_hphp_splfileobject_rewind, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksampleimage = {(void*)&i_magicksampleimage, (void*)&ifa_magicksampleimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_characterdata_insert_data = {(void*)&i_dom_characterdata_insert_data, (void*)&ifa_dom_characterdata_insert_data, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_get_iterator = {(void*)&i_hphp_get_iterator, (void*)&ifa_hphp_get_iterator, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkcs7_verify = {(void*)&i_openssl_pkcs7_verify, (void*)&ifa_openssl_pkcs7_verify, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokeopacity = {(void*)&i_drawsetstrokeopacity, (void*)&ifa_drawsetstrokeopacity, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagecolors = {(void*)&i_magickgetimagecolors, (void*)&ifa_magickgetimagecolors, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_full_end_element = {(void*)&i_xmlwriter_full_end_element, (void*)&ifa_xmlwriter_full_end_element, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_clonemagickwand = {(void*)&i_clonemagickwand, (void*)&ifa_clonemagickwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_iconv_strrpos = {(void*)&i_iconv_strrpos, (void*)&ifa_iconv_strrpos, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_print_r = {(void*)&i_print_r, (void*)&ifa_print_r, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgettextantialias = {(void*)&i_drawgettextantialias, (void*)&ifa_drawgettextantialias, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_get_taint = {(void*)&i_fb_get_taint, (void*)&ifa_fb_get_taint, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_set_block = {(void*)&i_socket_set_block, (void*)&ifa_socket_set_block, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_append_child = {(void*)&i_dom_node_append_child, (void*)&ifa_dom_node_append_child, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetblue = {(void*)&i_pixelgetblue, (void*)&ifa_pixelgetblue, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_output_global_state = {(void*)&i_hphp_output_global_state, (void*)&ifa_hphp_output_global_state, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_file = {(void*)&i_is_file, (void*)&ifa_is_file, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_cbc = {(void*)&i_mcrypt_cbc, (void*)&ifa_mcrypt_cbc, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_clonedrawingwand = {(void*)&i_clonedrawingwand, (void*)&ifa_clonedrawingwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsettextundercolor = {(void*)&i_drawsettextundercolor, (void*)&ifa_drawsettextundercolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_field_len = {(void*)&i_mysql_field_len, (void*)&ifa_mysql_field_len, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_newpixelwand = {(void*)&i_newpixelwand, (void*)&ifa_newpixelwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_call_user_func_safe = {(void*)&i_fb_call_user_func_safe, (void*)&ifa_fb_call_user_func_safe, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_stream_socket_client = {(void*)&i_stream_socket_client, (void*)&ifa_stream_socket_client, 6, 0, 0x0000000000000006LL};
extern const CallInfo ci_drawpathlinetohorizontalrelative = {(void*)&i_drawpathlinetohorizontalrelative, (void*)&ifa_drawpathlinetohorizontalrelative, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_directoryiterator___construct = {(void*)&i_hphp_directoryiterator___construct, (void*)&ifa_hphp_directoryiterator___construct, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecharup = {(void*)&i_imagecharup, (void*)&ifa_imagecharup, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_intersect_ukey = {(void*)&i_array_intersect_ukey, (void*)&ifa_array_intersect_ukey, 3, 1, 0x0000000000000000LL};
extern const CallInfo ci_imagefilledpolygon = {(void*)&i_imagefilledpolygon, (void*)&ifa_imagefilledpolygon, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathcurvetoquadraticbeziersmoothrelative = {(void*)&i_drawpathcurvetoquadraticbeziersmoothrelative, (void*)&ifa_drawpathcurvetoquadraticbeziersmoothrelative, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgaussianblurimage = {(void*)&i_magickgaussianblurimage, (void*)&ifa_magickgaussianblurimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_asin = {(void*)&i_asin, (void*)&ifa_asin, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_multi_select = {(void*)&i_curl_multi_select, (void*)&ifa_curl_multi_select, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_info = {(void*)&i_mysql_info, (void*)&ifa_mysql_info, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_exec = {(void*)&i_exec, (void*)&ifa_exec, 3, 0, 0x0000000000000006LL};
extern const CallInfo ci_fgets = {(void*)&i_fgets, (void*)&ifa_fgets, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_schema_validate_xml = {(void*)&i_dom_document_schema_validate_xml, (void*)&ifa_dom_document_schema_validate_xml, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetopacity = {(void*)&i_pixelsetopacity, (void*)&ifa_pixelsetopacity, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_cache_info = {(void*)&i_apc_cache_info, (void*)&ifa_apc_cache_info, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickscaleimage = {(void*)&i_magickscaleimage, (void*)&ifa_magickscaleimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_setacl = {(void*)&i_imap_setacl, (void*)&ifa_imap_setacl, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_times = {(void*)&i_posix_times, (void*)&ifa_posix_times, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_parser_set_option = {(void*)&i_xml_parser_set_option, (void*)&ifa_xml_parser_set_option, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getuid = {(void*)&i_posix_getuid, (void*)&ifa_posix_getuid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_close = {(void*)&i_ldap_close, (void*)&ifa_ldap_close, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_create_object = {(void*)&i_hphp_create_object, (void*)&ifa_hphp_create_object, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_chmod = {(void*)&i_chmod, (void*)&ifa_chmod, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imageloadfont = {(void*)&i_imageloadfont, (void*)&ifa_imageloadfont, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_instruction_counter = {(void*)&i_hphp_instruction_counter, (void*)&ifa_hphp_instruction_counter, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_store = {(void*)&i_apc_store, (void*)&ifa_apc_store, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_list_tables = {(void*)&i_mysql_list_tables, (void*)&ifa_mysql_list_tables, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgethomeurl = {(void*)&i_magickgethomeurl, (void*)&ifa_magickgethomeurl, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_preferred_mime_name = {(void*)&i_mb_preferred_mime_name, (void*)&ifa_mb_preferred_mime_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_setsid = {(void*)&i_posix_setsid, (void*)&ifa_posix_setsid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_similar_text = {(void*)&i_similar_text, (void*)&ifa_similar_text, 3, 0, 0x0000000000000004LL};
extern const CallInfo ci_pixelgetopacity = {(void*)&i_pixelgetopacity, (void*)&ifa_pixelgetopacity, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_zlib_get_coding_type = {(void*)&i_zlib_get_coding_type, (void*)&ifa_zlib_get_coding_type, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_id = {(void*)&i_session_id, (void*)&ifa_session_id, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_time_set = {(void*)&i_date_time_set, (void*)&ifa_date_time_set, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_splice = {(void*)&i_array_splice, (void*)&ifa_array_splice, 4, 0, 0x0000000000000001LL};
extern const CallInfo ci_xmlwriter_end_element = {(void*)&i_xmlwriter_end_element, (void*)&ifa_xmlwriter_end_element, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_x509_read = {(void*)&i_openssl_x509_read, (void*)&ifa_openssl_x509_read, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_comment = {(void*)&i_xmlwriter_write_comment, (void*)&ifa_xmlwriter_write_comment, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_convert_cyr_string = {(void*)&i_convert_cyr_string, (void*)&ifa_convert_cyr_string, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_mail_copy = {(void*)&i_imap_mail_copy, (void*)&ifa_imap_mail_copy, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_isdir = {(void*)&i_hphp_splfileinfo_isdir, (void*)&ifa_hphp_splfileinfo_isdir, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_set_static_property = {(void*)&i_hphp_set_static_property, (void*)&ifa_hphp_set_static_property, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_vfprintf = {(void*)&i_vfprintf, (void*)&ifa_vfprintf, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pack = {(void*)&i_pack, (void*)&ifa_pack, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_strrpos = {(void*)&i_strrpos, (void*)&ifa_strrpos, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_renamed_functions = {(void*)&i_fb_renamed_functions, (void*)&ifa_fb_renamed_functions, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathcurvetosmoothrelative = {(void*)&i_drawpathcurvetosmoothrelative, (void*)&ifa_drawpathcurvetosmoothrelative, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_fetch_overview = {(void*)&i_imap_fetch_overview, (void*)&ifa_imap_fetch_overview, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_php_ini_scanned_files = {(void*)&i_php_ini_scanned_files, (void*)&ifa_php_ini_scanned_files, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_regex_set_options = {(void*)&i_mb_regex_set_options, (void*)&ifa_mb_regex_set_options, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_dn2ufn = {(void*)&i_ldap_dn2ufn, (void*)&ifa_ldap_dn2ufn, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_attribute = {(void*)&i_xmlwriter_start_attribute, (void*)&ifa_xmlwriter_start_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_implode = {(void*)&i_implode, (void*)&ifa_implode, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_list_mime_names = {(void*)&i_mb_list_mime_names, (void*)&ifa_mb_list_mime_names, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgettextdescent = {(void*)&i_magickgettextdescent, (void*)&ifa_magickgettextdescent, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_socket_server = {(void*)&i_stream_socket_server, (void*)&ifa_stream_socket_server, 5, 0, 0x0000000000000006LL};
extern const CallInfo ci_mb_list_encodings_alias_names = {(void*)&i_mb_list_encodings_alias_names, (void*)&ifa_mb_list_encodings_alias_names, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_cosh = {(void*)&i_cosh, (void*)&ifa_cosh, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_eregi_replace = {(void*)&i_mb_eregi_replace, (void*)&ifa_mb_eregi_replace, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagegammacorrect = {(void*)&i_imagegammacorrect, (void*)&ifa_imagegammacorrect, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageresolution = {(void*)&i_magicksetimageresolution, (void*)&ifa_magicksetimageresolution, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageblueprimary = {(void*)&i_magicksetimageblueprimary, (void*)&ifa_magicksetimageblueprimary, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokeantialias = {(void*)&i_drawgetstrokeantialias, (void*)&ifa_drawgetstrokeantialias, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_module_name = {(void*)&i_session_module_name, (void*)&ifa_session_module_name, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_checkdnsrr = {(void*)&i_checkdnsrr, (void*)&ifa_checkdnsrr, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_filehits = {(void*)&i_apc_filehits, (void*)&ifa_apc_filehits, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_bcpowmod = {(void*)&i_bcpowmod, (void*)&ifa_bcpowmod, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_get_stats = {(void*)&i_memcache_get_stats, (void*)&ifa_memcache_get_stats, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_strstr = {(void*)&i_strstr, (void*)&ifa_strstr, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_rsort = {(void*)&i_rsort, (void*)&ifa_rsort, 3, 0, 0x0000000000000001LL};
extern const CallInfo ci___halt_compiler = {(void*)&i___halt_compiler, (void*)&ifa___halt_compiler, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_uasort = {(void*)&i_uasort, (void*)&ifa_uasort, 2, 0, 0x0000000000000001LL};
extern const CallInfo ci_preg_split = {(void*)&i_preg_split, (void*)&ifa_preg_split, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagetruecolortopalette = {(void*)&i_imagetruecolortopalette, (void*)&ifa_imagetruecolortopalette, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_mod_replace = {(void*)&i_ldap_mod_replace, (void*)&ifa_ldap_mod_replace, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetcolor = {(void*)&i_pixelsetcolor, (void*)&ifa_pixelsetcolor, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_fetch = {(void*)&i_apc_fetch, (void*)&ifa_apc_fetch, 3, 0, 0x0000000000000002LL};
extern const CallInfo ci_magickstereoimage = {(void*)&i_magickstereoimage, (void*)&ifa_magickstereoimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_validate = {(void*)&i_dom_document_validate, (void*)&ifa_dom_document_validate, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_register_postsend_function = {(void*)&i_register_postsend_function, (void*)&ifa_register_postsend_function, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_hphp_crash_log = {(void*)&i_hphp_crash_log, (void*)&ifa_hphp_crash_log, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_getinfo = {(void*)&i_curl_getinfo, (void*)&ifa_curl_getinfo, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_is_default_namespace = {(void*)&i_dom_node_is_default_namespace, (void*)&ifa_dom_node_is_default_namespace, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_write_close = {(void*)&i_session_write_close, (void*)&ifa_session_write_close, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_tablename = {(void*)&i_mysql_tablename, (void*)&ifa_mysql_tablename, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathcurvetoquadraticbezierabsolute = {(void*)&i_drawpathcurvetoquadraticbezierabsolute, (void*)&ifa_drawpathcurvetoquadraticbezierabsolute, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_newpixelwands = {(void*)&i_newpixelwands, (void*)&ifa_newpixelwands, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_fill = {(void*)&i_array_fill, (void*)&ifa_array_fill, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pfsockopen = {(void*)&i_pfsockopen, (void*)&ifa_pfsockopen, 5, 0, 0x000000000000000CLL};
extern const CallInfo ci_imap_utf7_encode = {(void*)&i_imap_utf7_encode, (void*)&ifa_imap_utf7_encode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_enable_html_taint_trace = {(void*)&i_fb_enable_html_taint_trace, (void*)&ifa_fb_enable_html_taint_trace, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_is_supported = {(void*)&i_dom_node_is_supported, (void*)&ifa_dom_node_is_supported, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagecolormapcolor = {(void*)&i_magicksetimagecolormapcolor, (void*)&ifa_magicksetimagecolormapcolor, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_next = {(void*)&i_hphp_splfileobject_next, (void*)&ifa_hphp_splfileobject_next, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_replace = {(void*)&i_array_replace, (void*)&ifa_array_replace, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_constant = {(void*)&i_constant, (void*)&ifa_constant, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_in_array = {(void*)&i_in_array, (void*)&ifa_in_array, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_readgzfile = {(void*)&i_readgzfile, (void*)&ifa_readgzfile, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_long = {(void*)&i_is_long, (void*)&ifa_is_long, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_getatime = {(void*)&i_hphp_splfileinfo_getatime, (void*)&ifa_hphp_splfileinfo_getatime, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_renamemailbox = {(void*)&i_imap_renamemailbox, (void*)&ifa_imap_renamemailbox, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_get_attribute = {(void*)&i_collator_get_attribute, (void*)&ifa_collator_get_attribute, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_directoryiterator_current = {(void*)&i_hphp_directoryiterator_current, (void*)&ifa_hphp_directoryiterator_current, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetpackagename = {(void*)&i_magickgetpackagename, (void*)&ifa_magickgetpackagename, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_mod_add = {(void*)&i_ldap_mod_add, (void*)&ifa_ldap_mod_add, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecopyresized = {(void*)&i_imagecopyresized, (void*)&ifa_imagecopyresized, 10, 0, 0x0000000000000000LL};
extern const CallInfo ci_connection_aborted = {(void*)&i_connection_aborted, (void*)&ifa_connection_aborted, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_get_contents = {(void*)&i_stream_get_contents, (void*)&ifa_stream_get_contents, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_nzcompress = {(void*)&i_nzcompress, (void*)&ifa_nzcompress, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagecompression = {(void*)&i_magicksetimagecompression, (void*)&ifa_magicksetimagecompression, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksharpenimage = {(void*)&i_magicksharpenimage, (void*)&ifa_magicksharpenimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_nodelist_item = {(void*)&i_dom_nodelist_item, (void*)&ifa_dom_nodelist_item, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecolorallocate = {(void*)&i_imagecolorallocate, (void*)&ifa_imagecolorallocate, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_filesize = {(void*)&i_filesize, (void*)&ifa_filesize, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_enc_self_test = {(void*)&i_mcrypt_enc_self_test, (void*)&ifa_mcrypt_enc_self_test, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_load_constants = {(void*)&i_apc_load_constants, (void*)&ifa_apc_load_constants, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_socket_get_option = {(void*)&i_socket_get_option, (void*)&ifa_socket_get_option, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawroundrectangle = {(void*)&i_drawroundrectangle, (void*)&ifa_drawroundrectangle, 7, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_element_has_attribute_ns = {(void*)&i_dom_element_has_attribute_ns, (void*)&ifa_dom_element_has_attribute_ns, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_relaxng_validate_file = {(void*)&i_dom_document_relaxng_validate_file, (void*)&ifa_dom_document_relaxng_validate_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimage = {(void*)&i_magicksetimage, (void*)&ifa_magicksetimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_proc_terminate = {(void*)&i_proc_terminate, (void*)&ifa_proc_terminate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetexception = {(void*)&i_pixelgetexception, (void*)&ifa_pixelgetexception, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_call_user_func_array_rpc = {(void*)&i_call_user_func_array_rpc, (void*)&ifa_call_user_func_array_rpc, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_replace_child = {(void*)&i_dom_node_replace_child, (void*)&ifa_dom_node_replace_child, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_convert_uuencode = {(void*)&i_convert_uuencode, (void*)&ifa_convert_uuencode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickconstituteimage = {(void*)&i_magickconstituteimage, (void*)&ifa_magickconstituteimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_xdigit = {(void*)&i_ctype_xdigit, (void*)&ifa_ctype_xdigit, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_base64_encode = {(void*)&i_base64_encode, (void*)&ifa_base64_encode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzputs = {(void*)&i_gzputs, (void*)&ifa_gzputs, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagewhitepoint = {(void*)&i_magickgetimagewhitepoint, (void*)&ifa_magickgetimagewhitepoint, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawmatte = {(void*)&i_drawmatte, (void*)&ifa_drawmatte, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_log = {(void*)&i_log, (void*)&ifa_log, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_final = {(void*)&i_hash_final, (void*)&ifa_hash_final, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelgetexceptionstring = {(void*)&i_pixelgetexceptionstring, (void*)&ifa_pixelgetexceptionstring, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_tanh = {(void*)&i_tanh, (void*)&ifa_tanh, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_intercept = {(void*)&i_fb_intercept, (void*)&ifa_fb_intercept, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_readable = {(void*)&i_is_readable, (void*)&ifa_is_readable, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_lstat = {(void*)&i_lstat, (void*)&ifa_lstat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickraiseimage = {(void*)&i_magickraiseimage, (void*)&ifa_magickraiseimage, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_user_error = {(void*)&i_user_error, (void*)&ifa_user_error, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_getprotobynumber = {(void*)&i_getprotobynumber, (void*)&ifa_getprotobynumber, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fileinode = {(void*)&i_fileinode, (void*)&ifa_fileinode, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_stat = {(void*)&i_mysql_stat, (void*)&ifa_mysql_stat, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_pixelsetalpha = {(void*)&i_pixelsetalpha, (void*)&ifa_pixelsetalpha, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gzencode = {(void*)&i_gzencode, (void*)&ifa_gzencode, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mcrypt_module_self_test = {(void*)&i_mcrypt_module_self_test, (void*)&ifa_mcrypt_module_self_test, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_seal = {(void*)&i_openssl_seal, (void*)&ifa_openssl_seal, 4, 0, 0x0000000000000006LL};
extern const CallInfo ci_ismagickwand = {(void*)&i_ismagickwand, (void*)&ifa_ismagickwand, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawpathmovetoabsolute = {(void*)&i_drawpathmovetoabsolute, (void*)&ifa_drawpathmovetoabsolute, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_set_write_buffer = {(void*)&i_stream_set_write_buffer, (void*)&ifa_stream_set_write_buffer, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_timezone_set = {(void*)&i_date_timezone_set, (void*)&ifa_date_timezone_set, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_x509_parse = {(void*)&i_openssl_x509_parse, (void*)&ifa_openssl_x509_parse, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_errors = {(void*)&i_imap_errors, (void*)&ifa_imap_errors, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickevaluateimage = {(void*)&i_magickevaluateimage, (void*)&ifa_magickevaluateimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_search_getpos = {(void*)&i_mb_ereg_search_getpos, (void*)&ifa_mb_ereg_search_getpos, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagedelay = {(void*)&i_magickgetimagedelay, (void*)&ifa_magickgetimagedelay, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_shuffle = {(void*)&i_shuffle, (void*)&ifa_shuffle, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_imap_last_error = {(void*)&i_imap_last_error, (void*)&ifa_imap_last_error, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickreadimageblob = {(void*)&i_magickreadimageblob, (void*)&ifa_magickreadimageblob, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickpreviousimage = {(void*)&i_magickpreviousimage, (void*)&ifa_magickpreviousimage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_number_format = {(void*)&i_number_format, (void*)&ifa_number_format, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickechoimagesblob = {(void*)&i_magickechoimagesblob, (void*)&ifa_magickechoimagesblob, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcompositeimage = {(void*)&i_magickcompositeimage, (void*)&ifa_magickcompositeimage, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_hash_algos = {(void*)&i_hash_algos, (void*)&ifa_hash_algos, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_curl_multi_exec = {(void*)&i_curl_multi_exec, (void*)&ifa_curl_multi_exec, 2, 0, 0x0000000000000002LL};
extern const CallInfo ci_strpbrk = {(void*)&i_strpbrk, (void*)&ifa_strpbrk, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_alpha = {(void*)&i_ctype_alpha, (void*)&ifa_ctype_alpha, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickwriteimagesfile = {(void*)&i_magickwriteimagesfile, (void*)&ifa_magickwriteimagesfile, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickclippathimage = {(void*)&i_magickclippathimage, (void*)&ifa_magickclippathimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_http_input = {(void*)&i_mb_http_input, (void*)&ifa_mb_http_input, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_posix_getpwnam = {(void*)&i_posix_getpwnam, (void*)&ifa_posix_getpwnam, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreate = {(void*)&i_imagecreate, (void*)&ifa_imagecreate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagegamma = {(void*)&i_magicksetimagegamma, (void*)&ifa_magicksetimagegamma, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_result = {(void*)&i_mysql_result, (void*)&ifa_mysql_result, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetimagevirtualpixelmethod = {(void*)&i_magickgetimagevirtualpixelmethod, (void*)&ifa_magickgetimagevirtualpixelmethod, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_throw_fatal_error = {(void*)&i_hphp_throw_fatal_error, (void*)&ifa_hphp_throw_fatal_error, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_iconv_substr = {(void*)&i_iconv_substr, (void*)&ifa_iconv_substr, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_fetchstructure = {(void*)&i_imap_fetchstructure, (void*)&ifa_imap_fetchstructure, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_get_transports = {(void*)&i_stream_get_transports, (void*)&ifa_stream_get_transports, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetcliprule = {(void*)&i_drawgetcliprule, (void*)&ifa_drawgetcliprule, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_rename_function = {(void*)&i_fb_rename_function, (void*)&ifa_fb_rename_function, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_unset = {(void*)&i_session_unset, (void*)&ifa_session_unset, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_set_attribute = {(void*)&i_collator_set_attribute, (void*)&ifa_collator_set_attribute, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_mailparse_uudecode_all = {(void*)&i_mailparse_uudecode_all, (void*)&ifa_mailparse_uudecode_all, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_get_cipher_methods = {(void*)&i_openssl_get_cipher_methods, (void*)&ifa_openssl_get_cipher_methods, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_log10 = {(void*)&i_log10, (void*)&ifa_log10, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_set_exit_callback = {(void*)&i_fb_set_exit_callback, (void*)&ifa_fb_set_exit_callback, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_debug = {(void*)&i_memcache_debug, (void*)&ifa_memcache_debug, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_bcsub = {(void*)&i_bcsub, (void*)&ifa_bcsub, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_node_insert_before = {(void*)&i_dom_node_insert_before, (void*)&ifa_dom_node_insert_before, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_str_repeat = {(void*)&i_str_repeat, (void*)&ifa_str_repeat, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_dec = {(void*)&i_apc_dec, (void*)&ifa_apc_dec, 4, 0, 0x0000000000000004LL};
extern const CallInfo ci_spl_autoload_register = {(void*)&i_spl_autoload_register, (void*)&ifa_spl_autoload_register, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_pagelet_server_is_enabled = {(void*)&i_pagelet_server_is_enabled, (void*)&ifa_pagelet_server_is_enabled, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_write_dtd = {(void*)&i_xmlwriter_write_dtd, (void*)&ifa_xmlwriter_write_dtd, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_addslashes = {(void*)&i_addslashes, (void*)&ifa_addslashes, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_delete = {(void*)&i_apc_delete, (void*)&ifa_apc_delete, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkey_get_details = {(void*)&i_openssl_pkey_get_details, (void*)&ifa_openssl_pkey_get_details, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_search_setpos = {(void*)&i_mb_ereg_search_setpos, (void*)&ifa_mb_ereg_search_setpos, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_lchgrp = {(void*)&i_lchgrp, (void*)&ifa_lchgrp, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_default_handler = {(void*)&i_xml_set_default_handler, (void*)&ifa_xml_set_default_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_utf8_strlen_deprecated = {(void*)&i_fb_utf8_strlen_deprecated, (void*)&ifa_fb_utf8_strlen_deprecated, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_savexml = {(void*)&i_dom_document_savexml, (void*)&ifa_dom_document_savexml, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileobject_fflush = {(void*)&i_hphp_splfileobject_fflush, (void*)&ifa_hphp_splfileobject_fflush, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetstrokedashoffset = {(void*)&i_drawgetstrokedashoffset, (void*)&ifa_drawgetstrokedashoffset, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickconvolveimage = {(void*)&i_magickconvolveimage, (void*)&ifa_magickconvolveimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_relaxng_validate_xml = {(void*)&i_dom_document_relaxng_validate_xml, (void*)&ifa_dom_document_relaxng_validate_xml, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_localtime = {(void*)&i_localtime, (void*)&ifa_localtime, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_str_split = {(void*)&i_str_split, (void*)&ifa_str_split, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_bcadd = {(void*)&i_bcadd, (void*)&ifa_bcadd, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_slice = {(void*)&i_array_slice, (void*)&ifa_array_slice, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_stream_encoding = {(void*)&i_stream_encoding, (void*)&ifa_stream_encoding, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_gmdate = {(void*)&i_gmdate, (void*)&ifa_gmdate, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_sha1_file = {(void*)&i_sha1_file, (void*)&ifa_sha1_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_class_exists = {(void*)&i_class_exists, (void*)&ifa_class_exists, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimagegreenprimary = {(void*)&i_magicksetimagegreenprimary, (void*)&ifa_magicksetimagegreenprimary, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_collator_create = {(void*)&i_collator_create, (void*)&ifa_collator_create, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickwhitethresholdimage = {(void*)&i_magickwhitethresholdimage, (void*)&ifa_magickwhitethresholdimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagerectangle = {(void*)&i_imagerectangle, (void*)&ifa_imagerectangle, 6, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetversionnumber = {(void*)&i_magickgetversionnumber, (void*)&ifa_magickgetversionnumber, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_apc_delete_file = {(void*)&i_apc_delete_file, (void*)&ifa_apc_delete_file, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefromgif = {(void*)&i_imagecreatefromgif, (void*)&ifa_imagecreatefromgif, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_uniqid = {(void*)&i_uniqid, (void*)&ifa_uniqid, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_start_dtd_entity = {(void*)&i_xmlwriter_start_dtd_entity, (void*)&ifa_xmlwriter_start_dtd_entity, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_openfile = {(void*)&i_hphp_splfileinfo_openfile, (void*)&ifa_hphp_splfileinfo_openfile, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_apd_set_browser_trace = {(void*)&i_apd_set_browser_trace, (void*)&ifa_apd_set_browser_trace, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_strspn = {(void*)&i_strspn, (void*)&ifa_strspn, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_decrement = {(void*)&i_memcache_decrement, (void*)&ifa_memcache_decrement, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_getmyuid = {(void*)&i_getmyuid, (void*)&ifa_getmyuid, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_mysql_escape_string = {(void*)&i_mysql_escape_string, (void*)&ifa_mysql_escape_string, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_connection_status = {(void*)&i_connection_status, (void*)&ifa_connection_status, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_headerinfo = {(void*)&i_imap_headerinfo, (void*)&ifa_imap_headerinfo, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_fb_get_code_coverage = {(void*)&i_fb_get_code_coverage, (void*)&ifa_fb_get_code_coverage, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_document_create_document_fragment = {(void*)&i_dom_document_create_document_fragment, (void*)&ifa_dom_document_create_document_fragment, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickembossimage = {(void*)&i_magickembossimage, (void*)&ifa_magickembossimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_count_entries = {(void*)&i_ldap_count_entries, (void*)&ifa_ldap_count_entries, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetimageoption = {(void*)&i_magicksetimageoption, (void*)&ifa_magicksetimageoption, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_get_class = {(void*)&i_get_class, (void*)&ifa_get_class, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_putenv = {(void*)&i_putenv, (void*)&ifa_putenv, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickgetcharwidth = {(void*)&i_magickgetcharwidth, (void*)&ifa_magickgetcharwidth, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_resource = {(void*)&i_is_resource, (void*)&ifa_is_resource, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_mb_ereg_replace = {(void*)&i_mb_ereg_replace, (void*)&ifa_mb_ereg_replace, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_apd_stop_trace = {(void*)&i_apd_stop_trace, (void*)&ifa_apd_stop_trace, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_i18n_loc_set_default = {(void*)&i_i18n_loc_set_default, (void*)&ifa_i18n_loc_set_default, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_magicksetformat = {(void*)&i_magicksetformat, (void*)&ifa_magicksetformat, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_set_quota = {(void*)&i_imap_set_quota, (void*)&ifa_imap_set_quota, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_shift = {(void*)&i_array_shift, (void*)&ifa_array_shift, 1, 0, 0x0000000000000001LL};
extern const CallInfo ci_apache_get_config = {(void*)&i_apache_get_config, (void*)&ifa_apache_get_config, 0, 0, 0x0000000000000000LL};
extern const CallInfo ci_iptcembed = {(void*)&i_iptcembed, (void*)&ifa_iptcembed, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imageftbbox = {(void*)&i_imageftbbox, (void*)&ifa_imageftbbox, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_proc_close = {(void*)&i_proc_close, (void*)&ifa_proc_close, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_text_is_whitespace_in_element_content = {(void*)&i_dom_text_is_whitespace_in_element_content, (void*)&ifa_dom_text_is_whitespace_in_element_content, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imagecreatefrompng = {(void*)&i_imagecreatefrompng, (void*)&ifa_imagecreatefrompng, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawgetfontstyle = {(void*)&i_drawgetfontstyle, (void*)&ifa_drawgetfontstyle, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_status = {(void*)&i_imap_status, (void*)&ifa_imap_status, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_memcache_pconnect = {(void*)&i_memcache_pconnect, (void*)&ifa_memcache_pconnect, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_strcspn = {(void*)&i_strcspn, (void*)&ifa_strcspn, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_recursiveiteratoriterator_valid = {(void*)&i_hphp_recursiveiteratoriterator_valid, (void*)&ifa_hphp_recursiveiteratoriterator_valid, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_timezone_get = {(void*)&i_date_timezone_get, (void*)&ifa_date_timezone_get, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_filemtime = {(void*)&i_filemtime, (void*)&ifa_filemtime, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ceil = {(void*)&i_ceil, (void*)&ifa_ceil, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_set_external_entity_ref_handler = {(void*)&i_xml_set_external_entity_ref_handler, (void*)&ifa_xml_set_external_entity_ref_handler, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_date_offset_get = {(void*)&i_date_offset_get, (void*)&ifa_date_offset_get, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_openssl_pkey_free = {(void*)&i_openssl_pkey_free, (void*)&ifa_openssl_pkey_free, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_attr_is_id = {(void*)&i_dom_attr_is_id, (void*)&ifa_dom_attr_is_id, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_dom_namednodemap_item = {(void*)&i_dom_namednodemap_item, (void*)&ifa_dom_namednodemap_item, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xmlwriter_end_cdata = {(void*)&i_xmlwriter_end_cdata, (void*)&ifa_xmlwriter_end_cdata, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_directoryiterator_seek = {(void*)&i_hphp_directoryiterator_seek, (void*)&ifa_hphp_directoryiterator_seek, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_bodystruct = {(void*)&i_imap_bodystruct, (void*)&ifa_imap_bodystruct, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_stristr = {(void*)&i_stristr, (void*)&ifa_stristr, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_a = {(void*)&i_is_a, (void*)&ifa_is_a, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_get_current_column_number = {(void*)&i_xml_get_current_column_number, (void*)&ifa_xml_get_current_column_number, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_rad2deg = {(void*)&i_rad2deg, (void*)&ifa_rad2deg, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_xhprof_run_trace = {(void*)&i_xhprof_run_trace, (void*)&ifa_xhprof_run_trace, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_printf = {(void*)&i_printf, (void*)&ifa_printf, 1, 1, 0x0000000000000000LL};
extern const CallInfo ci_imagefontwidth = {(void*)&i_imagefontwidth, (void*)&ifa_imagefontwidth, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_atan2 = {(void*)&i_atan2, (void*)&ifa_atan2, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawrender = {(void*)&i_drawrender, (void*)&ifa_drawrender, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_bool = {(void*)&i_is_bool, (void*)&ifa_is_bool, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_class_implements = {(void*)&i_class_implements, (void*)&ifa_class_implements, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_explode_dn = {(void*)&i_ldap_explode_dn, (void*)&ifa_ldap_explode_dn, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_ldap_free_result = {(void*)&i_ldap_free_result, (void*)&ifa_ldap_free_result, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hphp_splfileinfo_islink = {(void*)&i_hphp_splfileinfo_islink, (void*)&ifa_hphp_splfileinfo_islink, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_hex2bin = {(void*)&i_hex2bin, (void*)&ifa_hex2bin, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_array_reduce = {(void*)&i_array_reduce, (void*)&ifa_array_reduce, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_imap_open = {(void*)&i_imap_open, (void*)&ifa_imap_open, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickrotateimage = {(void*)&i_magickrotateimage, (void*)&ifa_magickrotateimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickcharcoalimage = {(void*)&i_magickcharcoalimage, (void*)&ifa_magickcharcoalimage, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickimplodeimage = {(void*)&i_magickimplodeimage, (void*)&ifa_magickimplodeimage, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_is_null = {(void*)&i_is_null, (void*)&ifa_is_null, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_strtok = {(void*)&i_strtok, (void*)&ifa_strtok, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_xml_parse = {(void*)&i_xml_parse, (void*)&ifa_xml_parse, 3, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawcircle = {(void*)&i_drawcircle, (void*)&ifa_drawcircle, 5, 0, 0x0000000000000000LL};
extern const CallInfo ci_magickshearimage = {(void*)&i_magickshearimage, (void*)&ifa_magickshearimage, 4, 0, 0x0000000000000000LL};
extern const CallInfo ci_htmlspecialchars_decode = {(void*)&i_htmlspecialchars_decode, (void*)&ifa_htmlspecialchars_decode, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_fflush = {(void*)&i_fflush, (void*)&ifa_fflush, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_ctype_print = {(void*)&i_ctype_print, (void*)&ifa_ctype_print, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_drawsetstrokedashoffset = {(void*)&i_drawsetstrokedashoffset, (void*)&ifa_drawsetstrokedashoffset, 2, 0, 0x0000000000000000LL};
extern const CallInfo ci_session_save_path = {(void*)&i_session_save_path, (void*)&ifa_session_save_path, 1, 0, 0x0000000000000000LL};
extern const CallInfo ci_rtrim = {(void*)&i_rtrim, (void*)&ifa_rtrim, 2, 0, 0x0000000000000000LL};

struct hashNodeFunc {
  int64 hash;
  bool offset;
  bool end;
  const char *name;
  const void *data;
};
static const hashNodeFunc funcBuckets[] = {
 {0x4F7230DC25F0E001LL,0,1,"magicknormalizeimage",&ci_magicknormalizeimage},
 {0x76C320EDB9B6E002LL,0,1,"xmlwriter_flush",&ci_xmlwriter_flush},
 {0x7E0EC3E131BCA003LL,0,1,"token_name",&ci_token_name},
 {0x4FDCCE1C7754600BLL,0,1,"ob_iconv_handler",&ci_ob_iconv_handler},
 {0x4C915E3480E94018LL,0,1,"mb_substr_count",&ci_mb_substr_count},
 {0x601C5152277AE028LL,0,1,"readfile",&ci_readfile},
 {0x464EB9B1F955202CLL,0,1,"apc_add",&ci_apc_add},
 {0x3BE730D90618202DLL,0,1,"collator_sort_with_sort_keys",&ci_collator_sort_with_sort_keys},
 {0x32F23F206C394036LL,0,1,"curl_setopt_array",&ci_curl_setopt_array},
 {0x418D937957ECE037LL,0,1,"tanh",&ci_tanh},
 {0x497E31C70409603ELL,0,1,"timezone_name_from_abbr",&ci_timezone_name_from_abbr},
 {0x24206A195B9C203FLL,0,1,"ucfirst",&ci_ucfirst},
 {0x65B39B11F5D7C041LL,0,1,"array_unique",&ci_array_unique},
 {0x0547079C94282042LL,0,1,"imap_utf7_decode",&ci_imap_utf7_decode},
 {0x378A73FF98B60044LL,0,1,"curl_init",&ci_curl_init},
 {0x4282E0231F600049LL,0,1,"fseek",&ci_fseek},
 {0x17CD0E68E778C04BLL,0,0,"drawsetstrokelinejoin",&ci_drawsetstrokelinejoin},
 {0x6370CF455EA8604BLL,0,1,"socket_create",&ci_socket_create},
 {0x03047FD5FC67204CLL,0,0,"exif_read_data",&ci_exif_read_data},
 {0x7848970191D5A04CLL,0,1,"mysql_connect_with_db",&ci_mysql_connect_with_db},
 {0x12B22A2E6B344057LL,0,1,"ldap_sort",&ci_ldap_sort},
 {0x2B7532A070BF605CLL,0,1,"openssl_get_privatekey",&ci_openssl_get_privatekey},
 {0x745910AD5C922062LL,0,1,"magickgetmimetype",&ci_magickgetmimetype},
 {0x5CC8BA5ADFAC0064LL,0,1,"imagegrabscreen",&ci_imagegrabscreen},
 {0x777FE52584FAE065LL,0,1,"apc_bin_dump",&ci_apc_bin_dump},
 {0x4512BD5EA7076067LL,0,1,"openssl_csr_export_to_file",&ci_openssl_csr_export_to_file},
 {0x0CFFD02753B98076LL,0,1,"bzread",&ci_bzread},
 {0x01AE1DE8FA116078LL,0,1,"call_user_func_array_async",&ci_call_user_func_array_async},
 {0x5F9DDC342A83807ALL,0,1,"date_default_timezone_get",&ci_date_default_timezone_get},
 {0x3DB1BEBE7E3E6082LL,0,1,"hphp_pack_continuation",&ci_hphp_pack_continuation},
 {0x1A90213EE1A56083LL,0,1,"array_pop",&ci_array_pop},
 {0x4AD554CBAB9CC089LL,0,1,"call_user_method_array",&ci_call_user_method_array},
 {0x4F1D1ED7B087208CLL,0,0,"exec",&ci_exec},
 {0x3A0B58797E8FE08CLL,0,1,"xml_set_external_entity_ref_handler",&ci_xml_set_external_entity_ref_handler},
 {0x200864F8F053C08DLL,0,1,"magickgetversionstring",&ci_magickgetversionstring},
 {0x3E5CF6378A49C091LL,0,0,"ldap_get_attributes",&ci_ldap_get_attributes},
 {0x1C32BB63986C8091LL,0,1,"socket_strerror",&ci_socket_strerror},
 {0x3B5E32078E37A093LL,0,1,"imagedestroy",&ci_imagedestroy},
 {0x10DF7941C3F3E0A2LL,0,1,"socket_bind",&ci_socket_bind},
 {0x54242D2846BC60A3LL,0,1,"magickunsharpmaskimage",&ci_magickunsharpmaskimage},
 {0x6E8C61326DCE40A8LL,0,1,"var_export",&ci_var_export},
 {0x5B1D9F56698A40ABLL,0,1,"html_entity_decode",&ci_html_entity_decode},
 {0x4C9252FB9C3300ADLL,0,1,"pixelsetalphaquantum",&ci_pixelsetalphaquantum},
 {0x55147751031C40AELL,0,1,"nzcompress",&ci_nzcompress},
 {0x191B5F1B190BC0B1LL,0,1,"dom_xpath_register_ns",&ci_dom_xpath_register_ns},
 {0x5C659372B2CD80B9LL,0,1,"imagecolorstotal",&ci_imagecolorstotal},
 {0x331E7DFBE6E240BBLL,0,1,"libxml_get_errors",&ci_libxml_get_errors},
 {0x7424946F7ED520C5LL,0,1,"magickgetimagefilename",&ci_magickgetimagefilename},
 {0x677F33E78342A0C7LL,0,1,"function_exists",&ci_function_exists},
 {0x30AB38D851C440C8LL,0,1,"magickgetimagebackgroundcolor",&ci_magickgetimagebackgroundcolor},
 {0x4C67DEE74080E0CALL,0,0,"magicksetimagecompose",&ci_magicksetimagecompose},
 {0x2EE0967F6EB5A0CALL,0,1,"date_format",&ci_date_format},
 {0x64E390E5F2FDC0CELL,0,1,"ismagickwand",&ci_ismagickwand},
 {0x3E4DAD592CD0A0D2LL,0,0,"magickdescribeimage",&ci_magickdescribeimage},
 {0x7D1FAF3322A360D2LL,0,0,"hphp_splfileobject___construct",&ci_hphp_splfileobject___construct},
 {0x5365BD7509BE60D2LL,0,1,"ldap_dn2ufn",&ci_ldap_dn2ufn},
 {0x5F780851DB5240DDLL,0,1,"hphp_current_ref",&ci_hphp_current_ref},
 {0x476F4B6CC987E0E8LL,0,1,"magickframeimage",&ci_magickframeimage},
 {0x53BA3992F8C240EALL,0,1,"imagegrabwindow",&ci_imagegrabwindow},
 {0x480797DB7165A0F9LL,0,1,"xmlwriter_set_indent",&ci_xmlwriter_set_indent},
 {0x71E3372AA1AD0105LL,0,1,"is_infinite",&ci_is_infinite},
 {0x7DE1BEE0C35D010BLL,0,1,"pcntl_signal",&ci_pcntl_signal},
 {0x16B481D0DEA32110LL,0,1,"call_user_func_async",&ci_call_user_func_async},
 {0x3A9A5D4FEE79A111LL,0,1,"getmxrr",&ci_getmxrr},
 {0x658444BB4E29E11ELL,0,1,"openssl_free_key",&ci_openssl_free_key},
 {0x3669138315204123LL,0,1,"mcrypt_module_get_algo_key_size",&ci_mcrypt_module_get_algo_key_size},
 {0x7D4D28D561392124LL,0,1,"drawsettextalignment",&ci_drawsettextalignment},
 {0x7579DBE83CE5812DLL,0,1,"imagerectangle",&ci_imagerectangle},
 {0x1F61AFCDC510413BLL,0,1,"imagefilter",&ci_imagefilter},
 {0x43EA586FBFC6A141LL,0,0,"spl_autoload_unregister",&ci_spl_autoload_unregister},
 {0x6B03203C8A01C141LL,0,1,"imap_timeout",&ci_imap_timeout},
 {0x296C739F28D6C143LL,0,1,"drawsetfontsize",&ci_drawsetfontsize},
 {0x3044E9F91628E151LL,0,1,"mb_strlen",&ci_mb_strlen},
 {0x5D170BCBBBA02152LL,0,1,"system",&ci_system},
 {0x4F43FE32079C0155LL,0,0,"magickgetimagesblob",&ci_magickgetimagesblob},
 {0x2623917110168155LL,0,1,"fclose",&ci_fclose},
 {0x3711AF36391EA15BLL,0,1,"mysql_list_tables",&ci_mysql_list_tables},
 {0x6CD7466174B9A15CLL,0,1,"pixelsetredquantum",&ci_pixelsetredquantum},
 {0x517941D034E3015DLL,0,1,"iterator_to_array",&ci_iterator_to_array},
 {0x309E780586D6C161LL,0,1,"socket_set_nonblock",&ci_socket_set_nonblock},
 {0x4983571BFEAE6169LL,0,0,"magickaffinetransformimage",&ci_magickaffinetransformimage},
 {0x1612E331D1726169LL,0,1,"drawsetstrokecolor",&ci_drawsetstrokecolor},
 {0x0125F8B9428E416ELL,0,1,"hphp_create_object",&ci_hphp_create_object},
 {0x59594143EFC7617BLL,0,1,"mcrypt_module_open",&ci_mcrypt_module_open},
 {0x1CBD3B58296C8181LL,0,1,"xmlwriter_write_dtd",&ci_xmlwriter_write_dtd},
 {0x7BB7C27B2C118182LL,0,1,"get_magic_quotes_gpc",&ci_get_magic_quotes_gpc},
 {0x54DB5DC6A069A185LL,0,1,"hphp_get_class_info",&ci_hphp_get_class_info},
 {0x1BC448670BA4E187LL,0,1,"iconv_strpos",&ci_iconv_strpos},
 {0x69340E00991FC191LL,0,1,"fb_htmlspecialchars",&ci_fb_htmlspecialchars},
 {0x07B5BF934F6EA192LL,0,1,"imagesettile",&ci_imagesettile},
 {0x0CE71BC3B75D8199LL,0,1,"mb_strimwidth",&ci_mb_strimwidth},
 {0x74F20C284227219BLL,0,1,"similar_text",&ci_similar_text},
 {0x6DFC0765EBAB81A2LL,0,0,"mcrypt_decrypt",&ci_mcrypt_decrypt},
 {0x615723D21421A1A2LL,0,1,"sem_remove",&ci_sem_remove},
 {0x0DDFE3B1F6EEE1A9LL,0,1,"array_reduce",&ci_array_reduce},
 {0x4B96F870584541B2LL,0,1,"hphp_splfileobject_setflags",&ci_hphp_splfileobject_setflags},
 {0x6F6C85F4855DE1B4LL,0,1,"imap_check",&ci_imap_check},
 {0x33BD672B4AC301B6LL,0,1,"mt_rand",&ci_mt_rand},
 {0x589F7316EDC581BDLL,0,1,"fb_serialize",&ci_fb_serialize},
 {0x0E88ACEB15A581BFLL,0,1,"magickgetimageextrema",&ci_magickgetimageextrema},
 {0x5AE12CB1FFDC21C7LL,0,1,"drawellipse",&ci_drawellipse},
 {0x75CA86838D24A1CALL,0,1,"hash_algos",&ci_hash_algos},
 {0x78831282736801D6LL,0,1,"stream_context_get_default",&ci_stream_context_get_default},
 {0x60E9E392663921D8LL,0,1,"readlink",&ci_readlink},
 {0x7FF16269AB7181DBLL,0,1,"fb_curl_multi_fdset",&ci_fb_curl_multi_fdset},
 {0x5B3A4A72846B21DCLL,0,1,"current",&ci_current},
 {0x04666D6F67C7A1DDLL,0,1,"mysql_list_processes",&ci_mysql_list_processes},
 {0x67D4BA8513BF41E2LL,0,1,"newpixelwand",&ci_newpixelwand},
 {0x406BDC51A3FD81E3LL,0,0,"pcntl_waitpid",&ci_pcntl_waitpid},
 {0x131D11F79A8801E3LL,0,1,"mb_http_output",&ci_mb_http_output},
 {0x1B09A9A533FFA1EDLL,0,0,"drawgetexceptiontype",&ci_drawgetexceptiontype},
 {0x19932EEC5CAE01EDLL,0,1,"hphp_splfileinfo_getfileinfo",&ci_hphp_splfileinfo_getfileinfo},
 {0x28679425BF9741F1LL,0,0,"fb_lazy_lstat",&ci_fb_lazy_lstat},
 {0x02BCE5B0FBED61F1LL,0,1,"strlen",&ci_strlen},
 {0x582D10141D5601F3LL,0,1,"stream_context_set_option",&ci_stream_context_set_option},
 {0x06DAF95935D221F6LL,0,1,"dom_namednodemap_item",&ci_dom_namednodemap_item},
 {0x16699E33370A8202LL,0,1,"idn_to_unicode",&ci_idn_to_unicode},
 {0x5B3C354575BB8203LL,0,1,"mysql_free_result",&ci_mysql_free_result},
 {0x7B525920E026C208LL,0,1,"gztell",&ci_gztell},
 {0x2F5144AB3647C20BLL,0,1,"dom_text_is_whitespace_in_element_content",&ci_dom_text_is_whitespace_in_element_content},
 {0x5C0DECC8CC67E20DLL,0,1,"magickwriteimagesfile",&ci_magickwriteimagesfile},
 {0x438CD1A0327A8211LL,0,1,"apc_define_constants",&ci_apc_define_constants},
 {0x4BC4B81CC5F32217LL,0,1,"dom_node_append_child",&ci_dom_node_append_child},
 {0x3A90CC67D58A021BLL,0,1,"hash_hmac_file",&ci_hash_hmac_file},
 {0x345E2BAE171FA221LL,0,1,"date_sunrise",&ci_date_sunrise},
 {0x39E4E0175FADC222LL,0,1,"drawskewx",&ci_drawskewx},
 {0x5208E8B08455E223LL,0,1,"dom_node_has_child_nodes",&ci_dom_node_has_child_nodes},
 {0x4129FFBF3548E22CLL,0,1,"mb_strpos",&ci_mb_strpos},
 {0x3B0FE36F9A7AE22DLL,0,1,"bzflush",&ci_bzflush},
 {0x036A5935D9936230LL,0,1,"hphp_splfileinfo_openfile",&ci_hphp_splfileinfo_openfile},
 {0x61A192D10C004231LL,0,1,"magickconvolveimage",&ci_magickconvolveimage},
 {0x422C51C95928A234LL,0,1,"str_replace",&ci_str_replace},
 {0x695AC59F79E2A238LL,0,0,"mb_encode_mimeheader",&ci_mb_encode_mimeheader},
 {0x0B7BB85A435F8238LL,0,1,"bzdecompress",&ci_bzdecompress},
 {0x306F1D92E413A23CLL,0,1,"check_user_func_async",&ci_check_user_func_async},
 {0x5E54CE856B78223ELL,0,1,"array_flip",&ci_array_flip},
 {0x0DB9DD4AE24B0240LL,0,1,"base64_encode",&ci_base64_encode},
 {0x7071BB6F0591E248LL,0,1,"serialize",&ci_serialize},
 {0x5E73B9F3B7C8224DLL,0,1,"parse_hdf_string",&ci_parse_hdf_string},
 {0x1D8FE8E68F7EA24FLL,0,1,"pixelsetiteratorrow",&ci_pixelsetiteratorrow},
 {0x0C9D52DBDCC18253LL,0,1,"msg_queue_exists",&ci_msg_queue_exists},
 {0x32C51FFF185F4258LL,0,1,"memcache_set",&ci_memcache_set},
 {0x7E6024E53AEEE25DLL,0,1,"apc_delete",&ci_apc_delete},
 {0x71D2D4757B7E4260LL,0,1,"apache_request_headers",&ci_apache_request_headers},
 {0x48305E8ABB8BC261LL,0,1,"hphp_instanceof",&ci_hphp_instanceof},
 {0x63AC0EED6D946262LL,0,1,"pcntl_fork",&ci_pcntl_fork},
 {0x561DB8F1DC0BC265LL,0,1,"magickseparateimagechannel",&ci_magickseparateimagechannel},
 {0x50C5488E19492267LL,0,1,"mb_list_encodings_alias_names",&ci_mb_list_encodings_alias_names},
 {0x135CE067FA0A6271LL,0,1,"bzerrno",&ci_bzerrno},
 {0x1C65F32FF28BC272LL,0,1,"pathinfo",&ci_pathinfo},
 {0x57B85F644523027BLL,0,1,"icu_tokenize",&ci_icu_tokenize},
 {0x7DB57C59E607627DLL,0,1,"mcrypt_generic_deinit",&ci_mcrypt_generic_deinit},
 {0x4111669F4862E27ELL,0,1,"drawpathlinetoverticalrelative",&ci_drawpathlinetoverticalrelative},
 {0x5B94A6962F1EC27FLL,0,1,"magickechoimagesblob",&ci_magickechoimagesblob},
 {0x2E54EF1891172280LL,0,1,"hphp_splfileinfo_isexecutable",&ci_hphp_splfileinfo_isexecutable},
 {0x1765A2E5186DE281LL,0,1,"socket_write",&ci_socket_write},
 {0x4C83B098C8BDA283LL,0,1,"posix_setsid",&ci_posix_setsid},
 {0x1A895A2307126285LL,0,0,"openssl_pkcs7_decrypt",&ci_openssl_pkcs7_decrypt},
 {0x5F7DC3612050A285LL,0,1,"drawsetfontweight",&ci_drawsetfontweight},
 {0x4F028FA6AAEEC286LL,0,0,"call_user_method",&ci_call_user_method},
 {0x3A2E2C40B019E286LL,0,1,"is_a",&ci_is_a},
 {0x27698DDEDAD6E287LL,0,0,"openssl_pkey_new",&ci_openssl_pkey_new},
 {0x23A1E13930E44287LL,0,1,"xbox_schedule_thread_reset",&ci_xbox_schedule_thread_reset},
 {0x04C11602C720A290LL,0,1,"convert_cyr_string",&ci_convert_cyr_string},
 {0x4D05DD57E4052294LL,0,1,"xmlwriter_output_memory",&ci_xmlwriter_output_memory},
 {0x69868C648BC12295LL,0,1,"apc_store",&ci_apc_store},
 {0x5665CB664C38A299LL,0,0,"parse_ini_string",&ci_parse_ini_string},
 {0x22D380E06E67E299LL,0,1,"stream_encoding",&ci_stream_encoding},
 {0x24BD9EBDC721E29ALL,0,1,"hphp_debug_caller_info",&ci_hphp_debug_caller_info},
 {0x0F71D3E47044E29CLL,0,1,"drawpathcurvetosmoothrelative",&ci_drawpathcurvetosmoothrelative},
 {0x1FBF8A270331C2A2LL,0,1,"write_hdf_file",&ci_write_hdf_file},
 {0x00AB6FC4E9EE62ADLL,0,0,"imagefilledrectangle",&ci_imagefilledrectangle},
 {0x35D259398CDDA2ADLL,0,1,"pixelgetredquantum",&ci_pixelgetredquantum},
 {0x59BB7B8078AC22B3LL,0,0,"tempnam",&ci_tempnam},
 {0x44530C37F2B522B3LL,0,1,"drawgetstrokedasharray",&ci_drawgetstrokedasharray},
 {0x0C4B98B47B0862B6LL,0,1,"apd_echo",&ci_apd_echo},
 {0x3C6D50F3BB8102B8LL,0,1,"next",&ci_next},
 {0x33E08846F3EB42BCLL,0,1,"ldap_get_values",&ci_ldap_get_values},
 {0x6018C9F7DF40C2C4LL,0,1,"xml_get_current_column_number",&ci_xml_get_current_column_number},
 {0x44273F8BA3F542CCLL,0,1,"imagesx",&ci_imagesx},
 {0x1922D51F3E1522CELL,0,1,"xmlwriter_end_dtd_attlist",&ci_xmlwriter_end_dtd_attlist},
 {0x4D9A87BD0CF742D2LL,0,1,"imagepsextendfont",&ci_imagepsextendfont},
 {0x5F585DF7CB82E2DDLL,0,1,"hphp_splfileinfo_iswritable",&ci_hphp_splfileinfo_iswritable},
 {0x45382D0BA5B262E3LL,0,1,"mysql_get_proto_info",&ci_mysql_get_proto_info},
 {0x215E0E2EFA7422EDLL,0,1,"drawgetstrokeantialias",&ci_drawgetstrokeantialias},
 {0x2884B7B3252B02EELL,0,0,"imagealphablending",&ci_imagealphablending},
 {0x5D43C0E4868EC2EELL,0,1,"forward_static_call",&ci_forward_static_call},
 {0x25CA0794823AA2F0LL,0,1,"openssl_csr_get_public_key",&ci_openssl_csr_get_public_key},
 {0x00CFD56391DF82F9LL,0,1,"mysql_data_seek",&ci_mysql_data_seek},
 {0x66D59E4DBC7382FCLL,0,1,"drawscale",&ci_drawscale},
 {0x33A532FDB8EAC304LL,0,1,"memcache_delete",&ci_memcache_delete},
 {0x47CB27E8FDB60309LL,0,0,"array_fill",&ci_array_fill},
 {0x414038596F552309LL,0,1,"magickgetversionnumber",&ci_magickgetversionnumber},
 {0x0C6F751411F5E30BLL,0,0,"strrev",&ci_strrev},
 {0x65F586C35A88030BLL,0,1,"magickresizeimage",&ci_magickresizeimage},
 {0x5B622E5709B5632DLL,0,1,"fb_lazy_realpath",&ci_fb_lazy_realpath},
 {0x7D1DCB9F4168032ELL,0,1,"imap_getsubscribed",&ci_imap_getsubscribed},
 {0x300F758BB0E16330LL,0,1,"mysql_num_rows",&ci_mysql_num_rows},
 {0x00DAFE46631AE331LL,0,1,"stream_set_timeout",&ci_stream_set_timeout},
 {0x037055C215998332LL,0,1,"bcsub",&ci_bcsub},
 {0x549D51040C250338LL,0,1,"cleardrawingwand",&ci_cleardrawingwand},
 {0x48D57F17C5132339LL,0,1,"drawgetclippath",&ci_drawgetclippath},
 {0x34DDF0DFC546033ALL,0,1,"xbox_task_start",&ci_xbox_task_start},
 {0x4E166ECE0EC6A33DLL,0,1,"openssl_pkey_get_public",&ci_openssl_pkey_get_public},
 {0x758EA7E9AA45C33ELL,0,1,"xmlwriter_end_document",&ci_xmlwriter_end_document},
 {0x1A9DC76AB74F6344LL,0,1,"openssl_verify",&ci_openssl_verify},
 {0x4B30FBA18042E346LL,0,1,"session_cache_expire",&ci_session_cache_expire},
 {0x3880550F6AD8034BLL,0,1,"session_destroy",&ci_session_destroy},
 {0x5998E61D600D634DLL,0,1,"drawaffine",&ci_drawaffine},
 {0x4BF5DEBDB76EC35ALL,0,0,"mcrypt_enc_get_iv_size",&ci_mcrypt_enc_get_iv_size},
 {0x0E0C79E42812235ALL,0,1,"imagepng",&ci_imagepng},
 {0x54C3E9AB6FB8E35DLL,0,1,"magickswirlimage",&ci_magickswirlimage},
 {0x280DE04F84FB235FLL,0,1,"popdrawingwand",&ci_popdrawingwand},
 {0x68DBF8ABB26A8365LL,0,1,"hphp_directoryiterator_rewind",&ci_hphp_directoryiterator_rewind},
 {0x4EF3469306E44366LL,0,1,"floatval",&ci_floatval},
 {0x4810A9774785C367LL,0,1,"posix_getpgrp",&ci_posix_getpgrp},
 {0x6C715D7DD63DA369LL,0,1,"is_integer",&ci_is_integer},
 {0x5ED8901DB5D14379LL,0,1,"magickcharcoalimage",&ci_magickcharcoalimage},
 {0x69EA8DC005FEC37ALL,0,1,"hphp_splfileobject_fwrite",&ci_hphp_splfileobject_fwrite},
 {0x7C40E2514FB5437DLL,0,1,"dom_namednodemap_get_named_item_ns",&ci_dom_namednodemap_get_named_item_ns},
 {0x791E946E04F50388LL,0,1,"magicksetresourcelimit",&ci_magicksetresourcelimit},
 {0x73A3F87C0A56238BLL,0,0,"stat",&ci_stat},
 {0x7CC683891D5F038BLL,0,1,"imap_qprint",&ci_imap_qprint},
 {0x4127DE142CD4A38DLL,0,1,"xml_get_error_code",&ci_xml_get_error_code},
 {0x2395B0A85E292392LL,0,1,"hphp_splfileobject_flock",&ci_hphp_splfileobject_flock},
 {0x269A220896FD2394LL,0,0,"deg2rad",&ci_deg2rad},
 {0x36953788781F4394LL,0,1,"mailparse_msg_extract_part",&ci_mailparse_msg_extract_part},
 {0x422599B9E8AC0395LL,0,1,"stream_bucket_make_writeable",&ci_stream_bucket_make_writeable},
 {0x15EC64198D93C396LL,0,1,"openssl_pkcs12_read",&ci_openssl_pkcs12_read},
 {0x1D2C305EA5C82397LL,0,1,"idn_to_utf8",&ci_idn_to_utf8},
 {0x215547858BA7E398LL,0,1,"hphp_recursiveiteratoriterator___construct",&ci_hphp_recursiveiteratoriterator___construct},
 {0x0CC562CBD773639ALL,0,1,"i18n_loc_get_default",&ci_i18n_loc_get_default},
 {0x25DF28703309C39BLL,0,1,"idate",&ci_idate},
 {0x0136F8F03932E39CLL,0,1,"session_unset",&ci_session_unset},
 {0x0368F1779E3AE39FLL,0,0,"mysql_field_table",&ci_mysql_field_table},
 {0x57E72C21F67D039FLL,0,1,"user_error",&ci_user_error},
 {0x5C29B6D7973903A1LL,0,1,"proc_nice",&ci_proc_nice},
 {0x0207E332D629A3A2LL,0,1,"mailparse_msg_get_structure",&ci_mailparse_msg_get_structure},
 {0x0121CD6CDCE1C3A8LL,0,1,"mysql_pconnect_with_db",&ci_mysql_pconnect_with_db},
 {0x7F9E810BC93023A9LL,0,1,"memcache_close",&ci_memcache_close},
 {0x3238A5BD362443AALL,0,1,"escapeshellcmd",&ci_escapeshellcmd},
 {0x3DB7EBC0B670C3B2LL,0,1,"magicksetimageredprimary",&ci_magicksetimageredprimary},
 {0x61720D771D1A23B3LL,0,1,"posix_getpwnam",&ci_posix_getpwnam},
 {0x03BE37E94875C3B5LL,0,1,"fb_set_exit_callback",&ci_fb_set_exit_callback},
 {0x5A3F5AAD1B13A3BBLL,0,1,"is_executable",&ci_is_executable},
 {0x60294C2616F6A3BDLL,0,1,"mcrypt_enc_get_supported_key_sizes",&ci_mcrypt_enc_get_supported_key_sizes},
 {0x3101CE70BA49A3C8LL,0,1,"error_reporting",&ci_error_reporting},
 {0x4C3B6BE9112E63CBLL,0,1,"str_split",&ci_str_split},
 {0x50C88817090C63CCLL,0,1,"pcntl_wait",&ci_pcntl_wait},
 {0x4F9F68F60FD7A3CELL,0,1,"drawgetfillrule",&ci_drawgetfillrule},
 {0x734FD402E190E3D3LL,0,1,"evhttp_async_get",&ci_evhttp_async_get},
 {0x0FF21F9BE4CCC3D4LL,0,1,"call_user_func_rpc",&ci_call_user_func_rpc},
 {0x7E7718CC939D63E4LL,0,1,"setrawcookie",&ci_setrawcookie},
 {0x6BB9D669DDB703E8LL,0,0,"xml_get_current_byte_index",&ci_xml_get_current_byte_index},
 {0x4A3127C309B0C3E8LL,0,1,"drawsetstrokelinecap",&ci_drawsetstrokelinecap},
 {0x6DA49696220FE3EALL,0,1,"mailparse_rfc822_parse_addresses",&ci_mailparse_rfc822_parse_addresses},
 {0x1DAE0831CECB63EBLL,0,1,"ob_get_clean",&ci_ob_get_clean},
 {0x598472448937E3EELL,0,1,"magickqueryfontmetrics",&ci_magickqueryfontmetrics},
 {0x69C07B1F19CE83F0LL,0,1,"imap_rfc822_parse_headers",&ci_imap_rfc822_parse_headers},
 {0x1938C8715806E3F4LL,0,1,"spl_classes",&ci_spl_classes},
 {0x3DCB1C92B5864401LL,0,1,"gzrewind",&ci_gzrewind},
 {0x2B12B0E9109D0404LL,0,1,"iptcembed",&ci_iptcembed},
 {0x2E57E06900594409LL,0,1,"xbox_send_message",&ci_xbox_send_message},
 {0x2939C5BAE0C4A40DLL,0,0,"nl2br",&ci_nl2br},
 {0x267529454569840DLL,0,0,"ob_flush",&ci_ob_flush},
 {0x002CCCD877D9640DLL,0,1,"drawpathclose",&ci_drawpathclose},
 {0x21EFB0B9D1514426LL,0,1,"magicksetpassphrase",&ci_magicksetpassphrase},
 {0x2A5A519E4BFE442DLL,0,1,"mb_eregi",&ci_mb_eregi},
 {0x316F2725AC15042FLL,0,1,"stream_resolve_include_path",&ci_stream_resolve_include_path},
 {0x6349C9658B2A2430LL,0,1,"memcache_pconnect",&ci_memcache_pconnect},
 {0x71C6E38BC56CE432LL,0,1,"stream_wrapper_register",&ci_stream_wrapper_register},
 {0x5019A1FBF377C43ALL,0,1,"imagepsbbox",&ci_imagepsbbox},
 {0x59ECE01C7629643CLL,0,1,"mysql_drop_db",&ci_mysql_drop_db},
 {0x158E2271E381C441LL,0,1,"hash_file",&ci_hash_file},
 {0x3F869126D0336442LL,0,1,"trigger_error",&ci_trigger_error},
 {0x1056EF1C14D2A452LL,0,1,"socket_connect",&ci_socket_connect},
 {0x0246AF48CD31245DLL,0,1,"count_chars",&ci_count_chars},
 {0x05D72365192CE465LL,0,0,"fwrite",&ci_fwrite},
 {0x406A1404F48E4465LL,0,1,"posix_getuid",&ci_posix_getuid},
 {0x0C626F268F120470LL,0,1,"__halt_compiler",&ci___halt_compiler},
 {0x0F8F276A48900473LL,0,1,"drawgetstrokelinecap",&ci_drawgetstrokelinecap},
 {0x268706C46202C475LL,0,1,"sem_acquire",&ci_sem_acquire},
 {0x1A08C578AD3BC47CLL,0,1,"apache_response_headers",&ci_apache_response_headers},
 {0x0AC36D9F961B247ELL,0,1,"newpixeliterator",&ci_newpixeliterator},
 {0x61499C92F4FBA485LL,0,1,"hphp_splfileobject_fgetc",&ci_hphp_splfileobject_fgetc},
 {0x7505924F05854489LL,0,1,"dom_element_set_attribute_ns",&ci_dom_element_set_attribute_ns},
 {0x275D127C87EF048DLL,0,1,"mysql_db_query",&ci_mysql_db_query},
 {0x43672229728A648FLL,0,1,"drawpushpattern",&ci_drawpushpattern},
 {0x7A59813AC331449DLL,0,1,"mb_ereg_search_regs",&ci_mb_ereg_search_regs},
 {0x7FF66005524E649FLL,0,1,"drawgettextdecoration",&ci_drawgettextdecoration},
 {0x6EC476E42A53A4A4LL,0,1,"ldap_err2str",&ci_ldap_err2str},
 {0x6F4497457F1584A8LL,0,1,"dom_element_set_id_attribute_node",&ci_dom_element_set_id_attribute_node},
 {0x245AA2790C87C4ACLL,0,0,"image_type_to_mime_type",&ci_image_type_to_mime_type},
 {0x6E8FFA56842304ACLL,0,1,"drawgetfont",&ci_drawgetfont},
 {0x3D98ACFCEBB764ADLL,0,1,"hphp_set_property",&ci_hphp_set_property},
 {0x3AF65A9F3653E4B0LL,0,1,"addslashes",&ci_addslashes},
 {0x00621C58E54D44B4LL,0,1,"hphp_recursiveiteratoriterator_key",&ci_hphp_recursiveiteratoriterator_key},
 {0x5351290CD139A4B9LL,0,1,"mb_strrpos",&ci_mb_strrpos},
 {0x35BE8F6E7726C4BDLL,0,0,"dechex",&ci_dechex},
 {0x1F4D41588D2EA4BDLL,0,1,"hphp_get_status",&ci_hphp_get_status},
 {0x57278846B8B0E4BELL,0,1,"ldap_count_entries",&ci_ldap_count_entries},
 {0x01681C307C5AE4BFLL,0,1,"strtoupper",&ci_strtoupper},
 {0x7AAC29849263C4C3LL,0,1,"getprotobyname",&ci_getprotobyname},
 {0x67EADCF4E81084C4LL,0,1,"mb_ereg",&ci_mb_ereg},
 {0x651F7FBBA90604C6LL,0,0,"magickgetimageindex",&ci_magickgetimageindex},
 {0x4F7AA8120E33E4C6LL,0,1,"collator_get_attribute",&ci_collator_get_attribute},
 {0x60783C20BF7724CELL,0,1,"mailparse_msg_free",&ci_mailparse_msg_free},
 {0x72DECE786967A4CFLL,0,1,"magickpreviousimage",&ci_magickpreviousimage},
 {0x215403F1E335C4D7LL,0,1,"magicksolarizeimage",&ci_magicksolarizeimage},
 {0x2532EB687D51E4D8LL,0,1,"unregister_tick_function",&ci_unregister_tick_function},
 {0x2E5E5A0FC3B5C4DFLL,0,1,"xml_set_character_data_handler",&ci_xml_set_character_data_handler},
 {0x340A51AE22A924E0LL,0,1,"reset",&ci_reset},
 {0x4CE852AAFF77E4E7LL,0,1,"inclued_get_data",&ci_inclued_get_data},
 {0x784F675D436004ECLL,0,1,"imap_close",&ci_imap_close},
 {0x65BD541EAB38E4F1LL,0,1,"mysql_close",&ci_mysql_close},
 {0x528AC8D252D224F5LL,0,1,"log10",&ci_log10},
 {0x0BD9C5D811CB04F7LL,0,0,"dom_element_set_id_attribute_ns",&ci_dom_element_set_id_attribute_ns},
 {0x3F534CE94DD984F7LL,0,1,"hphpd_get_client",&ci_hphpd_get_client},
 {0x011006D90D79E4F8LL,0,1,"mysql_errno",&ci_mysql_errno},
 {0x002387F1D23B44FDLL,0,0,"mcrypt_list_modes",&ci_mcrypt_list_modes},
 {0x2CEAE845E4F404FDLL,0,1,"dom_document_save",&ci_dom_document_save},
 {0x197A5D237BD4C507LL,0,1,"mb_ereg_search_getpos",&ci_mb_ereg_search_getpos},
 {0x71DCF11E3640C50BLL,0,1,"hphp_directoryiterator_valid",&ci_hphp_directoryiterator_valid},
 {0x5A66CCB3D924450FLL,0,1,"xml_parser_create",&ci_xml_parser_create},
 {0x09D5355CA8198511LL,0,1,"mb_internal_encoding",&ci_mb_internal_encoding},
 {0x54EDBB6BAF318519LL,0,1,"memcache_add",&ci_memcache_add},
 {0x28E724EDE0BB6524LL,0,1,"mb_strcut",&ci_mb_strcut},
 {0x57DDA4C3F7FF8526LL,0,1,"fputcsv",&ci_fputcsv},
 {0x6B2B942CAF1A2527LL,0,1,"array_shift",&ci_array_shift},
 {0x313D2A505076A533LL,0,1,"dir",&ci_dir},
 {0x746DC7AD953EA536LL,0,1,"memcache_set_compress_threshold",&ci_memcache_set_compress_threshold},
 {0x175B86BCB3124537LL,0,1,"magickgetexceptionstring",&ci_magickgetexceptionstring},
 {0x0F32841DBF7A053DLL,0,1,"fb_crossall_query",&ci_fb_crossall_query},
 {0x59A44591E67D4542LL,0,1,"drawrender",&ci_drawrender},
 {0x20E2B1D920122543LL,0,1,"die",&ci_die},
 {0x081F76AC889BC546LL,0,0,"getrusage",&ci_getrusage},
 {0x12A739BE0ED32546LL,0,1,"ignore_user_abort",&ci_ignore_user_abort},
 {0x0AD3BFAB5F780548LL,0,1,"magickcoalesceimages",&ci_magickcoalesceimages},
 {0x1B9E769FFEC3C54DLL,0,1,"pcntl_wtermsig",&ci_pcntl_wtermsig},
 {0x063200B5AAFEC54FLL,0,1,"mysql_thread_id",&ci_mysql_thread_id},
 {0x3DA2058E5C540566LL,0,1,"spliti",&ci_spliti},
 {0x74599147803DC56ALL,0,1,"magickgetstringwidth",&ci_magickgetstringwidth},
 {0x0DE86977367F656BLL,0,1,"register_shutdown_function",&ci_register_shutdown_function},
 {0x2A1F1B52160DE56ELL,0,1,"zend_logo_guid",&ci_zend_logo_guid},
 {0x13D0427F3BB3E570LL,0,0,"get_declared_interfaces",&ci_get_declared_interfaces},
 {0x21B3935EB3140570LL,0,1,"mysql_fetch_object",&ci_mysql_fetch_object},
 {0x72E1FD3DCD45C577LL,0,1,"bzopen",&ci_bzopen},
 {0x1DC8A386E219C579LL,0,1,"ldap_add",&ci_ldap_add},
 {0x22E08DEDF360057DLL,0,0,"pixelsetmagenta",&ci_pixelsetmagenta},
 {0x78EDB608B02A857DLL,0,1,"join",&ci_join},
 {0x132776D93181E57ELL,0,1,"ldap_set_option",&ci_ldap_set_option},
 {0x709140577B2C6580LL,0,1,"xhprof_network_enable",&ci_xhprof_network_enable},
 {0x02688986D5D76582LL,0,1,"magickspreadimage",&ci_magickspreadimage},
 {0x3B2CD86F5DB72583LL,0,1,"magickblackthresholdimage",&ci_magickblackthresholdimage},
 {0x3A34B44E4C51C58BLL,0,0,"xml_set_element_handler",&ci_xml_set_element_handler},
 {0x135C66BF0425458BLL,0,0,"_soap_active_version",&ci__soap_active_version},
 {0x1EF2C1426AB0A58BLL,0,1,"dom_node_replace_child",&ci_dom_node_replace_child},
 {0x560C2F71978CE58CLL,0,1,"shm_put_var",&ci_shm_put_var},
 {0x0012B121E023458ELL,0,1,"hphp_set_iostatus_address",&ci_hphp_set_iostatus_address},
 {0x66B19094ED494592LL,0,0,"imap_uid",&ci_imap_uid},
 {0x7F65501600346592LL,0,0,"mcrypt_get_block_size",&ci_mcrypt_get_block_size},
 {0x5464E148E8A0C592LL,0,0,"get_extension_funcs",&ci_get_extension_funcs},
 {0x3E9519FE856C4592LL,0,1,"curl_multi_init",&ci_curl_multi_init},
 {0x0F5984B8A7FD8593LL,0,1,"hphp_splfileinfo_getperms",&ci_hphp_splfileinfo_getperms},
 {0x513787A813DB0597LL,0,1,"date_date_set",&ci_date_date_set},
 {0x12F502A88E0AA599LL,0,1,"magickcompositeimage",&ci_magickcompositeimage},
 {0x4FBB1F662399A5A8LL,0,1,"is_soap_fault",&ci_is_soap_fault},
 {0x4110AF96B98B25ADLL,0,1,"gzeof",&ci_gzeof},
 {0x5EFE573046B565B5LL,0,1,"mcrypt_module_close",&ci_mcrypt_module_close},
 {0x05B8EB2C515885BALL,0,1,"vprintf",&ci_vprintf},
 {0x61465CD8C67905C0LL,0,1,"openssl_pkey_free",&ci_openssl_pkey_free},
 {0x3B3D5CE69B1565C6LL,0,1,"mcrypt_module_is_block_mode",&ci_mcrypt_module_is_block_mode},
 {0x1CE8175A87C785C8LL,0,1,"dom_document_validate",&ci_dom_document_validate},
 {0x6751946191FBE5CBLL,0,1,"override_function",&ci_override_function},
 {0x2A6F86821A39C5CCLL,0,1,"expm1",&ci_expm1},
 {0x406AC1DDB92925CELL,0,1,"parse_hdf_file",&ci_parse_hdf_file},
 {0x5D9818B3E1C385CFLL,0,1,"openssl_pkey_export_to_file",&ci_openssl_pkey_export_to_file},
 {0x054503DBBF5CA5D1LL,0,1,"imagecopy",&ci_imagecopy},
 {0x43901543EA8625D5LL,0,1,"curl_multi_select",&ci_curl_multi_select},
 {0x6D265875A19685D6LL,0,1,"is_float",&ci_is_float},
 {0x617AD1AD708785D7LL,0,1,"magickmodulateimage",&ci_magickmodulateimage},
 {0x3A9643992AC805E4LL,0,1,"magickdrawimage",&ci_magickdrawimage},
 {0x08069ECE0EA3C5E6LL,0,0,"imagecopymergegray",&ci_imagecopymergegray},
 {0x6FE2E44FBC44E5E6LL,0,1,"magickaddnoiseimage",&ci_magickaddnoiseimage},
 {0x3076D369F63E65EELL,0,1,"pixelgetalpha",&ci_pixelgetalpha},
 {0x1E89F15B7F2805F4LL,0,0,"openssl_pkcs7_encrypt",&ci_openssl_pkcs7_encrypt},
 {0x459330C31956A5F4LL,0,1,"vsprintf",&ci_vsprintf},
 {0x18E4CC945005E5F7LL,0,1,"drawpushclippath",&ci_drawpushclippath},
 {0x3535B6615F2B05FBLL,0,1,"session_cache_limiter",&ci_session_cache_limiter},
 {0x0C1CB24A3FC065FDLL,0,0,"bcmul",&ci_bcmul},
 {0x46832743CAF5C5FDLL,0,1,"dom_element_set_attribute_node",&ci_dom_element_set_attribute_node},
 {0x0F3403D8676C2601LL,0,1,"mysql_query",&ci_mysql_query},
 {0x52D5698F31D12609LL,0,1,"pcntl_setpriority",&ci_pcntl_setpriority},
 {0x4AC405EA2B8C4613LL,0,0,"magickresetiterator",&ci_magickresetiterator},
 {0x36783304F63C4613LL,0,1,"sscanf",&ci_sscanf},
 {0x66C7616225F1C616LL,0,0,"pixelsetgreen",&ci_pixelsetgreen},
 {0x7FA6D13B0D38E616LL,0,1,"imagegif",&ci_imagegif},
 {0x40DDE277D934061BLL,0,1,"gzputs",&ci_gzputs},
 {0x7E98B97C1B5D861DLL,0,1,"magickqueryconfigureoptions",&ci_magickqueryconfigureoptions},
 {0x134550B9EB596622LL,0,1,"drawgetfontstyle",&ci_drawgetfontstyle},
 {0x679B81CE06EE0629LL,0,1,"bcdiv",&ci_bcdiv},
 {0x608EA42B08A7462ALL,0,1,"linkinfo",&ci_linkinfo},
 {0x5AD6595ACA656631LL,0,1,"pixelresetiterator",&ci_pixelresetiterator},
 {0x391C68F2BE85E63BLL,0,1,"pixelgetiteratorexceptionstring",&ci_pixelgetiteratorexceptionstring},
 {0x62DE03461EF4663CLL,0,1,"symlink",&ci_symlink},
 {0x234F6A0A486E8646LL,0,1,"natcasesort",&ci_natcasesort},
 {0x7E978C38D741664ELL,0,1,"fgetcsv",&ci_fgetcsv},
 {0x03066277F647E652LL,0,1,"hphp_splfileobject_ftell",&ci_hphp_splfileobject_ftell},
 {0x33CBF1153473A657LL,0,1,"imap_base64",&ci_imap_base64},
 {0x2B56D410BFCE4659LL,0,0,"fb_lazy_stat",&ci_fb_lazy_stat},
 {0x7A4B37C23D674659LL,0,1,"collator_get_error_message",&ci_collator_get_error_message},
 {0x381BBFEABFEC865CLL,0,1,"libxml_get_last_error",&ci_libxml_get_last_error},
 {0x1491ED033E39465ELL,0,1,"dom_document_schema_validate_xml",&ci_dom_document_schema_validate_xml},
 {0x5B0759F776EC2664LL,0,1,"newdrawingwand",&ci_newdrawingwand},
 {0x08A6AD20C2C5A665LL,0,1,"hphp_set_static_property",&ci_hphp_set_static_property},
 {0x557A08AC57724667LL,0,1,"hphp_splfileinfo_getpathinfo",&ci_hphp_splfileinfo_getpathinfo},
 {0x7D68CADB8069466FLL,0,1,"magickaverageimages",&ci_magickaverageimages},
 {0x583AA7498A40E67ALL,0,1,"drawgetcliprule",&ci_drawgetcliprule},
 {0x111DACCF8628267DLL,0,1,"array_replace_recursive",&ci_array_replace_recursive},
 {0x665D2615E377A682LL,0,1,"pagelet_server_task_start",&ci_pagelet_server_task_start},
 {0x166D5E2336878690LL,0,1,"imagepolygon",&ci_imagepolygon},
 {0x57BA0BC1A4870691LL,0,1,"magickgetquantumdepth",&ci_magickgetquantumdepth},
 {0x16BE0DBA42800692LL,0,1,"magickgetimagesize",&ci_magickgetimagesize},
 {0x2673FAB2B4DE4694LL,0,1,"destroypixelwands",&ci_destroypixelwands},
 {0x5CC40F6A365FE69ALL,0,1,"session_register",&ci_session_register},
 {0x24D34E49C21DE69BLL,0,1,"mb_stristr",&ci_mb_stristr},
 {0x5E9821F06711669ELL,0,1,"gethostbynamel",&ci_gethostbynamel},
 {0x0D841874977646A6LL,0,1,"krsort",&ci_krsort},
 {0x45AB8F419BA666A8LL,0,1,"drawpathlinetohorizontalabsolute",&ci_drawpathlinetohorizontalabsolute},
 {0x541926FB6D6FC6AALL,0,1,"magickgetimagecolors",&ci_magickgetimagecolors},
 {0x23AAF570C78AC6B0LL,0,1,"ip2long",&ci_ip2long},
 {0x0D669C546C0EC6B2LL,0,1,"proc_terminate",&ci_proc_terminate},
 {0x623CE67C41A9E6B5LL,0,1,"ldap_next_attribute",&ci_ldap_next_attribute},
 {0x0553DE5D0C70C6B6LL,0,1,"imap_headers",&ci_imap_headers},
 {0x0C44E5EEB9C646B7LL,0,1,"memcache_connect",&ci_memcache_connect},
 {0x316F054CB76446B9LL,0,1,"openssl_sign",&ci_openssl_sign},
 {0x4605D48C234606BALL,0,1,"dom_document_import_node",&ci_dom_document_import_node},
 {0x34184B42D6AA86C4LL,0,0,"mb_ereg_search_pos",&ci_mb_ereg_search_pos},
 {0x3C042C09F662C6C4LL,0,0,"drawsetstrokepatternurl",&ci_drawsetstrokepatternurl},
 {0x4842AF70A71BE6C4LL,0,1,"uksort",&ci_uksort},
 {0x36A259FDB3FAA6C6LL,0,1,"hphp_get_call_info",&ci_hphp_get_call_info},
 {0x29DD2C9F889246C8LL,0,1,"passthru",&ci_passthru},
 {0x2D8DF100C30D06C9LL,0,1,"xmlwriter_set_indent_string",&ci_xmlwriter_set_indent_string},
 {0x158348EB08F406D6LL,0,1,"strtr",&ci_strtr},
 {0x40D0E3AF799226E4LL,0,1,"bin2hex",&ci_bin2hex},
 {0x0A5EFECAE87EA6ECLL,0,1,"hphp_splfileobject_eof",&ci_hphp_splfileobject_eof},
 {0x2B661CD43C6006EDLL,0,1,"hphpd_break",&ci_hphpd_break},
 {0x0FA74D85885F86EFLL,0,1,"output_add_rewrite_var",&ci_output_add_rewrite_var},
 {0x6B7347DF1AA7E6F1LL,0,1,"drawpopdefs",&ci_drawpopdefs},
 {0x314DA880FE2CE6F2LL,0,1,"session_start",&ci_session_start},
 {0x5768A80BB0B926F3LL,0,1,"apd_set_session_trace_socket",&ci_apd_set_session_trace_socket},
 {0x534C1A5E626C26F6LL,0,1,"collator_get_error_code",&ci_collator_get_error_code},
 {0x373235931F1126F7LL,0,1,"fb_disable_code_coverage",&ci_fb_disable_code_coverage},
 {0x623C20A027A606FFLL,0,1,"array_uintersect_uassoc",&ci_array_uintersect_uassoc},
 {0x21972B2BC7A14709LL,0,0,"imageistruecolor",&ci_imageistruecolor},
 {0x7681C631B34CC709LL,0,1,"hphp_splfileobject_fflush",&ci_hphp_splfileobject_fflush},
 {0x5F7873F2DF5BE70BLL,0,1,"ctype_cntrl",&ci_ctype_cntrl},
 {0x2FB2FA1DD832C70FLL,0,1,"xmlwriter_write_attribute_ns",&ci_xmlwriter_write_attribute_ns},
 {0x3C16230CBC6D471BLL,0,1,"imagecreatetruecolor",&ci_imagecreatetruecolor},
 {0x50AC61A28C5AC71CLL,0,1,"imagecolorclosestalpha",&ci_imagecolorclosestalpha},
 {0x78420E0B5D110723LL,0,1,"imagetruecolortopalette",&ci_imagetruecolortopalette},
 {0x4DAA3FBC2BD3A724LL,0,1,"magickequalizeimage",&ci_magickequalizeimage},
 {0x31EAD049860CE725LL,0,1,"posix_kill",&ci_posix_kill},
 {0x1F98B41362CDA72ALL,0,0,"magickgetimagegreenprimary",&ci_magickgetimagegreenprimary},
 {0x17C0D9B1C10B872ALL,0,1,"openssl_x509_export",&ci_openssl_x509_export},
 {0x0D558F552A784730LL,0,1,"ob_get_contents",&ci_ob_get_contents},
 {0x2B1C192C419B8732LL,0,1,"drawgetexception",&ci_drawgetexception},
 {0x5540879E019D473BLL,0,1,"fb_get_taint_warning_counts",&ci_fb_get_taint_warning_counts},
 {0x650E641CC0E3873FLL,0,1,"connection_aborted",&ci_connection_aborted},
 {0x13BB9EC5A2D2E747LL,0,0,"hphp_splfileinfo_isdir",&ci_hphp_splfileinfo_isdir},
 {0x3CD58419E181A747LL,0,1,"magickstereoimage",&ci_magickstereoimage},
 {0x0D7BBA9608A36748LL,0,1,"magickcombineimages",&ci_magickcombineimages},
 {0x42795829DF700753LL,0,1,"mysql_get_host_info",&ci_mysql_get_host_info},
 {0x53AEFD595C044754LL,0,1,"max",&ci_max},
 {0x7554E3E8674F2757LL,0,1,"mb_list_encodings",&ci_mb_list_encodings},
 {0x3EDB48C5DDD9675FLL,0,1,"socket_select",&ci_socket_select},
 {0x1BD984C11BB16760LL,0,0,"array_merge",&ci_array_merge},
 {0x7AB5E6EA37196760LL,0,1,"date_timezone_set",&ci_date_timezone_set},
 {0x6AF50085AC2AC761LL,0,1,"xmlwriter_write_element",&ci_xmlwriter_write_element},
 {0x7FCE6DD53FED6763LL,0,0,"intl_is_failure",&ci_intl_is_failure},
 {0x19DCB392D4686763LL,0,1,"hphp_get_timers",&ci_hphp_get_timers},
 {0x6C280D5855D20767LL,0,0,"drawsetfillalpha",&ci_drawsetfillalpha},
 {0x2FC27987B3F88767LL,0,1,"dom_node_clone_node",&ci_dom_node_clone_node},
 {0x179A72074C778768LL,0,1,"openssl_x509_export_to_file",&ci_openssl_x509_export_to_file},
 {0x6F6C5B9E3DC64770LL,0,1,"drawgetstrokemiterlimit",&ci_drawgetstrokemiterlimit},
 {0x616DDB67073A0776LL,0,1,"ord",&ci_ord},
 {0x1FBF36B5D65E677ALL,0,0,"fb_call_user_func_safe_return",&ci_fb_call_user_func_safe_return},
 {0x4330CE9C9002477ALL,0,1,"array_udiff_uassoc",&ci_array_udiff_uassoc},
 {0x29824AAA934CE780LL,0,1,"array_filter",&ci_array_filter},
 {0x53B4DBE58B356783LL,0,1,"imagesetthickness",&ci_imagesetthickness},
 {0x70A1EC006032E78ALL,0,1,"pixelgetquantumcolor",&ci_pixelgetquantumcolor},
 {0x7B4E25772D0AC78FLL,0,1,"simplexml_load_file",&ci_simplexml_load_file},
 {0x0D4891A5E1A20792LL,0,1,"get_defined_functions",&ci_get_defined_functions},
 {0x66ECE26DDCC12794LL,0,1,"imap_fetchheader",&ci_imap_fetchheader},
 {0x34BA3AAA6711C795LL,0,1,"dom_document_create_entity_reference",&ci_dom_document_create_entity_reference},
 {0x26D226FD28566799LL,0,1,"date_isodate_set",&ci_date_isodate_set},
 {0x1F76E954F9A147A7LL,0,1,"magickcontrastimage",&ci_magickcontrastimage},
 {0x7C251B7DE8DB87A9LL,0,1,"mcrypt_list_algorithms",&ci_mcrypt_list_algorithms},
 {0x58D6464A3A9127AALL,0,0,"apc_bin_loadfile",&ci_apc_bin_loadfile},
 {0x45A53A884414A7AALL,0,1,"pack",&ci_pack},
 {0x1B6467AD87E167B9LL,0,1,"log1p",&ci_log1p},
 {0x3F46374E6E1B07BFLL,0,1,"posix_getpwuid",&ci_posix_getpwuid},
 {0x152D1AB941A647C0LL,0,0,"hphp_get_extension_info",&ci_hphp_get_extension_info},
 {0x52FDAC1D298D67C0LL,0,1,"mcrypt_enc_get_algorithms_name",&ci_mcrypt_enc_get_algorithms_name},
 {0x3C696836396BE7C4LL,0,1,"mb_language",&ci_mb_language},
 {0x3D6D684AF537A7C6LL,0,1,"ldap_explode_dn",&ci_ldap_explode_dn},
 {0x55B68546CFAC87CALL,0,0,"magicksetimageresolution",&ci_magicksetimageresolution},
 {0x3C781898488687CALL,0,1,"xml_parse",&ci_xml_parse},
 {0x4C19B770DFFFE7CDLL,0,1,"imap_listmailbox",&ci_imap_listmailbox},
 {0x3AE33FEA6830C7CELL,0,1,"magickshearimage",&ci_magickshearimage},
 {0x2FAB1F75659707CFLL,0,1,"is_scalar",&ci_is_scalar},
 {0x2ED6760DAA3A67D9LL,0,1,"strcasecmp",&ci_strcasecmp},
 {0x1FE65AFCC92967DCLL,0,1,"rmdir",&ci_rmdir},
 {0x2B5AEDF1A5FC47DDLL,0,1,"strripos",&ci_strripos},
 {0x7AA1691D3D94A7E1LL,0,1,"dom_xpath_evaluate",&ci_dom_xpath_evaluate},
 {0x0888289CBD2887E2LL,0,1,"iconv_substr",&ci_iconv_substr},
 {0x53B7BF8991FA67E8LL,0,1,"i18n_loc_get_error_code",&ci_i18n_loc_get_error_code},
 {0x6BB8AC68771287E9LL,0,1,"strcmp",&ci_strcmp},
 {0x1A397501431EC7EBLL,0,0,"is_numeric",&ci_is_numeric},
 {0x54AE7140B95027EBLL,0,1,"pixelgetgreenquantum",&ci_pixelgetgreenquantum},
 {0x68D5866E2F3D07F3LL,0,0,"trait_exists",&ci_trait_exists},
 {0x4B57E07A323FE7F3LL,0,1,"drawpathlinetoverticalabsolute",&ci_drawpathlinetoverticalabsolute},
 {0x376FB2649384A7F9LL,0,1,"str_pad",&ci_str_pad},
 {0x0FD7C3144B4007FALL,0,1,"libxml_set_streams_context",&ci_libxml_set_streams_context},
 {0x238E501F2536E7FDLL,0,1,"drawsetclippath",&ci_drawsetclippath},
 {0x0E66983DD04B0800LL,0,1,"get_current_user",&ci_get_current_user},
 {0x290E54137CF06801LL,0,1,"dom_nodelist_item",&ci_dom_nodelist_item},
 {0x349A0DF6723B6804LL,0,1,"pixelsetcolorcount",&ci_pixelsetcolorcount},
 {0x19279D6DB4F70808LL,0,1,"hash_hmac",&ci_hash_hmac},
 {0x3FF63423EC4B280CLL,0,1,"posix_getegid",&ci_posix_getegid},
 {0x11EC19E702F2C80DLL,0,1,"getmyinode",&ci_getmyinode},
 {0x4297B1072CE76810LL,0,1,"fb_call_user_func_array_safe",&ci_fb_call_user_func_array_safe},
 {0x1A6B577442218813LL,0,1,"pixelsetmagentaquantum",&ci_pixelsetmagentaquantum},
 {0x2D52FB9B52EC2821LL,0,1,"xml_set_notation_decl_handler",&ci_xml_set_notation_decl_handler},
 {0x13C241C02DE72822LL,0,1,"dom_document_relaxng_validate_xml",&ci_dom_document_relaxng_validate_xml},
 {0x2B78E204F615A824LL,0,1,"openssl_pkcs12_export_to_file",&ci_openssl_pkcs12_export_to_file},
 {0x33EC567341B9C827LL,0,1,"magickgetmaxtextadvance",&ci_magickgetmaxtextadvance},
 {0x39EE4CCCA716E829LL,0,1,"stream_context_get_options",&ci_stream_context_get_options},
 {0x34F0E032AB05C82CLL,0,1,"pixelsetblue",&ci_pixelsetblue},
 {0x1C4AE57BF4E4A82DLL,0,1,"apc_dec",&ci_apc_dec},
 {0x79A05154A7F5482FLL,0,1,"magickgetimagedelay",&ci_magickgetimagedelay},
 {0x63E554E0F11CE838LL,0,0,"mysql_unbuffered_query",&ci_mysql_unbuffered_query},
 {0x0890F9052322E838LL,0,1,"fstat",&ci_fstat},
 {0x567A7139AD476843LL,0,1,"socket_listen",&ci_socket_listen},
 {0x50088ED5D482C846LL,0,1,"ldap_mod_add",&ci_ldap_mod_add},
 {0x4E69A952E3EA4847LL,0,1,"magicksetfilename",&ci_magicksetfilename},
 {0x7D3F626E636C084ALL,0,1,"ldap_delete",&ci_ldap_delete},
 {0x68B7597C22FA484BLL,0,1,"openssl_public_encrypt",&ci_openssl_public_encrypt},
 {0x488C2F267BF2884ELL,0,1,"array_intersect",&ci_array_intersect},
 {0x632D491E42E7E84FLL,0,1,"session_get_cookie_params",&ci_session_get_cookie_params},
 {0x4DDB82A3632FA850LL,0,1,"atan",&ci_atan},
 {0x5A017A4C6A41E85CLL,0,1,"curl_multi_add_handle",&ci_curl_multi_add_handle},
 {0x6B4DE6865142285ELL,0,1,"destroypixeliterator",&ci_destroypixeliterator},
 {0x168EDA8238EEE864LL,0,1,"mb_detect_order",&ci_mb_detect_order},
 {0x785C812E6292E868LL,0,1,"i18n_loc_set_default",&ci_i18n_loc_set_default},
 {0x0C1BBEDECEF1C86BLL,0,1,"newmagickwand",&ci_newmagickwand},
 {0x6414504A6658286CLL,0,1,"stripos",&ci_stripos},
 {0x1476A177CC50686FLL,0,1,"mb_strstr",&ci_mb_strstr},
 {0x34F50577C14C6870LL,0,1,"array_diff_uassoc",&ci_array_diff_uassoc},
 {0x558D62FBEB210872LL,0,0,"str_rot13",&ci_str_rot13},
 {0x3C7B86F57AFA0872LL,0,1,"hebrev",&ci_hebrev},
 {0x4C06B4AFC1C08873LL,0,1,"str_shuffle",&ci_str_shuffle},
 {0x2B36081E0828487DLL,0,0,"debug_print_backtrace",&ci_debug_print_backtrace},
 {0x54F84DC9A334287DLL,0,1,"gzencode",&ci_gzencode},
 {0x3EBD8F559B4EA883LL,0,1,"hphp_splfileobject_getflags",&ci_hphp_splfileobject_getflags},
 {0x766CD15A7F2A0884LL,0,1,"array_uintersect",&ci_array_uintersect},
 {0x539868C56806688FLL,0,1,"imagecopyresampled",&ci_imagecopyresampled},
 {0x4AC522FF7BB60898LL,0,1,"xmlwriter_write_dtd_entity",&ci_xmlwriter_write_dtd_entity},
 {0x6B1A3BCE67BAC8A0LL,0,1,"openssl_csr_new",&ci_openssl_csr_new},
 {0x1EFFE951E79348ACLL,0,1,"imap_expunge",&ci_imap_expunge},
 {0x31830AA5032428B2LL,0,1,"is_double",&ci_is_double},
 {0x28D343EC901608BALL,0,1,"imap_listsubscribed",&ci_imap_listsubscribed},
 {0x7AE3AE9B634988BCLL,0,1,"stream_context_create",&ci_stream_context_create},
 {0x5C28BE7FFE6A68C4LL,0,1,"xml_set_start_namespace_decl_handler",&ci_xml_set_start_namespace_decl_handler},
 {0x146A1A7658CCA8C5LL,0,1,"asinh",&ci_asinh},
 {0x4623383F8534E8C7LL,0,0,"array_multisort",&ci_array_multisort},
 {0x6D9B9BE3CED388C7LL,0,1,"apc_load_constants",&ci_apc_load_constants},
 {0x3FFAA982E4B1E8CELL,0,1,"date_offset_get",&ci_date_offset_get},
 {0x74EB6C564ABC68D2LL,0,1,"dom_document_create_text_node",&ci_dom_document_create_text_node},
 {0x6DB4EE8696C7E8D4LL,0,1,"magicksetimageiterations",&ci_magicksetimageiterations},
 {0x26DC8AB4A9CBE8D6LL,0,0,"iconv",&ci_iconv},
 {0x2F585B36DDDB68D6LL,0,1,"mb_convert_case",&ci_mb_convert_case},
 {0x3A65182A3E8908D8LL,0,0,"openssl_open",&ci_openssl_open},
 {0x69FB5DBA88A308D8LL,0,1,"imap_8bit",&ci_imap_8bit},
 {0x18B64D6BFE4208D9LL,0,1,"stream_get_transports",&ci_stream_get_transports},
 {0x31F50FDA18B888DCLL,0,1,"magickgetimagetype",&ci_magickgetimagetype},
 {0x16A18007E10F48E4LL,0,1,"socket_getsockname",&ci_socket_getsockname},
 {0x69887F054A1E28E6LL,0,1,"strtok",&ci_strtok},
 {0x608729F27FA428E7LL,0,1,"error_get_last",&ci_error_get_last},
 {0x17582BEA497D48F7LL,0,1,"ctype_alpha",&ci_ctype_alpha},
 {0x6F0F82818B68A8FALL,0,1,"array_values",&ci_array_values},
 {0x214532C4A2BC28FBLL,0,1,"ldap_next_entry",&ci_ldap_next_entry},
 {0x047BF4D3D0ED08FELL,0,1,"strchr",&ci_strchr},
 {0x2987B15E11FE890BLL,0,1,"clock_settime",&ci_clock_settime},
 {0x71EA5ABF3CB6090DLL,0,1,"hphp_is_service_thread",&ci_hphp_is_service_thread},
 {0x5B9B2C3B32906911LL,0,1,"drawsetfillpatternurl",&ci_drawsetfillpatternurl},
 {0x55757E1242390913LL,0,1,"cos",&ci_cos},
 {0x6E22C6D840B44914LL,0,1,"mcrypt_generic_init",&ci_mcrypt_generic_init},
 {0x37A3DF6E0795091BLL,0,1,"memcache_increment",&ci_memcache_increment},
 {0x069C028EFEF8C91DLL,0,1,"date",&ci_date},
 {0x0F5917FFCDD6C921LL,0,1,"mb_substr",&ci_mb_substr},
 {0x174C510386E6492ALL,0,1,"hphp_directoryiterator_key",&ci_hphp_directoryiterator_key},
 {0x26E8B741BDDDC92ELL,0,1,"xmlwriter_start_element",&ci_xmlwriter_start_element},
 {0x507CE1912FD74930LL,0,1,"mail",&ci_mail},
 {0x4FB95164A5F84934LL,0,1,"mcrypt_generic_end",&ci_mcrypt_generic_end},
 {0x46BD9A56BDE40935LL,0,1,"mysql_escape_string",&ci_mysql_escape_string},
 {0x5B60C8396C624939LL,0,1,"mb_substitute_character",&ci_mb_substitute_character},
 {0x0CADFE289C92893ELL,0,1,"socket_getpeername",&ci_socket_getpeername},
 {0x7C565AD57BC84943LL,0,1,"pixelsetindex",&ci_pixelsetindex},
 {0x7CB0596B6CCFA945LL,0,1,"split",&ci_split},
 {0x630288865DE68947LL,0,1,"php_strip_whitespace",&ci_php_strip_whitespace},
 {0x3D3AD12E52FF294DLL,0,1,"imagecreatefromwbmp",&ci_imagecreatefromwbmp},
 {0x253AC5D4E450A957LL,0,1,"magickgetreleasedate",&ci_magickgetreleasedate},
 {0x7056E766A274895ALL,0,0,"virtual",&ci_virtual},
 {0x103C12985527295ALL,0,1,"hphp_splfileobject_setcsvcontrol",&ci_hphp_splfileobject_setcsvcontrol},
 {0x21DBCE74EB1FC95DLL,0,1,"xmlwriter_text",&ci_xmlwriter_text},
 {0x5EA7052A00E88961LL,0,1,"magickgetcopyright",&ci_magickgetcopyright},
 {0x1419B3BF428B2967LL,0,1,"evhttp_async_post",&ci_evhttp_async_post},
 {0x758263CEBF2E8972LL,0,1,"assert_options",&ci_assert_options},
 {0x7E26D48503362975LL,0,0,"drawpathcurvetoabsolute",&ci_drawpathcurvetoabsolute},
 {0x488141281A75E975LL,0,1,"imagecreatefromgif",&ci_imagecreatefromgif},
 {0x0C16C797916C2977LL,0,1,"posix_setegid",&ci_posix_setegid},
 {0x5067A65AD1D0297ELL,0,1,"pixelgetiteratorexception",&ci_pixelgetiteratorexception},
 {0x6ECE4BDB8842E986LL,0,1,"posix_strerror",&ci_posix_strerror},
 {0x22B3CF8DD3D1A987LL,0,1,"pixelsynciterator",&ci_pixelsynciterator},
 {0x489355BDBE396988LL,0,1,"drawsettextencoding",&ci_drawsettextencoding},
 {0x60BF7CDD733A2989LL,0,1,"bzerrstr",&ci_bzerrstr},
 {0x333D4DFD4927898ELL,0,1,"magickgetimagewhitepoint",&ci_magickgetimagewhitepoint},
 {0x79AD7C6D77A3A993LL,0,1,"imap_reopen",&ci_imap_reopen},
 {0x1B25944F20490998LL,0,0,"hphp_get_class_constant",&ci_hphp_get_class_constant},
 {0x501AAD31C8086998LL,0,1,"posix_getcwd",&ci_posix_getcwd},
 {0x3B7F5477708BA999LL,0,1,"get_declared_traits",&ci_get_declared_traits},
 {0x564D8D3DA1E8E99BLL,0,1,"xml_get_current_line_number",&ci_xml_get_current_line_number},
 {0x047EF9173590C9A0LL,0,1,"session_decode",&ci_session_decode},
 {0x01D2367A02F0A9A2LL,0,1,"magicksetsize",&ci_magicksetsize},
 {0x78261FA60B8D89A3LL,0,0,"imagepsloadfont",&ci_imagepsloadfont},
 {0x43D1339C52E309A3LL,0,1,"hphp_service_thread_started",&ci_hphp_service_thread_started},
 {0x76988956F35329A5LL,0,1,"xmlwriter_end_cdata",&ci_xmlwriter_end_cdata},
 {0x6F9CF95104CAE9A9LL,0,1,"pixelgetyellowquantum",&ci_pixelgetyellowquantum},
 {0x7C1CE38F14E529B1LL,0,1,"date_default_timezone_set",&ci_date_default_timezone_set},
 {0x65D7CBE8681CE9B2LL,0,1,"gzgetss",&ci_gzgetss},
 {0x672DA903B52249BCLL,0,0,"xhprof_frame_begin",&ci_xhprof_frame_begin},
 {0x7E7BF1BDA6DB49BCLL,0,1,"hphp_splfileinfo_getgroup",&ci_hphp_splfileinfo_getgroup},
 {0x458B5ABEDAC1C9BELL,0,1,"disk_free_space",&ci_disk_free_space},
 {0x6A7BDB900E7429C2LL,0,1,"magickconstituteimage",&ci_magickconstituteimage},
 {0x080F661DB8BFC9C6LL,0,1,"hphp_splfileinfo_getmtime",&ci_hphp_splfileinfo_getmtime},
 {0x6ECDF24B29D789C7LL,0,1,"strtolower",&ci_strtolower},
 {0x4E61FE901C1C29CDLL,0,1,"array_intersect_key",&ci_array_intersect_key},
 {0x7A9FB932873D09CELL,0,1,"gmmktime",&ci_gmmktime},
 {0x415B91CAEE0689CFLL,0,1,"magickgetimageinterlacescheme",&ci_magickgetimageinterlacescheme},
 {0x10C82F357BB7E9D3LL,0,0,"curl_version",&ci_curl_version},
 {0x1C31A9E1207209D3LL,0,0,"mb_split",&ci_mb_split},
 {0x25CA0299103F49D3LL,0,1,"magickgetsize",&ci_magickgetsize},
 {0x7628053EFCC0C9D7LL,0,1,"hphp_clear_unflushed",&ci_hphp_clear_unflushed},
 {0x48B2E069B89489DBLL,0,1,"magickappendimages",&ci_magickappendimages},
 {0x5C039967E60089DELL,0,1,"array_intersect_ukey",&ci_array_intersect_ukey},
 {0x0EEE4E25855469DFLL,0,1,"hphp_process_abort",&ci_hphp_process_abort},
 {0x1B44CF284E9B09E6LL,0,1,"interface_exists",&ci_interface_exists},
 {0x6A45EB471332A9E9LL,0,0,"imagecolorexactalpha",&ci_imagecolorexactalpha},
 {0x330EE2729DB7C9E9LL,0,1,"drawgetfontstretch",&ci_drawgetfontstretch},
 {0x6C1415DAD1E7C9F2LL,0,1,"fb_get_flush_stat",&ci_fb_get_flush_stat},
 {0x6535B60A4BC449F3LL,0,1,"dns_get_record",&ci_dns_get_record},
 {0x51201EE65BC729F4LL,0,1,"localtime",&ci_localtime},
 {0x2BC61637253BE9F5LL,0,1,"drawgetfontweight",&ci_drawgetfontweight},
 {0x2394D4E030AB69FDLL,0,1,"getmypid",&ci_getmypid},
 {0x0B88D3F582D16A04LL,0,1,"memcache_get_extended_stats",&ci_memcache_get_extended_stats},
 {0x13E0C91488484A0CLL,0,1,"imap_unsubscribe",&ci_imap_unsubscribe},
 {0x472CA39715598A11LL,0,1,"mb_eregi_replace",&ci_mb_eregi_replace},
 {0x66A378C6BBC26A18LL,0,1,"dom_document_create_cdatasection",&ci_dom_document_create_cdatasection},
 {0x12D49AD562F38A1CLL,0,1,"date_timezone_get",&ci_date_timezone_get},
 {0x35C8BD7DFDADEA1FLL,0,1,"hphp_directoryiterator_current",&ci_hphp_directoryiterator_current},
 {0x2A420675E6AF0A20LL,0,1,"basename",&ci_basename},
 {0x14279BB1A6872A21LL,0,1,"atan2",&ci_atan2},
 {0x3FC127C442BAEA22LL,0,1,"session_id",&ci_session_id},
 {0x5EC0A3DD935EEA25LL,0,0,"magickresampleimage",&ci_magickresampleimage},
 {0x1DB9A1FB97A3AA25LL,0,1,"magicksetimageoption",&ci_magicksetimageoption},
 {0x3CAEA6B8D1C92A2ALL,0,1,"stream_bucket_prepend",&ci_stream_bucket_prepend},
 {0x073ACDF9B3F06A2CLL,0,0,"memcache_setoptimeout",&ci_memcache_setoptimeout},
 {0x3DA70155FBE16A2CLL,0,1,"fb_curl_getopt",&ci_fb_curl_getopt},
 {0x4BA4D91190F88A2ELL,0,1,"fb_utf8_strlen_deprecated",&ci_fb_utf8_strlen_deprecated},
 {0x1F3E32847C1CCA31LL,0,1,"mb_ereg_match",&ci_mb_ereg_match},
 {0x545A7BE199EC4A3BLL,0,1,"pcntl_getpriority",&ci_pcntl_getpriority},
 {0x21DF7BAEEFABCA3CLL,0,1,"umask",&ci_umask},
 {0x682C14726D484A40LL,0,0,"fileatime",&ci_fileatime},
 {0x4926EE59103B2A40LL,0,1,"destroydrawingwand",&ci_destroydrawingwand},
 {0x7F6A6306BBE8AA44LL,0,1,"imagelayereffect",&ci_imagelayereffect},
 {0x4894583F517C6A4CLL,0,0,"intl_get_error_code",&ci_intl_get_error_code},
 {0x7039B1C3356B8A4CLL,0,1,"hphp_splfileobject_rewind",&ci_hphp_splfileobject_rewind},
 {0x506BBFC1B32AEA50LL,0,1,"memcache_replace",&ci_memcache_replace},
 {0x7E929ED7D9BE6A57LL,0,0,"ini_get",&ci_ini_get},
 {0x5088945958DD4A57LL,0,1,"mktime",&ci_mktime},
 {0x6E823A722DE1EA58LL,0,1,"stream_socket_client",&ci_stream_socket_client},
 {0x7E1E9C4C3D4E8A5DLL,0,1,"stream_select",&ci_stream_select},
 {0x2C6826999658AA5ELL,0,1,"getopt",&ci_getopt},
 {0x7CAE3FE798EC0A5FLL,0,1,"php_logo_guid",&ci_php_logo_guid},
 {0x64C3AF1BCF872A64LL,0,1,"hphp_get_mutable_iterator",&ci_hphp_get_mutable_iterator},
 {0x3590F3AAC94E0A65LL,0,0,"array_change_key_case",&ci_array_change_key_case},
 {0x469199B8FD886A65LL,0,1,"putenv",&ci_putenv},
 {0x1DD37E722E11AA69LL,0,1,"session_regenerate_id",&ci_session_regenerate_id},
 {0x28AC28C54C4E6A79LL,0,0,"openssl_error_string",&ci_openssl_error_string},
 {0x2ACAD5A7A8C78A79LL,0,1,"qlzuncompress",&ci_qlzuncompress},
 {0x09367774F803EA81LL,0,1,"hphp_recursiveiteratoriterator_valid",&ci_hphp_recursiveiteratoriterator_valid},
 {0x258205B54DC06A82LL,0,1,"newpixelwands",&ci_newpixelwands},
 {0x08C1A5A05B6A0A84LL,0,1,"ob_get_length",&ci_ob_get_length},
 {0x2180916F8D4F6A85LL,0,1,"drawcomment",&ci_drawcomment},
 {0x7C5A22328CAB4A87LL,0,1,"ereg_replace",&ci_ereg_replace},
 {0x7ACBCD9CF335AA8BLL,0,1,"xmlwriter_start_document",&ci_xmlwriter_start_document},
 {0x465E6C67F885AA94LL,0,0,"drawgetstrokelinejoin",&ci_drawgetstrokelinejoin},
 {0x7761D019E0B5EA94LL,0,0,"magickstripimage",&ci_magickstripimage},
 {0x0AC7CBCE30442A94LL,0,1,"imagepalettecopy",&ci_imagepalettecopy},
 {0x55FAF12AF1920AA0LL,0,1,"sha1_file",&ci_sha1_file},
 {0x57B7D47A9D1E6AA3LL,0,0,"memory_get_allocation",&ci_memory_get_allocation},
 {0x2B75B48A53AACAA3LL,0,1,"imagestring",&ci_imagestring},
 {0x2B70BED515240AA4LL,0,1,"fb_setprofile",&ci_fb_setprofile},
 {0x4BBA1E164DF9CAA6LL,0,1,"localeconv",&ci_localeconv},
 {0x2238FC7870E9CAA9LL,0,1,"strspn",&ci_strspn},
 {0x1331979EF8EF0AABLL,0,1,"mb_ereg_search",&ci_mb_ereg_search},
 {0x18CF3E4A60E4AAACLL,0,1,"pi",&ci_pi},
 {0x3ED47399FE1D6AAFLL,0,1,"dom_document_create_attribute_ns",&ci_dom_document_create_attribute_ns},
 {0x569EED88F20BAAB2LL,0,1,"drawgettextundercolor",&ci_drawgettextundercolor},
 {0x1BAFB965204D0AB4LL,0,1,"openssl_x509_check_private_key",&ci_openssl_x509_check_private_key},
 {0x3754E97715176AC5LL,0,1,"hphp_get_stats",&ci_hphp_get_stats},
 {0x3886D2664F874AC7LL,0,1,"openssl_pkcs7_verify",&ci_openssl_pkcs7_verify},
 {0x5CA9671385EF0AC9LL,0,1,"sem_release",&ci_sem_release},
 {0x45B30CD663284ACALL,0,1,"is_int",&ci_is_int},
 {0x348888DDF223AACBLL,0,1,"mt_getrandmax",&ci_mt_getrandmax},
 {0x750D0396676E6ACCLL,0,1,"imagecolorexact",&ci_imagecolorexact},
 {0x604572CB0314EACDLL,0,1,"imap_listscan",&ci_imap_listscan},
 {0x5338F971C6DCEAD5LL,0,1,"hphp_splfileinfo_islink",&ci_hphp_splfileinfo_islink},
 {0x231BCE6071220AD6LL,0,1,"drawcircle",&ci_drawcircle},
 {0x52401023E146AAD8LL,0,1,"xmlwriter_end_dtd",&ci_xmlwriter_end_dtd},
 {0x547E7EE64761AADCLL,0,1,"imagecreatefromxbm",&ci_imagecreatefromxbm},
 {0x1827F1C22F1CCAE4LL,0,0,"hebrevc",&ci_hebrevc},
 {0x47B15A7136E94AE4LL,0,1,"strnatcasecmp",&ci_strnatcasecmp},
 {0x0E09D0FEA30B6AE6LL,0,1,"hphp_get_function_info",&ci_hphp_get_function_info},
 {0x528D41A17B8FCAEBLL,0,1,"imap_set_quota",&ci_imap_set_quota},
 {0x654E7E6002508AF7LL,0,1,"shm_has_var",&ci_shm_has_var},
 {0x757229A894864AF8LL,0,1,"session_set_cookie_params",&ci_session_set_cookie_params},
 {0x3C32181DDB860AFALL,0,1,"imap_getacl",&ci_imap_getacl},
 {0x12FDE503AB422AFBLL,0,1,"getaddrinfo",&ci_getaddrinfo},
 {0x7833F4C337542AFFLL,0,1,"openssl_pkey_export",&ci_openssl_pkey_export},
 {0x32458C11C6E74B03LL,0,1,"pixelsetblackquantum",&ci_pixelsetblackquantum},
 {0x14B366EF64A66B0ALL,0,1,"get_loaded_extensions",&ci_get_loaded_extensions},
 {0x1949BAE772C50B0DLL,0,0,"mysql_warning_count",&ci_mysql_warning_count},
 {0x368DBC0699272B0DLL,0,1,"magicknegateimage",&ci_magicknegateimage},
 {0x76675F14C1138B14LL,0,1,"gzuncompress",&ci_gzuncompress},
 {0x24D0895FBB7BCB15LL,0,0,"is_callable",&ci_is_callable},
 {0x773E3809C4954B15LL,0,1,"hphp_recursivedirectoryiterator_current",&ci_hphp_recursivedirectoryiterator_current},
 {0x0551EACBE8278B19LL,0,1,"decoct",&ci_decoct},
 {0x399522EE0CF3EB1ALL,0,1,"drawsetstrokewidth",&ci_drawsetstrokewidth},
 {0x1B7CE8114AEACB1BLL,0,1,"magickannotateimage",&ci_magickannotateimage},
 {0x798F2776FECAEB25LL,0,1,"get_required_files",&ci_get_required_files},
 {0x17C38BE3A6EE8B29LL,0,1,"mysql_field_flags",&ci_mysql_field_flags},
 {0x442B1E05FC146B31LL,0,1,"stream_context_set_param",&ci_stream_context_set_param},
 {0x00DCD60DD8752B33LL,0,1,"set_exception_handler",&ci_set_exception_handler},
 {0x78842C1950B38B35LL,0,1,"drawpathfinish",&ci_drawpathfinish},
 {0x5E2AF775FEB04B3ELL,0,1,"posix_getppid",&ci_posix_getppid},
 {0x684881C79ED1AB45LL,0,1,"func_get_args",&ci_func_get_args},
 {0x00D8FE7A00252B46LL,0,1,"escapeshellarg",&ci_escapeshellarg},
 {0x1C0F3DE630E1EB4CLL,0,1,"class_uses",&ci_class_uses},
 {0x37DF53E4D9348B4DLL,0,1,"xbox_post_message",&ci_xbox_post_message},
 {0x6237393C71E56B50LL,0,1,"array_fill_keys",&ci_array_fill_keys},
 {0x40F0B69D55F7EB53LL,0,1,"drawsetstrokealpha",&ci_drawsetstrokealpha},
 {0x6158E2E0A5ACCB58LL,0,1,"idn_to_ascii",&ci_idn_to_ascii},
 {0x23FD09A13E0D8B5BLL,0,0,"xmlwriter_open_memory",&ci_xmlwriter_open_memory},
 {0x29203294F6214B5BLL,0,1,"memcache_debug",&ci_memcache_debug},
 {0x4BD4E9D9D4A56B6ALL,0,1,"exif_tagname",&ci_exif_tagname},
 {0x1D4136B4CEAE4B6BLL,0,1,"stripcslashes",&ci_stripcslashes},
 {0x2D8D57FC1DC6CB6FLL,0,1,"import_request_variables",&ci_import_request_variables},
 {0x1A73FD4416FECB70LL,0,1,"magickwriteimagefile",&ci_magickwriteimagefile},
 {0x31242F51AA828B79LL,0,1,"drawpoppattern",&ci_drawpoppattern},
 {0x308C90AD9478CB7FLL,0,1,"substr_compare",&ci_substr_compare},
 {0x5BDE96FD5015AB82LL,0,1,"base_convert",&ci_base_convert},
 {0x41F8FDD700C0CB85LL,0,1,"socket_last_error",&ci_socket_last_error},
 {0x09837A82A928AB97LL,0,1,"is_null",&ci_is_null},
 {0x4870ADD98EE02BA2LL,0,1,"pcntl_wifsignaled",&ci_pcntl_wifsignaled},
 {0x444A3375EFBC2BA3LL,0,1,"openssl_public_decrypt",&ci_openssl_public_decrypt},
 {0x006481EAF2A70BABLL,0,1,"ldap_errno",&ci_ldap_errno},
 {0x6A2236CDDFF12BAFLL,0,1,"magickhaspreviousimage",&ci_magickhaspreviousimage},
 {0x04A24B397CF46BB1LL,0,1,"strrchr",&ci_strrchr},
 {0x3F7DCC3A00800BB5LL,0,1,"imagecolorallocate",&ci_imagecolorallocate},
 {0x43B74276235F4BBCLL,0,1,"is_bool",&ci_is_bool},
 {0x42684202E2E62BBELL,0,0,"mcrypt_get_iv_size",&ci_mcrypt_get_iv_size},
 {0x79617ED8EFD1ABBELL,0,0,"get_class_vars",&ci_get_class_vars},
 {0x5ECB0B145B88EBBELL,0,1,"imagefilledarc",&ci_imagefilledarc},
 {0x22BA0903D344CBC9LL,0,0,"array_rand",&ci_array_rand},
 {0x0B4E7B9180C4ABC9LL,0,1,"xml_set_end_namespace_decl_handler",&ci_xml_set_end_namespace_decl_handler},
 {0x0D375A94E75ACBCALL,0,1,"hphp_throw_fatal_error",&ci_hphp_throw_fatal_error},
 {0x22251ECF8CD58BCDLL,0,1,"array_product",&ci_array_product},
 {0x600AFF0A6378ABCELL,0,1,"is_writeable",&ci_is_writeable},
 {0x7046755D8374EBD0LL,0,1,"ctype_digit",&ci_ctype_digit},
 {0x5B2F2A23D8368BD4LL,0,1,"magickraiseimage",&ci_magickraiseimage},
 {0x06D5979AB150EBD8LL,0,1,"dom_node_lookup_namespace_uri",&ci_dom_node_lookup_namespace_uri},
 {0x0E804FCE5C14CBE5LL,0,1,"imap_sort",&ci_imap_sort},
 {0x1BB5D99C1D29CBE7LL,0,1,"strstr",&ci_strstr},
 {0x4E903B706977ABE8LL,0,1,"imagepsslantfont",&ci_imagepsslantfont},
 {0x790B7C44A3442BEELL,0,0,"asort",&ci_asort},
 {0x03F50E435DE20BEELL,0,1,"magickclippathimage",&ci_magickclippathimage},
 {0x46EC26486531ABF4LL,0,1,"imap_deletemailbox",&ci_imap_deletemailbox},
 {0x08B4BEBAB3312BF6LL,0,1,"image_type_to_extension",&ci_image_type_to_extension},
 {0x2EC378A759F9EC05LL,0,1,"xbox_task_status",&ci_xbox_task_status},
 {0x66EF68EF3C144C07LL,0,1,"imap_gc",&ci_imap_gc},
 {0x0833BCE91C40CC0BLL,0,0,"magickqueryconfigureoption",&ci_magickqueryconfigureoption},
 {0x0EEE484739520C0BLL,0,1,"magickthresholdimage",&ci_magickthresholdimage},
 {0x510B683F2E764C12LL,0,1,"fb_load_local_databases",&ci_fb_load_local_databases},
 {0x67742A0F218F6C1BLL,0,0,"posix_initgroups",&ci_posix_initgroups},
 {0x7D615C7E3ADB2C1BLL,0,1,"xmlwriter_write_comment",&ci_xmlwriter_write_comment},
 {0x32D5F30455C90C1ELL,0,1,"imap_subscribe",&ci_imap_subscribe},
 {0x7BD43EB167198C20LL,0,1,"xmlwriter_write_pi",&ci_xmlwriter_write_pi},
 {0x5A02EE8ED39F0C27LL,0,1,"posix_getgrnam",&ci_posix_getgrnam},
 {0x79A4E240F18BAC28LL,0,1,"rand",&ci_rand},
 {0x09A98E99D51E8C2BLL,0,1,"hphp_recursivedirectoryiterator_seek",&ci_hphp_recursivedirectoryiterator_seek},
 {0x116C3EC924B9AC2CLL,0,1,"imagegd",&ci_imagegd},
 {0x2B9A380A29D0EC35LL,0,1,"session_write_close",&ci_session_write_close},
 {0x6EF89BCAD607CC45LL,0,1,"strncasecmp",&ci_strncasecmp},
 {0x44055093E56E4C47LL,0,1,"mcrypt_enc_get_key_size",&ci_mcrypt_enc_get_key_size},
 {0x357F73CEBD6E2C49LL,0,0,"write_hdf_string",&ci_write_hdf_string},
 {0x2D3F0F8DB0C20C49LL,0,1,"dom_node_insert_before",&ci_dom_node_insert_before},
 {0x3C23768CFB492C4ALL,0,1,"gzinflate",&ci_gzinflate},
 {0x5DAC1C64D8F08C4ELL,0,1,"openssl_pkey_get_private",&ci_openssl_pkey_get_private},
 {0x56EDB60C824E8C51LL,0,1,"key",&ci_key},
 {0x1FC294B806F76C52LL,0,1,"php_sapi_name",&ci_php_sapi_name},
 {0x793259E03C37CC57LL,0,1,"memcache_decrement",&ci_memcache_decrement},
 {0x43C0E9827D502C63LL,0,1,"array_intersect_assoc",&ci_array_intersect_assoc},
 {0x3409D717D9246C64LL,0,1,"libxml_use_internal_errors",&ci_libxml_use_internal_errors},
 {0x41BD9EA0BC5E4C6ALL,0,1,"move_uploaded_file",&ci_move_uploaded_file},
 {0x7C6B37BF6300AC6BLL,0,1,"iconv_mime_encode",&ci_iconv_mime_encode},
 {0x1E074215FE5FCC71LL,0,1,"set_error_handler",&ci_set_error_handler},
 {0x528366F3195ACC75LL,0,1,"xbox_task_result",&ci_xbox_task_result},
 {0x1C35934C6BC52C76LL,0,1,"libxml_clear_errors",&ci_libxml_clear_errors},
 {0x665F08996BD4AC78LL,0,1,"magicksetimagegreenprimary",&ci_magicksetimagegreenprimary},
 {0x05F3BC04D61CAC7ALL,0,0,"get_defined_vars",&ci_get_defined_vars},
 {0x05D7B804ECDE8C7ALL,0,1,"checkdnsrr",&ci_checkdnsrr},
 {0x749E45FBD48BEC7BLL,0,0,"hphp_recursivedirectoryiterator___tostring",&ci_hphp_recursivedirectoryiterator___tostring},
 {0x71B25229CD080C7BLL,0,1,"dom_element_set_attribute_node_ns",&ci_dom_element_set_attribute_node_ns},
 {0x5F41821072A06C7ELL,0,1,"hphp_splfileinfo_getctime",&ci_hphp_splfileinfo_getctime},
 {0x5D49AF7004696C84LL,0,1,"shm_detach",&ci_shm_detach},
 {0x0F9C0C82F40F2C89LL,0,1,"pixelsetcyanquantum",&ci_pixelsetcyanquantum},
 {0x467470230015AC8ELL,0,1,"mcrypt_module_is_block_algorithm_mode",&ci_mcrypt_module_is_block_algorithm_mode},
 {0x4173EFD9A8EECC8FLL,0,1,"magicknewimage",&ci_magicknewimage},
 {0x3F0C947E68D02C90LL,0,0,"ini_get_all",&ci_ini_get_all},
 {0x05556EDFC1BB0C90LL,0,1,"mysql_info",&ci_mysql_info},
 {0x47C5BC101A512C96LL,0,1,"magickquantizeimage",&ci_magickquantizeimage},
 {0x2EA6E1D600786C99LL,0,1,"mb_strtoupper",&ci_mb_strtoupper},
 {0x50296037C7968C9ELL,0,1,"preg_split",&ci_preg_split},
 {0x4590B5971EC9ACA1LL,0,1,"getmygid",&ci_getmygid},
 {0x737253E9FC112CA3LL,0,1,"socket_close",&ci_socket_close},
 {0x1C1216F2B7C16CADLL,0,1,"ftell",&ci_ftell},
 {0x3ACD2F1EA5282CAELL,0,1,"magickmattefloodfillimage",&ci_magickmattefloodfillimage},
 {0x735555B148E58CB1LL,0,1,"ldap_read",&ci_ldap_read},
 {0x56023CC5ECC9ECB2LL,0,1,"dns_get_mx",&ci_dns_get_mx},
 {0x742AD1AA5A80ECB4LL,0,0,"output_reset_rewrite_vars",&ci_output_reset_rewrite_vars},
 {0x41FBEF9F7A024CB4LL,0,1,"xmlwriter_end_element",&ci_xmlwriter_end_element},
 {0x560637BE51C36CB6LL,0,1,"ezmlm_hash",&ci_ezmlm_hash},
 {0x41D3B07854936CBBLL,0,0,"token_get_all",&ci_token_get_all},
 {0x031F9B7B9A08ECBBLL,0,0,"bzcompress",&ci_bzcompress},
 {0x15ACD9F32D214CBBLL,0,1,"mysql_fetch_lengths",&ci_mysql_fetch_lengths},
 {0x733137183026ACBCLL,0,0,"hphp_splfileobject_next",&ci_hphp_splfileobject_next},
 {0x19C1872E55A7ECBCLL,0,0,"is_long",&ci_is_long},
 {0x3978BE548631ECBCLL,0,1,"hash_final",&ci_hash_final},
 {0x42BCEFCF899D0CC2LL,0,1,"magickgetimagecolorspace",&ci_magickgetimagecolorspace},
 {0x7A147B8B98C76CC3LL,0,1,"key_exists",&ci_key_exists},
 {0x4CF625DF902F8CC8LL,0,1,"imap_get_quotaroot",&ci_imap_get_quotaroot},
 {0x14C550B86A16ACCDLL,0,1,"hphp_get_this",&ci_hphp_get_this},
 {0x1FD3FB2AB0F48CD2LL,0,1,"magickgetimagesignature",&ci_magickgetimagesignature},
 {0x6406BC03A5D84CD3LL,0,1,"dom_element_remove_attribute",&ci_dom_element_remove_attribute},
 {0x11166D3106DB6CD6LL,0,1,"wandhasexception",&ci_wandhasexception},
 {0x27BFAF1293A60CD9LL,0,1,"ldap_get_dn",&ci_ldap_get_dn},
 {0x674AA2DBDA5E4CDALL,0,1,"imageloadfont",&ci_imageloadfont},
 {0x28FB6C2FF0372CE0LL,0,1,"openssl_decrypt",&ci_openssl_decrypt},
 {0x6B92530A9ABA0CE2LL,0,0,"session_commit",&ci_session_commit},
 {0x2D5A5580B9FD2CE2LL,0,1,"imap_setacl",&ci_imap_setacl},
 {0x7821BD05E5228CEALL,0,0,"imagewbmp",&ci_imagewbmp},
 {0x5A8AF4F880DA4CEALL,0,1,"mailparse_msg_extract_whole_part_file",&ci_mailparse_msg_extract_whole_part_file},
 {0x78FFA0E69D6AACEELL,0,1,"mcrypt_cfb",&ci_mcrypt_cfb},
 {0x21C8FC9A94404CF1LL,0,1,"php_ini_scanned_files",&ci_php_ini_scanned_files},
 {0x26729ECB00B8ECF5LL,0,1,"end_user_func_async",&ci_end_user_func_async},
 {0x1C30C8470100ECF7LL,0,1,"mcrypt_enc_is_block_mode",&ci_mcrypt_enc_is_block_mode},
 {0x537CF5DE8C43CCF9LL,0,1,"curl_getinfo",&ci_curl_getinfo},
 {0x48A2F2A7A4620CFFLL,0,1,"pixelsetyellowquantum",&ci_pixelsetyellowquantum},
 {0x7EB48D1BB5B7AD02LL,0,0,"dom_element_set_attribute",&ci_dom_element_set_attribute},
 {0x018F22AEA371ED02LL,0,1,"filemtime",&ci_filemtime},
 {0x1248250E701DAD04LL,0,1,"magickgaussianblurimage",&ci_magickgaussianblurimage},
 {0x19B643D858DC6D07LL,0,1,"magickgetimagerenderingintent",&ci_magickgetimagerenderingintent},
 {0x6E8996DD071CED0ALL,0,1,"dom_element_remove_attribute_node",&ci_dom_element_remove_attribute_node},
 {0x5CEFA5A265104D10LL,0,1,"count",&ci_count},
 {0x2D484921B5400D11LL,0,1,"magickradialblurimage",&ci_magickradialblurimage},
 {0x1C8D554F57DCAD15LL,0,1,"hphp_object_pointer",&ci_hphp_object_pointer},
 {0x12BB5E00E714ED17LL,0,1,"magickgetimagecompose",&ci_magickgetimagecompose},
 {0x75DB75CA9DE56D1ALL,0,1,"xml_parser_get_option",&ci_xml_parser_get_option},
 {0x70C22A7EEF54CD1BLL,0,1,"ldap_compare",&ci_ldap_compare},
 {0x566465036CCBCD1FLL,0,1,"min",&ci_min},
 {0x429D088E9779CD26LL,0,1,"dom_document_normalize_document",&ci_dom_document_normalize_document},
 {0x632D50B69429ED29LL,0,1,"socket_set_block",&ci_socket_set_block},
 {0x04AD18F476D0CD31LL,0,1,"hphpd_client_ctrl",&ci_hphpd_client_ctrl},
 {0x515841235FADCD36LL,0,1,"class_implements",&ci_class_implements},
 {0x6C9AE626DAD02D3BLL,0,0,"mailparse_msg_extract_part_file",&ci_mailparse_msg_extract_part_file},
 {0x0784B2B034560D3BLL,0,1,"destroypixelwand",&ci_destroypixelwand},
 {0x198627C81DABAD40LL,0,1,"register_cleanup_function",&ci_register_cleanup_function},
 {0x41785512C45FCD49LL,0,1,"mysql_ping",&ci_mysql_ping},
 {0x337D2252CDA22D50LL,0,0,"is_real",&ci_is_real},
 {0x39B11A2A25E40D50LL,0,1,"mysql_get_server_info",&ci_mysql_get_server_info},
 {0x4ACCF26A7AE80D5ALL,0,1,"imagefilltoborder",&ci_imagefilltoborder},
 {0x41B5E3D2AADE2D5BLL,0,1,"drawroundrectangle",&ci_drawroundrectangle},
 {0x1371413B4F6F8D5CLL,0,1,"pixelgetred",&ci_pixelgetred},
 {0x567276D68FE12D60LL,0,1,"preg_quote",&ci_preg_quote},
 {0x34F150F3D94E6D61LL,0,1,"gzpassthru",&ci_gzpassthru},
 {0x0C393EE8F6540D66LL,0,1,"bccomp",&ci_bccomp},
 {0x21D924BA98BFCD6DLL,0,0,"file_get_contents",&ci_file_get_contents},
 {0x4351AFD0FD818D6DLL,0,0,"magickmotionblurimage",&ci_magickmotionblurimage},
 {0x7D9E024FD8696D6DLL,0,1,"get_class",&ci_get_class},
 {0x74FDC4596C654D71LL,0,1,"dom_node_is_default_namespace",&ci_dom_node_is_default_namespace},
 {0x7467E8107EF08D76LL,0,1,"unpack",&ci_unpack},
 {0x3ED49C2BBDDFAD77LL,0,1,"ldap_next_reference",&ci_ldap_next_reference},
 {0x384E8BC9B5FE2D7ELL,0,1,"magickfximage",&ci_magickfximage},
 {0x4E19AFB75A62AD7FLL,0,1,"imagerotate",&ci_imagerotate},
 {0x25EA810DAEA74D81LL,0,1,"ob_clean",&ci_ob_clean},
 {0x363D0D4E6D8ACD82LL,0,1,"imap_alerts",&ci_imap_alerts},
 {0x344091B785FE8D87LL,0,1,"socket_set_timeout",&ci_socket_set_timeout},
 {0x1F22C82816F9AD88LL,0,0,"hphp_splfileinfo_getpath",&ci_hphp_splfileinfo_getpath},
 {0x2AFF8525E93D6D88LL,0,1,"drawsetfillopacity",&ci_drawsetfillopacity},
 {0x6A351AEDFC4D0D8ELL,0,1,"magickgetimagemimetype",&ci_magickgetimagemimetype},
 {0x1806DC9468882D8FLL,0,1,"gzfile",&ci_gzfile},
 {0x5E4360FC28D0AD90LL,0,1,"magicksetinterlacescheme",&ci_magicksetinterlacescheme},
 {0x5695393CF6428D91LL,0,0,"dom_element_set_id_attribute",&ci_dom_element_set_id_attribute},
 {0x48444F8F18E60D91LL,0,1,"strftime",&ci_strftime},
 {0x30C1AE2B06990D9ELL,0,1,"gzseek",&ci_gzseek},
 {0x7084C6294240CDA0LL,0,1,"octdec",&ci_octdec},
 {0x18FEAF2459E5ADA8LL,0,0,"dom_element_has_attribute",&ci_dom_element_has_attribute},
 {0x474A096265502DA8LL,0,0,"glob",&ci_glob},
 {0x7FB39C41E339ADA8LL,0,1,"imap_setflag_full",&ci_imap_setflag_full},
 {0x66764CAABFF4CDABLL,0,1,"array_keys",&ci_array_keys},
 {0x257371BC40186DB2LL,0,1,"magickblurimage",&ci_magickblurimage},
 {0x53F2C6F5AE244DB3LL,0,1,"drawpushdefs",&ci_drawpushdefs},
 {0x2B1D442AEA06ADB8LL,0,1,"strpbrk",&ci_strpbrk},
 {0x770DEDCB168B0DBCLL,0,1,"mb_ereg_search_setpos",&ci_mb_ereg_search_setpos},
 {0x01E6FF7D9746CDBDLL,0,1,"stream_socket_accept",&ci_stream_socket_accept},
 {0x069EE6F604BA2DC3LL,0,1,"array_reverse",&ci_array_reverse},
 {0x73210FEAA2EACDC6LL,0,1,"imagecolorsforindex",&ci_imagecolorsforindex},
 {0x3BB701F2BDD0ADCALL,0,1,"magickgetimageprofile",&ci_magickgetimageprofile},
 {0x40C3C7DE46D62DCELL,0,0,"ob_start",&ci_ob_start},
 {0x3E5C990C32470DCELL,0,1,"array_combine",&ci_array_combine},
 {0x0E1C354339208DD0LL,0,1,"imagetypes",&ci_imagetypes},
 {0x251236613D41EDD6LL,0,1,"snuncompress",&ci_snuncompress},
 {0x1AE08377A1630DD7LL,0,1,"mysql_insert_id",&ci_mysql_insert_id},
 {0x5EBE067E3FAECDDCLL,0,0,"ob_gzhandler",&ci_ob_gzhandler},
 {0x2497295AC9F72DDCLL,0,1,"stream_set_blocking",&ci_stream_set_blocking},
 {0x3B00B916C3682DDDLL,0,1,"ctype_upper",&ci_ctype_upper},
 {0x47A4BA8616D02DE8LL,0,1,"restore_exception_handler",&ci_restore_exception_handler},
 {0x73B30E65808A6DF4LL,0,1,"ctype_xdigit",&ci_ctype_xdigit},
 {0x3AD6E084483B2E0CLL,0,1,"array_udiff_assoc",&ci_array_udiff_assoc},
 {0x5EB0A2F93E650E0DLL,0,1,"array_diff_key",&ci_array_diff_key},
 {0x5230E4C9D8D64E0ELL,0,1,"highlight_string",&ci_highlight_string},
 {0x76636D0F0C090E12LL,0,1,"curl_copy_handle",&ci_curl_copy_handle},
 {0x58F426377837AE14LL,0,1,"imap_body",&ci_imap_body},
 {0x3D13FD5FE3AF6E17LL,0,1,"imagestringup",&ci_imagestringup},
 {0x7BDA47B5C47EAE20LL,0,0,"fread",&ci_fread},
 {0x772FA9788923EE20LL,0,1,"mysql_multi_query",&ci_mysql_multi_query},
 {0x5B7F218FA08D8E21LL,0,1,"imagefilledellipse",&ci_imagefilledellipse},
 {0x73FE5C79E14A0E29LL,0,1,"pixelsetbluequantum",&ci_pixelsetbluequantum},
 {0x19AB40AB4CC50E2CLL,0,1,"imap_fetch_overview",&ci_imap_fetch_overview},
 {0x3E62C1A48E9EEE2ELL,0,1,"hphp_splfileinfo_getsize",&ci_hphp_splfileinfo_getsize},
 {0x000AAF93F814AE32LL,0,1,"drawsetvectorgraphics",&ci_drawsetvectorgraphics},
 {0x38433635F28B4E33LL,0,1,"is_readable",&ci_is_readable},
 {0x13048F0A79F7CE3ALL,0,1,"magicksetsamplingfactors",&ci_magicksetsamplingfactors},
 {0x11681FDE841D0E40LL,0,1,"drawskewy",&ci_drawskewy},
 {0x160B01F095B20E42LL,0,1,"mb_output_handler",&ci_mb_output_handler},
 {0x7F4C1DF551150E46LL,0,1,"pixelgetnextiteratorrow",&ci_pixelgetnextiteratorrow},
 {0x1EEBDFD62B6BEE4CLL,0,1,"mcrypt_module_get_algo_block_size",&ci_mcrypt_module_get_algo_block_size},
 {0x62C934CD93938E4FLL,0,1,"magickimplodeimage",&ci_magickimplodeimage},
 {0x4022005DE7E24E50LL,0,1,"openssl_pkcs7_sign",&ci_openssl_pkcs7_sign},
 {0x6BF155774D546E54LL,0,0,"define_syslog_variables",&ci_define_syslog_variables},
 {0x7B6BF544EB420E54LL,0,1,"hphp_recursivedirectoryiterator_haschildren",&ci_hphp_recursivedirectoryiterator_haschildren},
 {0x2DEF52641933CE57LL,0,1,"magickgetimagemattecolor",&ci_magickgetimagemattecolor},
 {0x532D0D905CE60E5CLL,0,1,"posix_times",&ci_posix_times},
 {0x38373F6643B14E5DLL,0,1,"ldap_parse_reference",&ci_ldap_parse_reference},
 {0x593EA675D239CE61LL,0,1,"ldap_first_reference",&ci_ldap_first_reference},
 {0x7639C74DBC4F4E62LL,0,1,"array_splice",&ci_array_splice},
 {0x4B6FE37D66784E63LL,0,1,"imagesy",&ci_imagesy},
 {0x4F0DF8BBC4340E64LL,0,1,"stream_socket_server",&ci_stream_socket_server},
 {0x21D5A3208639EE65LL,0,1,"dom_element_get_attribute_node_ns",&ci_dom_element_get_attribute_node_ns},
 {0x5B1DFB89BFC1CE68LL,0,1,"realpath",&ci_realpath},
 {0x24B836D2C79D0E69LL,0,1,"magickgetimagepixels",&ci_magickgetimagepixels},
 {0x2F9816D9A2B2CE6ALL,0,1,"mysql_set_charset",&ci_mysql_set_charset},
 {0x714001ABB0D76E6DLL,0,1,"magickgetinterlacescheme",&ci_magickgetinterlacescheme},
 {0x7E6223D0CF184E6FLL,0,1,"magickqueryformats",&ci_magickqueryformats},
 {0x4EC7C66593DDEE75LL,0,1,"sql_regcase",&ci_sql_regcase},
 {0x12B7B2D835B80E77LL,0,1,"chmod",&ci_chmod},
 {0x4D9C5B9A944CCE7CLL,0,1,"convert_uudecode",&ci_convert_uudecode},
 {0x3B426B13FA584E81LL,0,1,"fb_unserialize",&ci_fb_unserialize},
 {0x724011CF7C31AE83LL,0,1,"sqrt",&ci_sqrt},
 {0x1765A63835CC4E84LL,0,1,"drawgetfontfamily",&ci_drawgetfontfamily},
 {0x4710320ED6638E85LL,0,1,"rename_function",&ci_rename_function},
 {0x1569DCC552EE8E88LL,0,1,"cosh",&ci_cosh},
 {0x15C9E5C16374EE8ALL,0,1,"gzclose",&ci_gzclose},
 {0x33D6CC3959D3CE90LL,0,1,"clearmagickwand",&ci_clearmagickwand},
 {0x37A9E8F91C33EE93LL,0,1,"magickborderimage",&ci_magickborderimage},
 {0x76EBE919625D8E9ELL,0,1,"openssl_pkcs12_export",&ci_openssl_pkcs12_export},
 {0x224004A728974E9FLL,0,0,"spl_object_hash",&ci_spl_object_hash},
 {0x7CFF820207DC6E9FLL,0,1,"debug_backtrace",&ci_debug_backtrace},
 {0x1531A4E88BE02EA5LL,0,1,"hphp_instruction_counter",&ci_hphp_instruction_counter},
 {0x1D7B8E395613AEA6LL,0,1,"dom_element_remove_attribute_ns",&ci_dom_element_remove_attribute_ns},
 {0x308D76DB12424EA9LL,0,1,"magicksetimageindex",&ci_magicksetimageindex},
 {0x5772A0B8C16DAEAELL,0,1,"posix_setuid",&ci_posix_setuid},
 {0x12D83A92EFB0EEAFLL,0,1,"xmlwriter_open_uri",&ci_xmlwriter_open_uri},
 {0x33FE101882726EB1LL,0,1,"proc_close",&ci_proc_close},
 {0x732DAA2292946EB3LL,0,0,"imap_header",&ci_imap_header},
 {0x7379B5B97EC2EEB3LL,0,1,"hypot",&ci_hypot},
 {0x2475D7045D9DEEC0LL,0,1,"magicksetimagecompression",&ci_magicksetimagecompression},
 {0x7052903F1B17AEC4LL,0,1,"parse_str",&ci_parse_str},
 {0x58C8DCAAE5B7CEC9LL,0,1,"get_cfg_var",&ci_get_cfg_var},
 {0x08E6C1CD3AC64ECALL,0,0,"hphp_splfileinfo_gettype",&ci_hphp_splfileinfo_gettype},
 {0x1AA83A1057BE6ECALL,0,1,"mysql_field_len",&ci_mysql_field_len},
 {0x3CCD09EC3511CED2LL,0,1,"apd_stop_trace",&ci_apd_stop_trace},
 {0x16331E18B5CD8EDBLL,0,1,"timezone_open",&ci_timezone_open},
 {0x0B8B6A66FE646EDCLL,0,1,"openssl_encrypt",&ci_openssl_encrypt},
 {0x7A1C6E429399CEE0LL,0,1,"iconv_set_encoding",&ci_iconv_set_encoding},
 {0x0E1368A3BDFE6EE3LL,0,0,"hphp_recursiveiteratoriterator_rewind",&ci_hphp_recursiveiteratoriterator_rewind},
 {0x1F4AACF075E9CEE3LL,0,1,"memcache_get_server_status",&ci_memcache_get_server_status},
 {0x6C4B9D0271790EE4LL,0,1,"imap_rfc822_parse_adrlist",&ci_imap_rfc822_parse_adrlist},
 {0x367CFD20B4446EE5LL,0,1,"is_array",&ci_is_array},
 {0x6CB6650E66CE4EE8LL,0,1,"magicksetimagebordercolor",&ci_magicksetimagebordercolor},
 {0x72882DBF2D49CEEBLL,0,1,"set_magic_quotes_runtime",&ci_set_magic_quotes_runtime},
 {0x33FD10AC81146EF8LL,0,1,"thrift_protocol_read_binary",&ci_thrift_protocol_read_binary},
 {0x0CF27A6BC84CEEFDLL,0,0,"openssl_get_publickey",&ci_openssl_get_publickey},
 {0x283E167EB3F04EFDLL,0,1,"posix_getgid",&ci_posix_getgid},
 {0x7B6A0D7510184F01LL,0,1,"mysql_fetch_assoc",&ci_mysql_fetch_assoc},
 {0x6842585E79988F05LL,0,1,"magickmosaicimages",&ci_magickmosaicimages},
 {0x6692475BA65A2F06LL,0,0,"imagearc",&ci_imagearc},
 {0x1D3B08AA0AF50F06LL,0,1,"gettype",&ci_gettype},
 {0x36EA41EEA02D4F0ALL,0,1,"imap_mail_copy",&ci_imap_mail_copy},
 {0x7756593AAC1F6F0BLL,0,1,"imagecreatefromstring",&ci_imagecreatefromstring},
 {0x700A75BF904DAF10LL,0,1,"magickgetcharwidth",&ci_magickgetcharwidth},
 {0x042492DDA48C4F12LL,0,1,"gzdeflate",&ci_gzdeflate},
 {0x04525BA2AE51EF14LL,0,1,"date_sun_info",&ci_date_sun_info},
 {0x12F09EAED9078F15LL,0,1,"mysql_fetch_field",&ci_mysql_fetch_field},
 {0x0287B907DDA3EF16LL,0,0,"hphpd_get_user_commands",&ci_hphpd_get_user_commands},
 {0x23B7D9E4EC992F16LL,0,0,"stream_get_line",&ci_stream_get_line},
 {0x38664EFE3E0A0F16LL,0,1,"json_decode",&ci_json_decode},
 {0x2C4206A0BD904F20LL,0,1,"hphp_splfileobject_fseek",&ci_hphp_splfileobject_fseek},
 {0x77EC28645855AF21LL,0,0,"magicksetcompressionquality",&ci_magicksetcompressionquality},
 {0x4282496A4BF42F21LL,0,1,"php_uname",&ci_php_uname},
 {0x5FA07E8B63BEAF24LL,0,0,"mcrypt_enc_get_modes_name",&ci_mcrypt_enc_get_modes_name},
 {0x05BD68F1D09CEF24LL,0,1,"array_count_values",&ci_array_count_values},
 {0x4BAA5B688E6F6F27LL,0,1,"gd_info",&ci_gd_info},
 {0x0D4446B2DBC8EF39LL,0,0,"hphp_splfileinfo_getinode",&ci_hphp_splfileinfo_getinode},
 {0x496CF4113CEA8F39LL,0,1,"magicksetimagefilename",&ci_magicksetimagefilename},
 {0x7EE74F798791CF3BLL,0,1,"magickedgeimage",&ci_magickedgeimage},
 {0x41136A5F28E84F3CLL,0,1,"forward_static_call_array",&ci_forward_static_call_array},
 {0x1A9EFDD653DB8F3FLL,0,1,"pcntl_wstopsig",&ci_pcntl_wstopsig},
 {0x3B46305DA1154F42LL,0,1,"drawpopclippath",&ci_drawpopclippath},
 {0x5D3A31AB0E326F45LL,0,0,"crc32",&ci_crc32},
 {0x4E36A077234B8F45LL,0,0,"pixelgetblack",&ci_pixelgetblack},
 {0x79265AADD9A8AF45LL,0,1,"mcrypt_cbc",&ci_mcrypt_cbc},
 {0x079EA27F72594F46LL,0,1,"gzgets",&ci_gzgets},
 {0x7978A278AEAFAF50LL,0,1,"pixelgetmagenta",&ci_pixelgetmagenta},
 {0x7B965BB0B7A8EF53LL,0,1,"hphp_get_iostatus",&ci_hphp_get_iostatus},
 {0x621590803EC88F56LL,0,1,"imageline",&ci_imageline},
 {0x38246B6BDE246F59LL,0,1,"magickgetimagedispose",&ci_magickgetimagedispose},
 {0x24F698A8A4B5AF5BLL,0,1,"imagecolordeallocate",&ci_imagecolordeallocate},
 {0x703D339DD44E8F5FLL,0,1,"dom_element_get_elements_by_tag_name",&ci_dom_element_get_elements_by_tag_name},
 {0x4F1D2858AD31AF60LL,0,1,"imagecreatefromgd",&ci_imagecreatefromgd},
 {0x1FFD204252F60F63LL,0,1,"magicksetimageprofile",&ci_magicksetimageprofile},
 {0x6FFF1304EA444F66LL,0,1,"drawsetstrokemiterlimit",&ci_drawsetstrokemiterlimit},
 {0x319407AC92912F67LL,0,1,"ereg",&ci_ereg},
 {0x1670096FDE27AF6ALL,0,1,"rewind",&ci_rewind},
 {0x3A56371CDDEA0F6ELL,0,1,"gzgetc",&ci_gzgetc},
 {0x42C4EC9D9F782F6FLL,0,1,"htmlentities",&ci_htmlentities},
 {0x71557D108E5C0F70LL,0,0,"xml_set_object",&ci_xml_set_object},
 {0x68C257B62A36EF70LL,0,1,"magicksetimagebackgroundcolor",&ci_magicksetimagebackgroundcolor},
 {0x18BC9BF6D1E3CF74LL,0,1,"magickpreviewimages",&ci_magickpreviewimages},
 {0x4BE9D91DD8624F79LL,0,1,"money_format",&ci_money_format},
 {0x7B0E6DB649084F7ALL,0,1,"clearstatcache",&ci_clearstatcache},
 {0x5E3767128C04CF7FLL,0,1,"imap_open",&ci_imap_open},
 {0x7EF68B9A55222F85LL,0,1,"wandgetexceptionstring",&ci_wandgetexceptionstring},
 {0x13F52A829BAC0F89LL,0,1,"timezone_identifiers_list",&ci_timezone_identifiers_list},
 {0x3703D22147C24F8BLL,0,1,"pixelsetcyan",&ci_pixelsetcyan},
 {0x288D61E7DE28AF92LL,0,1,"ucwords",&ci_ucwords},
 {0x76B9D87BC7F02F94LL,0,1,"preg_match",&ci_preg_match},
 {0x6F9651265C096F97LL,0,1,"magickreadimages",&ci_magickreadimages},
 {0x66F1F0DB16C82F98LL,0,1,"imagesavealpha",&ci_imagesavealpha},
 {0x44244ECFB9F76F9BLL,0,1,"dom_document_create_element_ns",&ci_dom_document_create_element_ns},
 {0x03979AACDBB24FAFLL,0,1,"mailparse_msg_get_part",&ci_mailparse_msg_get_part},
 {0x4A0B5F4676578FB0LL,0,1,"imagecolorresolvealpha",&ci_imagecolorresolvealpha},
 {0x3900FDF1C97BEFB4LL,0,1,"drawrotate",&ci_drawrotate},
 {0x79D3B90DEF10AFB5LL,0,1,"spl_autoload_extensions",&ci_spl_autoload_extensions},
 {0x2B451EF5D52C4FB6LL,0,0,"array_diff",&ci_array_diff},
 {0x56C0CCB57BB6EFB6LL,0,1,"magicksetimageunits",&ci_magicksetimageunits},
 {0x0664323CB1CC2FBALL,0,1,"imagecolorset",&ci_imagecolorset},
 {0x0A8ED0466E41AFBCLL,0,1,"bzclose",&ci_bzclose},
 {0x70B38AB9EAE16FBFLL,0,1,"ini_set",&ci_ini_set},
 {0x6CA22E62D4762FC2LL,0,1,"magickpainttransparentimage",&ci_magickpainttransparentimage},
 {0x38498DD4C28D0FC5LL,0,1,"hphp_splfileinfo_getatime",&ci_hphp_splfileinfo_getatime},
 {0x38237A4515F42FCBLL,0,1,"array_pad",&ci_array_pad},
 {0x474566F3A2BE0FCDLL,0,1,"mcrypt_enc_is_block_algorithm",&ci_mcrypt_enc_is_block_algorithm},
 {0x3A3CFC1F001A6FCFLL,0,1,"magickreadimagefile",&ci_magickreadimagefile},
 {0x21104CCA2942AFD0LL,0,0,"fb_const_fetch",&ci_fb_const_fetch},
 {0x2EAA47FA6C3FEFD0LL,0,1,"drawgetstrokealpha",&ci_drawgetstrokealpha},
 {0x4970B72A182E4FD4LL,0,1,"readdir",&ci_readdir},
 {0x751283FE764CAFD5LL,0,1,"mysql_select_db",&ci_mysql_select_db},
 {0x43BA2CB702E68FE5LL,0,1,"thrift_protocol_read_compact",&ci_thrift_protocol_read_compact},
 {0x217067889854CFE7LL,0,1,"xmlwriter_start_dtd",&ci_xmlwriter_start_dtd},
 {0x1189B7C4F4874FF0LL,0,1,"php_check_syntax",&ci_php_check_syntax},
 {0x191ECE88E06E6FF5LL,0,1,"dom_node_is_supported",&ci_dom_node_is_supported},
 {0x7883232CD1A7CFF7LL,0,1,"dom_node_is_same_node",&ci_dom_node_is_same_node},
 {0x51647BC5C0A14FFCLL,0,1,"imap_clearflag_full",&ci_imap_clearflag_full},
 {0x32F8747E480CCFFELL,0,1,"connection_status",&ci_connection_status},
 {0x7585739E84DBF001LL,0,1,"imap_delete",&ci_imap_delete},
 {0x18A0F1EE8E249005LL,0,0,"msg_send",&ci_msg_send},
 {0x20D579E7E4131005LL,0,1,"imagecolorclosest",&ci_imagecolorclosest},
 {0x555D7A3FB939300ALL,0,1,"apache_setenv",&ci_apache_setenv},
 {0x40FA17130FA7100DLL,0,1,"openssl_seal",&ci_openssl_seal},
 {0x5623A698A728F016LL,0,1,"getlastmod",&ci_getlastmod},
 {0x03834225EBBC101ALL,0,1,"drawsettextundercolor",&ci_drawsettextundercolor},
 {0x145D42B2AB55D022LL,0,1,"drawmatte",&ci_drawmatte},
 {0x35C74650867B7023LL,0,1,"imagesetpixel",&ci_imagesetpixel},
 {0x48F35DFD653D7033LL,0,1,"pclose",&ci_pclose},
 {0x280EC96FB50A9035LL,0,1,"imap_ping",&ci_imap_ping},
 {0x40329F2A6B84D03BLL,0,1,"dom_node_lookup_prefix",&ci_dom_node_lookup_prefix},
 {0x32E6E5D3CCE3703ELL,0,0,"magickgetimagewidth",&ci_magickgetimagewidth},
 {0x43461C4D9130103ELL,0,0,"exit",&ci_exit},
 {0x67C1ED9B816E503ELL,0,1,"md5_file",&ci_md5_file},
 {0x79F162983C77F042LL,0,1,"gethostname",&ci_gethostname},
 {0x5ACCF9166CD9D043LL,0,1,"ftruncate",&ci_ftruncate},
 {0x047A8BF04DB51049LL,0,1,"range",&ci_range},
 {0x15A9EB33DA6E9053LL,0,0,"getimagesize",&ci_getimagesize},
 {0x07EB5C3A3BEA3053LL,0,1,"acosh",&ci_acosh},
 {0x32637D101E90B057LL,0,1,"hphp_get_call_info_extra",&ci_hphp_get_call_info_extra},
 {0x271AB768D202F05ALL,0,1,"mcrypt_module_is_block_algorithm",&ci_mcrypt_module_is_block_algorithm},
 {0x7BDA06BD1F8AD05BLL,0,1,"imap_scanmailbox",&ci_imap_scanmailbox},
 {0x4B70746F965E705FLL,0,1,"preg_last_error",&ci_preg_last_error},
 {0x0CE1918B30DF5067LL,0,1,"sys_getloadavg",&ci_sys_getloadavg},
 {0x04D1CF7E4592106FLL,0,0,"imap_mail_move",&ci_imap_mail_move},
 {0x4C6FD8808A62506FLL,0,1,"session_set_save_handler",&ci_session_set_save_handler},
 {0x3C466098FF7B5070LL,0,1,"mb_check_encoding",&ci_mb_check_encoding},
 {0x6B268C26E21C1078LL,0,1,"arsort",&ci_arsort},
 {0x08AA4EA901C9B079LL,0,1,"session_encode",&ci_session_encode},
 {0x53FD8C9AC3F4D084LL,0,1,"dangling_server_proxy_new_request",&ci_dangling_server_proxy_new_request},
 {0x255D919D501C5087LL,0,1,"dom_characterdata_delete_data",&ci_dom_characterdata_delete_data},
 {0x3E4AE974AFA9708ELL,0,1,"pixelsetquantumcolor",&ci_pixelsetquantumcolor},
 {0x673B36244DC87091LL,0,1,"closelog",&ci_closelog},
 {0x4AF87BA91163D09ELL,0,0,"mysql_db_name",&ci_mysql_db_name},
 {0x74F0D6D8F1F2709ELL,0,1,"drawsetstrokedashoffset",&ci_drawsetstrokedashoffset},
 {0x2B130322DEC4B09FLL,0,1,"pixelgetopacityquantum",&ci_pixelgetopacityquantum},
 {0x0DF945F12533F0A1LL,0,1,"abs",&ci_abs},
 {0x74C787060F7290A7LL,0,1,"icu_transliterate",&ci_icu_transliterate},
 {0x439DF153FC32D0ABLL,0,1,"printf",&ci_printf},
 {0x6E27DC1E74C5B0ACLL,0,1,"drawpathstart",&ci_drawpathstart},
 {0x4BBD5D8A6E0110AELL,0,0,"error_log",&ci_error_log},
 {0x47AB4A08446BD0AELL,0,1,"bcmod",&ci_bcmod},
 {0x3954FFED1E0650AFLL,0,1,"stream_register_wrapper",&ci_stream_register_wrapper},
 {0x5B9F8B3E1D8330B0LL,0,1,"stream_socket_sendto",&ci_stream_socket_sendto},
 {0x48BBFB59FB7F90B2LL,0,1,"iconv_strlen",&ci_iconv_strlen},
 {0x05A4C165810A30B8LL,0,1,"gzread",&ci_gzread},
 {0x3900350CD9D990BCLL,0,1,"imagecreatefromjpeg",&ci_imagecreatefromjpeg},
 {0x6EDC1E7A8D5710C0LL,0,1,"memcache_add_server",&ci_memcache_add_server},
 {0x6B477F3B9CDB10C5LL,0,1,"base64_decode",&ci_base64_decode},
 {0x1B06803DE15450D5LL,0,0,"hphp_create_continuation",&ci_hphp_create_continuation},
 {0x3BF44C6DECD790D5LL,0,1,"xmlwriter_start_dtd_entity",&ci_xmlwriter_start_dtd_entity},
 {0x79F2E516A3B070D8LL,0,1,"libxml_disable_entity_loader",&ci_libxml_disable_entity_loader},
 {0x08F6B727D60670D9LL,0,1,"magicksetimagedepth",&ci_magicksetimagedepth},
 {0x6F242340B2E930DALL,0,1,"hphp_splfileinfo_setfileclass",&ci_hphp_splfileinfo_setfileclass},
 {0x3801923AD84670DBLL,0,1,"apc_inc",&ci_apc_inc},
 {0x2E4612DF112010E0LL,0,1,"imagecopyresized",&ci_imagecopyresized},
 {0x2B9425038D4230E4LL,0,1,"imagecreatefromxpm",&ci_imagecreatefromxpm},
 {0x79E6FD78989B10E7LL,0,0,"tmpfile",&ci_tmpfile},
 {0x59DE3A26AFF570E7LL,0,1,"magickshaveimage",&ci_magickshaveimage},
 {0x17CB328F55FDF0E8LL,0,1,"drawsetstrokeantialias",&ci_drawsetstrokeantialias},
 {0x509C9542BE5E50F2LL,0,1,"openssl_get_md_methods",&ci_openssl_get_md_methods},
 {0x315CCBC8C5C7D0F3LL,0,1,"xmlwriter_write_raw",&ci_xmlwriter_write_raw},
 {0x1FFCBCF1927D7103LL,0,1,"posix_setpgid",&ci_posix_setpgid},
 {0x509B763CDAD9D105LL,0,1,"gethostbyaddr",&ci_gethostbyaddr},
 {0x60B8B61133F59108LL,0,1,"quoted_printable_decode",&ci_quoted_printable_decode},
 {0x0B1BA48B0CFB1112LL,0,0,"strval",&ci_strval},
 {0x28C44527BD59D112LL,0,1,"is_link",&ci_is_link},
 {0x02A4724E6A881114LL,0,1,"mb_decode_numericentity",&ci_mb_decode_numericentity},
 {0x3AB82455A70F5119LL,0,0,"imagecolortransparent",&ci_imagecolortransparent},
 {0x2B31A877824A1119LL,0,1,"stristr",&ci_stristr},
 {0x070A63F6A0B8711CLL,0,1,"array_walk_recursive",&ci_array_walk_recursive},
 {0x291088666B8BF11DLL,0,1,"drawsetfontfamily",&ci_drawsetfontfamily},
 {0x4C70C24C84F5511FLL,0,1,"magicksetimagegamma",&ci_magicksetimagegamma},
 {0x7A8B3EC0235EF125LL,0,1,"magickprofileimage",&ci_magickprofileimage},
 {0x6A7E0B15FF689133LL,0,1,"mb_ereg_search_init",&ci_mb_ereg_search_init},
 {0x5666016FA3C0F137LL,0,1,"socket_clear_error",&ci_socket_clear_error},
 {0x2676902697E37138LL,0,1,"xmlwriter_start_comment",&ci_xmlwriter_start_comment},
 {0x2A57E5D29D73D13ALL,0,1,"register_tick_function",&ci_register_tick_function},
 {0x3E0C793B95A9713BLL,0,1,"imap_bodystruct",&ci_imap_bodystruct},
 {0x5BFDE63106CE713FLL,0,1,"dom_element_get_attribute",&ci_dom_element_get_attribute},
 {0x0D0BEC16D8773147LL,0,1,"hphp_scalar_typehints_enabled",&ci_hphp_scalar_typehints_enabled},
 {0x61A61E91C477514FLL,0,0,"chop",&ci_chop},
 {0x7863294A8F33D14FLL,0,1,"file",&ci_file},
 {0x26DD46D8C1F47152LL,0,1,"ldap_bind",&ci_ldap_bind},
 {0x36D6B73D289DD163LL,0,1,"date_sunset",&ci_date_sunset},
 {0x14E46EA3CBCFB168LL,0,1,"magickgetsamplingfactors",&ci_magickgetsamplingfactors},
 {0x15B61E061268B16ELL,0,1,"magickenhanceimage",&ci_magickenhanceimage},
 {0x59FE6A862E1CB172LL,0,1,"get_browser",&ci_get_browser},
 {0x345E070844E3F174LL,0,1,"create_function",&ci_create_function},
 {0x174DB93CAF0D1177LL,0,1,"hphp_splfileinfo___tostring",&ci_hphp_splfileinfo___tostring},
 {0x6884FAF0D1EF3179LL,0,1,"posix_mknod",&ci_posix_mknod},
 {0x3E1343B4A3AD717CLL,0,1,"magickgettextascent",&ci_magickgettextascent},
 {0x4EF9496D16F9D17FLL,0,1,"xmlwriter_start_element_ns",&ci_xmlwriter_start_element_ns},
 {0x2227E30BAB23B181LL,0,1,"dom_xpath_query",&ci_dom_xpath_query},
 {0x130B62A8C77F3182LL,0,1,"mb_ereg_search_getregs",&ci_mb_ereg_search_getregs},
 {0x13E90F8874839185LL,0,1,"ob_get_status",&ci_ob_get_status},
 {0x5DB5E45860801186LL,0,1,"openssl_csr_export",&ci_openssl_csr_export},
 {0x0CC53B2F0D38D189LL,0,1,"timezone_offset_get",&ci_timezone_offset_get},
 {0x15AD9CE061C75197LL,0,1,"timezone_transitions_get",&ci_timezone_transitions_get},
 {0x7FF6C2A693CE119BLL,0,1,"magickcyclecolormapimage",&ci_magickcyclecolormapimage},
 {0x6FB5104FC97A31A0LL,0,1,"drawpathcurvetorelative",&ci_drawpathcurvetorelative},
 {0x2A9015499A2EB1A2LL,0,1,"fnmatch",&ci_fnmatch},
 {0x735B81C45C2971A3LL,0,1,"drawgetfillopacity",&ci_drawgetfillopacity},
 {0x37B4612178EF91A6LL,0,1,"memcache_get_version",&ci_memcache_get_version},
 {0x740DC7FFAD8BB1A9LL,0,1,"imagecolorat",&ci_imagecolorat},
 {0x11A5C66A3D0711AALL,0,1,"apc_sma_info",&ci_apc_sma_info},
 {0x50538F37398AF1ADLL,0,0,"ldap_get_option",&ci_ldap_get_option},
 {0x5A6EFF8C71A431ADLL,0,1,"socket_get_status",&ci_socket_get_status},
 {0x5B1F9C2E9FE111AFLL,0,1,"fb_utf8ize",&ci_fb_utf8ize},
 {0x4B3F35310DEA31BDLL,0,1,"socket_create_pair",&ci_socket_create_pair},
 {0x681CD0E7D9DB71BFLL,0,1,"pow",&ci_pow},
 {0x02103322F88C71C2LL,0,1,"pixelgetcolorcount",&ci_pixelgetcolorcount},
 {0x3617DAE43A23D1C4LL,0,1,"xml_parser_set_option",&ci_xml_parser_set_option},
 {0x188D37410B6051C6LL,0,1,"session_unregister",&ci_session_unregister},
 {0x11C0B5DA066891C8LL,0,1,"preg_match_all",&ci_preg_match_all},
 {0x3DF488365DAAF1CCLL,0,1,"drawgettextencoding",&ci_drawgettextencoding},
 {0x37340B707E7CD1CDLL,0,1,"magickgetimagebordercolor",&ci_magickgetimagebordercolor},
 {0x2E7741B5440FB1CELL,0,1,"magicksetlastiterator",&ci_magicksetlastiterator},
 {0x595E413CAA7E11CFLL,0,1,"qlzcompress",&ci_qlzcompress},
 {0x03012F3DDD7AB1D0LL,0,1,"getservbyport",&ci_getservbyport},
 {0x219F3257BA3371D4LL,0,1,"decbin",&ci_decbin},
 {0x7A69D0078F4F31D9LL,0,1,"ldap_start_tls",&ci_ldap_start_tls},
 {0x0482E069503A91DALL,0,1,"posix_setgid",&ci_posix_setgid},
 {0x3FEBBC0DA79F31DBLL,0,1,"fb_call_user_func_safe",&ci_fb_call_user_func_safe},
 {0x1D626FADDFCA11DCLL,0,0,"imap_num_msg",&ci_imap_num_msg},
 {0x14FB46333D6D11DCLL,0,1,"xml_set_default_handler",&ci_xml_set_default_handler},
 {0x03A183D73942B1DDLL,0,1,"apc_filehits",&ci_apc_filehits},
 {0x44563CC8FA9B11DELL,0,1,"memcache_set_server_params",&ci_memcache_set_server_params},
 {0x7403251412E931DFLL,0,1,"syslog",&ci_syslog},
 {0x5932D2750A8A91E0LL,0,1,"magickgetpackagename",&ci_magickgetpackagename},
 {0x2771C632A60371E1LL,0,0,"ftok",&ci_ftok},
 {0x0ED729A444C611E1LL,0,1,"openssl_x509_read",&ci_openssl_x509_read},
 {0x08F7A6C37FC7B1E4LL,0,1,"shm_get_var",&ci_shm_get_var},
 {0x7F843353646391E8LL,0,1,"rad2deg",&ci_rad2deg},
 {0x46AFE55982B371F2LL,0,1,"posix_geteuid",&ci_posix_geteuid},
 {0x11BB3CDC5E4971F3LL,0,1,"xmlwriter_end_pi",&ci_xmlwriter_end_pi},
 {0x542FBDCF960031F5LL,0,0,"fprintf",&ci_fprintf},
 {0x02ABC00C046291F5LL,0,1,"imageellipse",&ci_imageellipse},
 {0x135D5CBF936B11FALL,0,1,"msg_receive",&ci_msg_receive},
 {0x5304E6B47ED0B1FDLL,0,1,"srand",&ci_srand},
 {0x41B15671649A320CLL,0,0,"curl_multi_getcontent",&ci_curl_multi_getcontent},
 {0x257BEA4D6DC9920CLL,0,1,"ctype_alnum",&ci_ctype_alnum},
 {0x533642044A00520ELL,0,1,"pixelgetmagentaquantum",&ci_pixelgetmagentaquantum},
 {0x53631CF3A937320FLL,0,0,"get_class_methods",&ci_get_class_methods},
 {0x08DC8BF3ADAE520FLL,0,1,"getallheaders",&ci_getallheaders},
 {0x15EF510022CAF210LL,0,0,"xml_parser_create_ns",&ci_xml_parser_create_ns},
 {0x2D41D7F8F4113210LL,0,1,"sinh",&ci_sinh},
 {0x7D85E9FACB92D214LL,0,1,"magickgetimageblob",&ci_magickgetimageblob},
 {0x56C95225813A5218LL,0,0,"memory_get_usage",&ci_memory_get_usage},
 {0x4D63F2C9AAB79218LL,0,1,"fb_renamed_functions",&ci_fb_renamed_functions},
 {0x72C0C89D897E721ALL,0,1,"magicksetimagetype",&ci_magicksetimagetype},
 {0x482D58D8EE3A521CLL,0,1,"imap_lsub",&ci_imap_lsub},
 {0x007B6BD94D767226LL,0,1,"hphp_splfileobject_fpassthru",&ci_hphp_splfileobject_fpassthru},
 {0x5A26F00A81BA5227LL,0,1,"xmlwriter_start_attribute_ns",&ci_xmlwriter_start_attribute_ns},
 {0x44911AEE34D63228LL,0,0,"time_sleep_until",&ci_time_sleep_until},
 {0x7CD3C6F6495D3228LL,0,1,"memcache_get_stats",&ci_memcache_get_stats},
 {0x0B7559F53F31D22ELL,0,1,"fb_stubout_intercept_handler",&ci_fb_stubout_intercept_handler},
 {0x7C07D66F70E43231LL,0,1,"mailparse_determine_best_xfer_encoding",&ci_mailparse_determine_best_xfer_encoding},
 {0x23C478B2D95F3234LL,0,1,"dom_element_has_attribute_ns",&ci_dom_element_has_attribute_ns},
 {0x5542AABF33A2F236LL,0,1,"stream_filter_remove",&ci_stream_filter_remove},
 {0x679ABBE5A08C523ALL,0,1,"xml_parse_into_struct",&ci_xml_parse_into_struct},
 {0x78183A24F2ACB243LL,0,1,"strtotime",&ci_strtotime},
 {0x4AE39118E7F65248LL,0,1,"fb_enable_html_taint_trace",&ci_fb_enable_html_taint_trace},
 {0x30747B708DA1D250LL,0,1,"pushdrawingwand",&ci_pushdrawingwand},
 {0x0384346A8857D256LL,0,1,"clonemagickwand",&ci_clonemagickwand},
 {0x2F8F40E95EDF925BLL,0,1,"sizeof",&ci_sizeof},
 {0x261F403C4174D264LL,0,1,"posix_getsid",&ci_posix_getsid},
 {0x38B376B9D9091267LL,0,1,"xmlwriter_write_attribute",&ci_xmlwriter_write_attribute},
 {0x188DF1EB5FD1B26CLL,0,1,"mailparse_msg_parse_file",&ci_mailparse_msg_parse_file},
 {0x5672949384A4F26ELL,0,1,"stream_filter_register",&ci_stream_filter_register},
 {0x08CC1E49661DB273LL,0,0,"dom_element_get_attribute_ns",&ci_dom_element_get_attribute_ns},
 {0x61C991F216E85273LL,0,1,"inet_ntop",&ci_inet_ntop},
 {0x39E05F957C7DD27ALL,0,1,"magickgetimagedepth",&ci_magickgetimagedepth},
 {0x0F7E33D551E0727CLL,0,1,"posix_getpid",&ci_posix_getpid},
 {0x57E8781CF111727FLL,0,1,"fileowner",&ci_fileowner},
 {0x0C61AE35699F1280LL,0,1,"imap_thread",&ci_imap_thread},
 {0x0881440DCF5D3281LL,0,1,"magickflattenimages",&ci_magickflattenimages},
 {0x68272A37CC9E729ALL,0,1,"mb_strtolower",&ci_mb_strtolower},
 {0x4A09634AE6DFF29BLL,0,1,"fileperms",&ci_fileperms},
 {0x743EA4BF2CC8F2A3LL,0,0,"mysql_field_type",&ci_mysql_field_type},
 {0x10E7B5A0E29CF2A3LL,0,1,"bcscale",&ci_bcscale},
 {0x73EF3A19F76872A6LL,0,1,"iconv_strrpos",&ci_iconv_strrpos},
 {0x5409127FEDE332A8LL,0,1,"exif_imagetype",&ci_exif_imagetype},
 {0x36AB9E6AA687F2AELL,0,1,"xmlwriter_start_dtd_element",&ci_xmlwriter_start_dtd_element},
 {0x0E9C9B409F94B2B6LL,0,1,"setcookie",&ci_setcookie},
 {0x4A3D2113D3DFD2BALL,0,1,"newpixelwandarray",&ci_newpixelwandarray},
 {0x41F7E2214DDE12BCLL,0,1,"mcrypt_enc_self_test",&ci_mcrypt_enc_self_test},
 {0x327C865E52FD12BDLL,0,1,"ldap_get_values_len",&ci_ldap_get_values_len},
 {0x72D6F9B3661AB2BELL,0,1,"magickgetimage",&ci_magickgetimage},
 {0x5B7C1B74BA3452C0LL,0,1,"newpixelregioniterator",&ci_newpixelregioniterator},
 {0x446D76A95365D2C3LL,0,1,"pixelgetyellow",&ci_pixelgetyellow},
 {0x1C7B8161F3C412C4LL,0,1,"dom_document_create_document_fragment",&ci_dom_document_create_document_fragment},
 {0x407EF03C23BF92CCLL,0,1,"drawpathellipticarcabsolute",&ci_drawpathellipticarcabsolute},
 {0x4ACE27EC476632CFLL,0,1,"apc_bin_dumpfile",&ci_apc_bin_dumpfile},
 {0x4D04C580CF9212D5LL,0,1,"posix_getgroups",&ci_posix_getgroups},
 {0x06E9C984B5F0B2D6LL,0,1,"furchash_hphp_ext",&ci_furchash_hphp_ext},
 {0x56C4896BA2FF52D8LL,0,1,"drawsetstrokeopacity",&ci_drawsetstrokeopacity},
 {0x5C6A85B448C352DALL,0,1,"posix_uname",&ci_posix_uname},
 {0x4AEC19D75BF652E2LL,0,1,"magickremoveimage",&ci_magickremoveimage},
 {0x5F2E4347770D32E9LL,0,1,"hphp_get_method_info",&ci_hphp_get_method_info},
 {0x1B9FC9E27B8AB2EDLL,0,1,"memcache_flush",&ci_memcache_flush},
 {0x2EE56D216BB832F2LL,0,1,"time_nanosleep",&ci_time_nanosleep},
 {0x418EC805C5FD32F4LL,0,1,"mcrypt_get_key_size",&ci_mcrypt_get_key_size},
 {0x319EF52B36AAB2F9LL,0,1,"posix_isatty",&ci_posix_isatty},
 {0x4D393D30CE1112FBLL,0,1,"drawpathmovetoabsolute",&ci_drawpathmovetoabsolute},
 {0x208B66A8731F72FELL,0,0,"sem_get",&ci_sem_get},
 {0x755A9950B65472FELL,0,1,"drawgetgravity",&ci_drawgetgravity},
 {0x0103FE1E2C307302LL,0,1,"socket_recvfrom",&ci_socket_recvfrom},
 {0x65D40C6B4842F305LL,0,1,"clearpixelwand",&ci_clearpixelwand},
 {0x689D60184DD81306LL,0,1,"htmlspecialchars_decode",&ci_htmlspecialchars_decode},
 {0x2D2BC1125ECA930BLL,0,1,"dom_document_relaxng_validate_file",&ci_dom_document_relaxng_validate_file},
 {0x553940FCE453330CLL,0,1,"hphp_splfileobject_getmaxlinelen",&ci_hphp_splfileobject_getmaxlinelen},
 {0x141EDCAE1D155311LL,0,1,"xbox_get_thread_time",&ci_xbox_get_thread_time},
 {0x4F1E663AE18FD315LL,0,1,"msg_remove_queue",&ci_msg_remove_queue},
 {0x27FF9DB54420531ELL,0,1,"xml_error_string",&ci_xml_error_string},
 {0x5E5E4F998C8E7324LL,0,1,"pcntl_wifexited",&ci_pcntl_wifexited},
 {0x73FEB3BF75FFB328LL,0,1,"ctype_space",&ci_ctype_space},
 {0x2BDB1EE3869E132BLL,0,1,"restore_error_handler",&ci_restore_error_handler},
 {0x7DD6461A6290B32FLL,0,1,"mysql_real_escape_string",&ci_mysql_real_escape_string},
 {0x1601C1826E90B330LL,0,1,"strptime",&ci_strptime},
 {0x6794CFB89DEEF343LL,0,1,"curl_exec",&ci_curl_exec},
 {0x45FAE3D08E96B345LL,0,1,"curl_errno",&ci_curl_errno},
 {0x208BB4C3C0BA534ALL,0,1,"xmlwriter_write_dtd_element",&ci_xmlwriter_write_dtd_element},
 {0x57A9E8878872D34BLL,0,1,"parse_ini_file",&ci_parse_ini_file},
 {0x0644E5FB91C8134CLL,0,1,"array_udiff",&ci_array_udiff},
 {0x5C8B3B9FA833934FLL,0,0,"ldap_first_attribute",&ci_ldap_first_attribute},
 {0x4F2D0EFF0D4B534FLL,0,1,"fb_get_taint",&ci_fb_get_taint},
 {0x2B422699C3A57351LL,0,1,"sha1",&ci_sha1},
 {0x501F4DF5C8997354LL,0,0,"hphp_get_property",&ci_hphp_get_property},
 {0x77EB4D2F5BDDB354LL,0,1,"magickgetimageresolution",&ci_magickgetimageresolution},
 {0x1AC48909BEEF935BLL,0,1,"func_get_arg",&ci_func_get_arg},
 {0x5D406167C673D368LL,0,1,"magickcompareimages",&ci_magickcompareimages},
 {0x7CE90898E882F36ELL,0,1,"pixelsetyellow",&ci_pixelsetyellow},
 {0x7107AE03689F5372LL,0,1,"hphp_invoke",&ci_hphp_invoke},
 {0x34BAEFD8AE59D378LL,0,1,"hphp_set_error_page",&ci_hphp_set_error_page},
 {0x44C1BC500D175384LL,0,1,"wandgetexception",&ci_wandgetexception},
 {0x0B0B8765A4CDD385LL,0,0,"hphp_splfileobject_fgets",&ci_hphp_splfileobject_fgets},
 {0x57554E082E0ED385LL,0,0,"pcntl_exec",&ci_pcntl_exec},
 {0x7C5CA3E2E3C8F385LL,0,1,"magickflipimage",&ci_magickflipimage},
 {0x589E24C7664D5386LL,0,1,"doubleval",&ci_doubleval},
 {0x05B0266DB314D389LL,0,1,"hphp_clear_hardware_events",&ci_hphp_clear_hardware_events},
 {0x32354CC291ECF38BLL,0,1,"fb_intercept",&ci_fb_intercept},
 {0x7F18BA1FBD95B38CLL,0,1,"hphp_directoryiterator_next",&ci_hphp_directoryiterator_next},
 {0x25FA64929C619391LL,0,1,"asin",&ci_asin},
 {0x2052D8D4822EF392LL,0,1,"is_subclass_of",&ci_is_subclass_of},
 {0x7B0552A224E27395LL,0,1,"bcsqrt",&ci_bcsqrt},
 {0x66DA89629BA5D399LL,0,1,"posix_getgrgid",&ci_posix_getgrgid},
 {0x4C24BC37D807D39ALL,0,1,"collator_get_strength",&ci_collator_get_strength},
 {0x5B33B55D4B7E339BLL,0,1,"fpassthru",&ci_fpassthru},
 {0x27AD0D17AA7FB39ELL,0,1,"ldap_set_rebind_proc",&ci_ldap_set_rebind_proc},
 {0x4019A6916456339FLL,0,1,"dom_node_remove_child",&ci_dom_node_remove_child},
 {0x0A2A4AA078D433A2LL,0,1,"hexdec",&ci_hexdec},
 {0x1676FB393F8493A4LL,0,1,"constant",&ci_constant},
 {0x40E0D496EE29B3A6LL,0,1,"call_user_func_array",&ci_call_user_func_array},
 {0x4120B8157ED413A8LL,0,1,"i18n_loc_set_strength",&ci_i18n_loc_set_strength},
 {0x6077CFE09EE4D3B3LL,0,1,"session_save_path",&ci_session_save_path},
 {0x6E6C0E9A715073B6LL,0,0,"dom_xpath_register_php_functions",&ci_dom_xpath_register_php_functions},
 {0x6C07640F7C5BD3B6LL,0,1,"imagettfbbox",&ci_imagettfbbox},
 {0x0629158C42C893BCLL,0,1,"compact",&ci_compact},
 {0x49A34964289453BELL,0,1,"eregi",&ci_eregi},
 {0x0E38CDC93E5893BFLL,0,1,"magicksetimagemattecolor",&ci_magicksetimagemattecolor},
 {0x4D100C70E86593C8LL,0,1,"stream_set_write_buffer",&ci_stream_set_write_buffer},
 {0x0173CC6FACAB93CBLL,0,1,"quotemeta",&ci_quotemeta},
 {0x02BEFBEE8287D3CELL,0,1,"get_magic_quotes_runtime",&ci_get_magic_quotes_runtime},
 {0x4363FF80EEC953D2LL,0,0,"imap_undelete",&ci_imap_undelete},
 {0x67C155632E5373D2LL,0,1,"mailparse_msg_create",&ci_mailparse_msg_create},
 {0x0A8D4FAF266973D3LL,0,1,"bcpow",&ci_bcpow},
 {0x382B5B1EF00153D7LL,0,1,"imagecreatefrompng",&ci_imagecreatefrompng},
 {0x7BCD0D27FFD953DCLL,0,1,"imap_num_recent",&ci_imap_num_recent},
 {0x0D3C8F00B0C633EALL,0,1,"inet_pton",&ci_inet_pton},
 {0x5EFE291585A713F1LL,0,1,"method_exists",&ci_method_exists},
 {0x41A19AE18BC8B3F2LL,0,0,"curl_error",&ci_curl_error},
 {0x0FE12E46BC9853F2LL,0,0,"stream_filter_append",&ci_stream_filter_append},
 {0x696241660648B3F2LL,0,1,"magickwhitethresholdimage",&ci_magickwhitethresholdimage},
 {0x26D53A77483EF3F4LL,0,1,"drawbezier",&ci_drawbezier},
 {0x43F22CB4E3E8F3F7LL,0,1,"apache_note",&ci_apache_note},
 {0x514EA9C8FF5B33F8LL,0,0,"posix_getrlimit",&ci_posix_getrlimit},
 {0x4C024573FCD5B3F8LL,0,1,"var_dump",&ci_var_dump},
 {0x1B217E78CBC713FALL,0,1,"zend_thread_id",&ci_zend_thread_id},
 {0x36B9C440B1881401LL,0,1,"fmod",&ci_fmod},
 {0x6DC61C51FA1D340ALL,0,1,"show_source",&ci_show_source},
 {0x6C2CE092B900D40BLL,0,1,"hphp_splfileinfo___construct",&ci_hphp_splfileinfo___construct},
 {0x152C7161567F940DLL,0,1,"func_num_args",&ci_func_num_args},
 {0x56EC1A6732D07413LL,0,0,"drawgetfontsize",&ci_drawgetfontsize},
 {0x20C24D873DC65413LL,0,1,"openssl_csr_get_subject",&ci_openssl_csr_get_subject},
 {0x47279C717370B41BLL,0,1,"acos",&ci_acos},
 {0x3E4E7C561D3A541ELL,0,1,"fgetss",&ci_fgetss},
 {0x301963016A91741FLL,0,1,"hphp_stats",&ci_hphp_stats},
 {0x4C9108B5A5807423LL,0,1,"drawsetfillcolor",&ci_drawsetfillcolor},
 {0x161D8EA3339AB426LL,0,1,"apc_cas",&ci_apc_cas},
 {0x12D324CC744BF42CLL,0,1,"pixelgetcolorasstring",&ci_pixelgetcolorasstring},
 {0x333D1E2E28B0942DLL,0,1,"imagejpeg",&ci_imagejpeg},
 {0x6829094421CDB433LL,0,1,"touch",&ci_touch},
 {0x044386A0E8B25435LL,0,0,"drawgetclipunits",&ci_drawgetclipunits},
 {0x75DAFEF5BFEF1435LL,0,1,"imagesetstyle",&ci_imagesetstyle},
 {0x1AAF02CF6DEBB437LL,0,1,"magickdeconstructimages",&ci_magickdeconstructimages},
 {0x34C52EF423EFD439LL,0,1,"proc_open",&ci_proc_open},
 {0x5247425ED698B440LL,0,1,"hphp_thread_is_warmup_enabled",&ci_hphp_thread_is_warmup_enabled},
 {0x05892E3C5B9EB441LL,0,1,"closedir",&ci_closedir},
 {0x3D3BE7A6EBB6544ELL,0,1,"openssl_cipher_iv_length",&ci_openssl_cipher_iv_length},
 {0x7539134E1CC61451LL,0,1,"xmlwriter_start_cdata",&ci_xmlwriter_start_cdata},
 {0x436AB52B2099145CLL,0,1,"ldap_close",&ci_ldap_close},
 {0x0ED191E71A60545ELL,0,1,"magicksetfirstiterator",&ci_magicksetfirstiterator},
 {0x32643AE461D3F46ALL,0,1,"mailparse_stream_encode",&ci_mailparse_stream_encode},
 {0x4F39BD300305746CLL,0,0,"hphp_splfileobject_key",&ci_hphp_splfileobject_key},
 {0x07D959A8C0CF546CLL,0,1,"stream_wrapper_unregister",&ci_stream_wrapper_unregister},
 {0x738D381800CE946DLL,0,0,"ldap_parse_result",&ci_ldap_parse_result},
 {0x5229C0069FD7D46DLL,0,1,"vfprintf",&ci_vfprintf},
 {0x5B8F2ABBB480346FLL,0,1,"bzwrite",&ci_bzwrite},
 {0x18666906A8001477LL,0,1,"array_diff_assoc",&ci_array_diff_assoc},
 {0x080594ABE715B478LL,0,0,"hphp_splfileobject_current",&ci_hphp_splfileobject_current},
 {0x6497CC8295DDB478LL,0,1,"fb_thrift_unserialize",&ci_fb_thrift_unserialize},
 {0x4859AF715D5A3479LL,0,1,"magickmagnifyimage",&ci_magickmagnifyimage},
 {0x2FA7269AB0E1147CLL,0,1,"mysql_field_seek",&ci_mysql_field_seek},
 {0x1D583AA4F7F6547ELL,0,1,"drawpathlinetorelative",&ci_drawpathlinetorelative},
 {0x68AE04B02253B47FLL,0,1,"mb_parse_str",&ci_mb_parse_str},
 {0x1876287F59CEB481LL,0,1,"bzerror",&ci_bzerror},
 {0x4590C853C2027482LL,0,1,"magickembossimage",&ci_magickembossimage},
 {0x250DD3D58EA37485LL,0,1,"gmstrftime",&ci_gmstrftime},
 {0x4F7EAF5B37663489LL,0,1,"magickgetimageredprimary",&ci_magickgetimageredprimary},
 {0x7E88764A1DE8548ALL,0,1,"drawgetstrokewidth",&ci_drawgetstrokewidth},
 {0x5860ACF621DD948BLL,0,1,"is_file",&ci_is_file},
 {0x4162939E6335F48DLL,0,0,"xhprof_network_disable",&ci_xhprof_network_disable},
 {0x23511F83C2BC548DLL,0,1,"header",&ci_header},
 {0x56377FCC2447D493LL,0,1,"magicksetimagepixels",&ci_magicksetimagepixels},
 {0x7E1803843F88B495LL,0,1,"openssl_get_cipher_methods",&ci_openssl_get_cipher_methods},
 {0x353E2A635A47F497LL,0,0,"evhttp_get",&ci_evhttp_get},
 {0x5388045C2D13D497LL,0,1,"mysql_num_fields",&ci_mysql_num_fields},
 {0x18BE9B1C2DE6D4A5LL,0,1,"imagexbm",&ci_imagexbm},
 {0x386378F2BA3234A9LL,0,1,"magickevaluateimage",&ci_magickevaluateimage},
 {0x42463E7E5C3434AFLL,0,0,"mb_strrichr",&ci_mb_strrichr},
 {0x6AC751181531F4AFLL,0,1,"simplexml_load_string",&ci_simplexml_load_string},
 {0x0E11D317044974B0LL,0,1,"magickgetnumberimages",&ci_magickgetnumberimages},
 {0x060619D7A1B5F4B1LL,0,1,"checkdate",&ci_checkdate},
 {0x57034CAD772AF4B3LL,0,1,"magickgetimagechannelmean",&ci_magickgetimagechannelmean},
 {0x3DE291DCBA5134B6LL,0,0,"dom_document_create_element",&ci_dom_document_create_element},
 {0x12A9166E68DCF4B6LL,0,1,"pixelgetgreen",&ci_pixelgetgreen},
 {0x7EEBC81AF9BC54B7LL,0,1,"xml_parser_free",&ci_xml_parser_free},
 {0x6B49D11E633274BALL,0,1,"fopen",&ci_fopen},
 {0x5BA371A93F60F4BDLL,0,1,"use_soap_error_handler",&ci_use_soap_error_handler},
 {0x4A24DB9D6B0334C4LL,0,1,"hphp_recursivedirectoryiterator_next",&ci_hphp_recursivedirectoryiterator_next},
 {0x34A38DDF2CD914C5LL,0,1,"long2ip",&ci_long2ip},
 {0x1B8BBFC882FDB4C8LL,0,1,"magicktintimage",&ci_magicktintimage},
 {0x02B0E99C1E68F4CDLL,0,1,"imap_createmailbox",&ci_imap_createmailbox},
 {0x29EE24C41FD3D4D1LL,0,1,"mysql_field_name",&ci_mysql_field_name},
 {0x19ECDD5A937DD4D6LL,0,1,"mailparse_msg_get_part_data",&ci_mailparse_msg_get_part_data},
 {0x1301F911ED6D54D8LL,0,0,"is_nan",&ci_is_nan},
 {0x575C5AE3D2A694D8LL,0,0,"ob_end_clean",&ci_ob_end_clean},
 {0x14BF763DDDC014D8LL,0,0,"imagepsencodefont",&ci_imagepsencodefont},
 {0x56B908FC91C834D8LL,0,1,"magickflopimage",&ci_magickflopimage},
 {0x1E6E2E538A0754DALL,0,1,"xbox_process_call_message",&ci_xbox_process_call_message},
 {0x747A7F585CD694DFLL,0,1,"zend_version",&ci_zend_version},
 {0x1449EC590AFFB4E0LL,0,1,"nzuncompress",&ci_nzuncompress},
 {0x7D57A0D72D6254E3LL,0,1,"ob_implicit_flush",&ci_ob_implicit_flush},
 {0x5895ADDD91F354EELL,0,1,"hphp_thread_set_warmup_enabled",&ci_hphp_thread_set_warmup_enabled},
 {0x41276F8DE35354F2LL,0,1,"dom_document_get_elements_by_tag_name",&ci_dom_document_get_elements_by_tag_name},
 {0x436B36C5EB8DB4F4LL,0,1,"mcrypt_generic",&ci_mcrypt_generic},
 {0x112A0ACDD8B9D4F5LL,0,1,"mb_list_mime_names",&ci_mb_list_mime_names},
 {0x4FC9FE38A748B507LL,0,1,"intl_get_error_message",&ci_intl_get_error_message},
 {0x63A08D6AD1209508LL,0,1,"magickgetexception",&ci_magickgetexception},
 {0x3C0304A55503D511LL,0,1,"magickgetimageiterations",&ci_magickgetimageiterations},
 {0x772E8BF114FEF513LL,0,1,"eregi_replace",&ci_eregi_replace},
 {0x100385A0988FD514LL,0,1,"magickgetfilename",&ci_magickgetfilename},
 {0x7DA98E0379D33522LL,0,1,"chdir",&ci_chdir},
 {0x230FE1D6EC599525LL,0,1,"link",&ci_link},
 {0x1AB55BBA0967952CLL,0,1,"mb_convert_variables",&ci_mb_convert_variables},
 {0x6770E2559C9A152FLL,0,1,"openssl_private_decrypt",&ci_openssl_private_decrypt},
 {0x6776C27C6123D531LL,0,1,"dl",&ci_dl},
 {0x6193A26936F4D532LL,0,0,"disk_total_space",&ci_disk_total_space},
 {0x684966A7B9C15532LL,0,1,"hphp_get_iterator",&ci_hphp_get_iterator},
 {0x6C87406DDC0AB535LL,0,1,"mcrypt_ecb",&ci_mcrypt_ecb},
 {0x0E80D04691227536LL,0,1,"eval",&ci_eval},
 {0x557C72DE98679537LL,0,0,"hash_update_stream",&ci_hash_update_stream},
 {0x0830FF7C379D7537LL,0,1,"dom_text_split_text",&ci_dom_text_split_text},
 {0x3C88F0FAC3EDD539LL,0,1,"phpversion",&ci_phpversion},
 {0x5CA55E62F2A5953CLL,0,1,"drawgetstrokeopacity",&ci_drawgetstrokeopacity},
 {0x36A80B48E08B753ELL,0,1,"implode",&ci_implode},
 {0x0962EACAE0F0B543LL,0,1,"hphp_splfileinfo_getlinktarget",&ci_hphp_splfileinfo_getlinktarget},
 {0x4D397FE5D0C0B544LL,0,1,"magickmedianfilterimage",&ci_magickmedianfilterimage},
 {0x40CE61115E11154BLL,0,1,"msg_stat_queue",&ci_msg_stat_queue},
 {0x1D011CB0E810D54CLL,0,1,"pdo_drivers",&ci_pdo_drivers},
 {0x0F0702D91EAFB54DLL,0,1,"drawgettextantialias",&ci_drawgettextantialias},
 {0x30DE78E7131B954FLL,0,1,"furchash_hphp_ext_supported",&ci_furchash_hphp_ext_supported},
 {0x268EE73DB2EA555ALL,0,1,"get_object_vars",&ci_get_object_vars},
 {0x5749AD20CAFCD55CLL,0,0,"pixelgetbluequantum",&ci_pixelgetbluequantum},
 {0x3BE6E7D13F22355CLL,0,1,"mysql_next_result",&ci_mysql_next_result},
 {0x1B1B2D70792D9563LL,0,1,"mysql_get_client_info",&ci_mysql_get_client_info},
 {0x6E2FDBD28F895566LL,0,1,"timezone_abbreviations_list",&ci_timezone_abbreviations_list},
 {0x016722439BBA756FLL,0,1,"filetype",&ci_filetype},
 {0x2AD3361DE8B1D571LL,0,1,"pcntl_signal_dispatch",&ci_pcntl_signal_dispatch},
 {0x636C871213F37574LL,0,1,"mcrypt_encrypt",&ci_mcrypt_encrypt},
 {0x1E154D823451B577LL,0,0,"magicksetresolution",&ci_magicksetresolution},
 {0x4D2715A831B9D577LL,0,0,"hphp_murmurhash",&ci_hphp_murmurhash},
 {0x412521E7ADB21577LL,0,1,"iconv_mime_decode_headers",&ci_iconv_mime_decode_headers},
 {0x31529E9BCA1E157ELL,0,1,"shm_remove",&ci_shm_remove},
 {0x0B1F0EB755BDB582LL,0,1,"ispixeliterator",&ci_ispixeliterator},
 {0x77F1EDE7D5EF759ALL,0,1,"apc_cache_info",&ci_apc_cache_info},
 {0x37D003B09D0C759BLL,0,1,"stream_get_contents",&ci_stream_get_contents},
 {0x20502FCACBB9F5A0LL,0,1,"convert_uuencode",&ci_convert_uuencode},
 {0x297690F3A63335A1LL,0,1,"magickrotateimage",&ci_magickrotateimage},
 {0x3C014439AE5D75A4LL,0,1,"magickgetcharheight",&ci_magickgetcharheight},
 {0x763BA2B1C60A55ACLL,0,1,"pixelgetalphaquantum",&ci_pixelgetalphaquantum},
 {0x1636FBA5043CF5AFLL,0,1,"ldap_error",&ci_ldap_error},
 {0x1887622B9AAE75B2LL,0,1,"imap_mime_header_decode",&ci_imap_mime_header_decode},
 {0x7AFA32F70E8195B3LL,0,0,"xbox_set_thread_timeout",&ci_xbox_set_thread_timeout},
 {0x001DBE44BC0B55B3LL,0,1,"magicksetimagecolormapcolor",&ci_magicksetimagecolormapcolor},
 {0x3F9C5B4708FC55B5LL,0,1,"timezone_name_get",&ci_timezone_name_get},
 {0x1A05907F563235B6LL,0,1,"collator_set_attribute",&ci_collator_set_attribute},
 {0x7731B90FB7C975C1LL,0,1,"magickremoveimageprofile",&ci_magickremoveimageprofile},
 {0x60F8818C0F38D5C9LL,0,0,"hphp_directoryiterator___tostring",&ci_hphp_directoryiterator___tostring},
 {0x75B299F5E35A95C9LL,0,1,"mb_strwidth",&ci_mb_strwidth},
 {0x2FE56B4C457AB5D4LL,0,1,"ctype_graph",&ci_ctype_graph},
 {0x470F990B218315E5LL,0,1,"fb_unset_taint",&ci_fb_unset_taint},
 {0x0B7ACBAB402015EALL,0,1,"mb_send_mail",&ci_mb_send_mail},
 {0x0D1BD0E5AF4175F5LL,0,0,"drawsetfont",&ci_drawsetfont},
 {0x73A1F34DF95B35F5LL,0,1,"get_defined_constants",&ci_get_defined_constants},
 {0x7C48F6EA39B7B5F8LL,0,1,"magickadaptivethresholdimage",&ci_magickadaptivethresholdimage},
 {0x0FEC4ED541B7F5FBLL,0,1,"magickgetimagevirtualpixelmethod",&ci_magickgetimagevirtualpixelmethod},
 {0x39156C7CCE2D75FCLL,0,1,"hash_update",&ci_hash_update},
 {0x397D3C6576ED75FELL,0,1,"set_include_path",&ci_set_include_path},
 {0x40A557CBB9FC35FFLL,0,1,"mysql_tablename",&ci_mysql_tablename},
 {0x552D7CAD93755600LL,0,1,"dom_document_create_comment",&ci_dom_document_create_comment},
 {0x6AD774816F8F7615LL,0,1,"mb_strrchr",&ci_mb_strrchr},
 {0x2F29627AF1A97619LL,0,0,"shm_attach",&ci_shm_attach},
 {0x6DD51BF03F003619LL,0,1,"mailparse_uudecode_all",&ci_mailparse_uudecode_all},
 {0x70725954DC99F61CLL,0,1,"mcrypt_create_iv",&ci_mcrypt_create_iv},
 {0x69E1368FD737F61DLL,0,1,"dom_namednodemap_get_named_item",&ci_dom_namednodemap_get_named_item},
 {0x0F71DDE51AA55621LL,0,1,"hphp_output_global_state",&ci_hphp_output_global_state},
 {0x7ABAB92C7F9AF628LL,0,0,"hphp_get_hardware_counters",&ci_hphp_get_hardware_counters},
 {0x1E77B3BCF062D628LL,0,1,"magickreadimage",&ci_magickreadimage},
 {0x5CEA60D9C54A162CLL,0,1,"pcntl_wifstopped",&ci_pcntl_wifstopped},
 {0x652C331CE138362FLL,0,1,"is_string",&ci_is_string},
 {0x5E6328F2E6C61634LL,0,1,"imap_binary",&ci_imap_binary},
 {0x75AFA49220C9B637LL,0,0,"collator_sort",&ci_collator_sort},
 {0x60276BC7990F9637LL,0,1,"mysql_list_dbs",&ci_mysql_list_dbs},
 {0x60302D15A677963ELL,0,1,"ldap_free_result",&ci_ldap_free_result},
 {0x17242BC6C9C9563FLL,0,1,"crypt",&ci_crypt},
 {0x4901517CB796F646LL,0,1,"msg_set_queue",&ci_msg_set_queue},
 {0x769E5C6A5369F64ELL,0,1,"ob_list_handlers",&ci_ob_list_handlers},
 {0x1F3F16CED6BDD64FLL,0,1,"imap_utf8",&ci_imap_utf8},
 {0x629EDDC1E74ED655LL,0,1,"array_uintersect_assoc",&ci_array_uintersect_assoc},
 {0x205BB9CFF397B65ELL,0,1,"ldap_mod_replace",&ci_ldap_mod_replace},
 {0x1355AFB40AB1165FLL,0,1,"drawsetfontstyle",&ci_drawsetfontstyle},
 {0x5629E14D6B9FF662LL,0,1,"dom_document_get_element_by_id",&ci_dom_document_get_element_by_id},
 {0x126FC82D358E9673LL,0,1,"magicksetimagevirtualpixelmethod",&ci_magicksetimagevirtualpixelmethod},
 {0x001F23CAC36E3677LL,0,1,"magickgetimagescene",&ci_magickgetimagescene},
 {0x5BCED33A57D9B67BLL,0,1,"intval",&ci_intval},
 {0x43B1BAFFB27F367CLL,0,1,"session_is_registered",&ci_session_is_registered},
 {0x69616E2817E1967DLL,0,1,"fileinode",&ci_fileinode},
 {0x5F6750E1C7E5D682LL,0,1,"imageinterlace",&ci_imageinterlace},
 {0x07A946E3DD8E968DLL,0,1,"ldap_connect",&ci_ldap_connect},
 {0x2EFF4F69EB1DF68FLL,0,1,"apache_get_config",&ci_apache_get_config},
 {0x7CA1300231493693LL,0,1,"imap_get_quota",&ci_imap_get_quota},
 {0x7186EF5EF0581695LL,0,1,"exp",&ci_exp},
 {0x0DD7A2DB53093696LL,0,1,"utf8_decode",&ci_utf8_decode},
 {0x38BBEE42F136D6A7LL,0,1,"magickgetimageblueprimary",&ci_magickgetimageblueprimary},
 {0x6E9D4D3A119D76AALL,0,0,"wandgetexceptiontype",&ci_wandgetexceptiontype},
 {0x48C4DB333172F6AALL,0,1,"parse_url",&ci_parse_url},
 {0x72B3F8E02D8B16ABLL,0,1,"array_unshift",&ci_array_unshift},
 {0x65497D63C0D716AFLL,0,1,"getdate",&ci_getdate},
 {0x3B81B5A6BE3ED6B5LL,0,0,"thrift_protocol_write_compact",&ci_thrift_protocol_write_compact},
 {0x7E773A36449576B5LL,0,0,"imagecharup",&ci_imagecharup},
 {0x798B4197212456B5LL,0,1,"bcpowmod",&ci_bcpowmod},
 {0x72B901C3605CB6BALL,0,1,"pixelsetopacity",&ci_pixelsetopacity},
 {0x081D5EA9920076BELL,0,1,"drawgetfillalpha",&ci_drawgetfillalpha},
 {0x28526EF49FF516C5LL,0,1,"pixelsetgreenquantum",&ci_pixelsetgreenquantum},
 {0x57181A054A8F36C8LL,0,1,"mysql_fetch_result",&ci_mysql_fetch_result},
 {0x41BCD0A72B1396CALL,0,1,"xmlwriter_start_dtd_attlist",&ci_xmlwriter_start_dtd_attlist},
 {0x2AD1BCC2AEBDB6CFLL,0,1,"mysql_more_results",&ci_mysql_more_results},
 {0x2B3D5B9AF915D6D1LL,0,1,"imagecopymerge",&ci_imagecopymerge},
 {0x1FDF80EA9B8A96D2LL,0,1,"collator_set_strength",&ci_collator_set_strength},
 {0x04A0E6E8337E56D4LL,0,1,"drawcolor",&ci_drawcolor},
 {0x317FFA522A7D96D5LL,0,1,"imagefilledpolygon",&ci_imagefilledpolygon},
 {0x11DA0A0EB8E0D6E1LL,0,1,"clock_getres",&ci_clock_getres},
 {0x1CF3544CB5C9D6E4LL,0,0,"xml_set_processing_instruction_handler",&ci_xml_set_processing_instruction_handler},
 {0x31FFFC333AA6D6E4LL,0,1,"drawsetfillrule",&ci_drawsetfillrule},
 {0x44201A16F3D876E7LL,0,1,"trim",&ci_trim},
 {0x04BD4B43921956EDLL,0,1,"ldap_search",&ci_ldap_search},
 {0x76382756EA00B6EELL,0,1,"is_object",&ci_is_object},
 {0x014BD9A6823256F0LL,0,1,"extract",&ci_extract},
 {0x6F1968BE449FB6F3LL,0,1,"stream_socket_pair",&ci_stream_socket_pair},
 {0x20740D956F0236F9LL,0,1,"image2wbmp",&ci_image2wbmp},
 {0x1A80392751AA7701LL,0,1,"magickgetformat",&ci_magickgetformat},
 {0x5EFE15CE970A5704LL,0,1,"drawpolyline",&ci_drawpolyline},
 {0x27AF8F6A5DF0B70BLL,0,1,"dom_document_xinclude",&ci_dom_document_xinclude},
 {0x4F3C0DB2F6C8F70DLL,0,0,"unlink",&ci_unlink},
 {0x7CE752299E80B70DLL,0,1,"unserialize",&ci_unserialize},
 {0x1778ED2AF035F714LL,0,1,"rsort",&ci_rsort},
 {0x25D578B4772C1715LL,0,1,"define",&ci_define},
 {0x31AD016255CA7717LL,0,1,"header_register_callback",&ci_header_register_callback},
 {0x7971A5647C957718LL,0,1,"date_time_set",&ci_date_time_set},
 {0x2D213FD80048F720LL,0,1,"usleep",&ci_usleep},
 {0x523AB2EA95DAD726LL,0,1,"get_included_files",&ci_get_included_files},
 {0x11641BE0F11CD727LL,0,1,"magickgammaimage",&ci_magickgammaimage},
 {0x1D30F1E638D71729LL,0,1,"readgzfile",&ci_readgzfile},
 {0x14563723F798172DLL,0,1,"magickpaintopaqueimage",&ci_magickpaintopaqueimage},
 {0x404236CC5ABD973ALL,0,1,"xhprof_run_trace",&ci_xhprof_run_trace},
 {0x5062777D2B947741LL,0,1,"wordwrap",&ci_wordwrap},
 {0x73E4417BA7B49749LL,0,1,"curl_multi_info_read",&ci_curl_multi_info_read},
 {0x1FF03B7DE19DD74ALL,0,1,"drawpathmovetorelative",&ci_drawpathmovetorelative},
 {0x7DA9307A6149B74BLL,0,1,"get_meta_tags",&ci_get_meta_tags},
 {0x017FF216C00D9751LL,0,1,"property_exists",&ci_property_exists},
 {0x0ED4D905630EB75BLL,0,0,"openssl_random_pseudo_bytes",&ci_openssl_random_pseudo_bytes},
 {0x05D293F45C15F75BLL,0,1,"ldap_mod_del",&ci_ldap_mod_del},
 {0x6D5B592E524AF75CLL,0,1,"hphp_splfileinfo_getbasename",&ci_hphp_splfileinfo_getbasename},
 {0x45631C592AD6D765LL,0,0,"str_ireplace",&ci_str_ireplace},
 {0x1D803CE961921765LL,0,1,"md5",&ci_md5},
 {0x1F4505BE6460D766LL,0,1,"scandir",&ci_scandir},
 {0x3304663FBC6C976DLL,0,0,"get_html_translation_table",&ci_get_html_translation_table},
 {0x553ADA5A41AE976DLL,0,1,"mb_ereg_replace",&ci_mb_ereg_replace},
 {0x6DB71D850799D76ELL,0,1,"hphp_splfileobject_fscanf",&ci_hphp_splfileobject_fscanf},
 {0x5DD71E685F179770LL,0,1,"cpu_get_model",&ci_cpu_get_model},
 {0x04D9076808F79775LL,0,1,"getenv",&ci_getenv},
 {0x4102C410C5031776LL,0,1,"magickcolorizeimage",&ci_magickcolorizeimage},
 {0x129E39AC523A977BLL,0,1,"magickgethomeurl",&ci_magickgethomeurl},
 {0x38704D99FEA9B783LL,0,1,"mysql_fetch_array",&ci_mysql_fetch_array},
 {0x784FD2E7191A3784LL,0,1,"drawpathellipticarcrelative",&ci_drawpathellipticarcrelative},
 {0x5BFC6198960A5785LL,0,1,"in_array",&ci_in_array},
 {0x4991643BD854D787LL,0,1,"drawgetexceptionstring",&ci_drawgetexceptionstring},
 {0x32D8CE5D0FA6D788LL,0,1,"ldap_rename",&ci_ldap_rename},
 {0x5B42B2AB1B57D796LL,0,1,"array_replace",&ci_array_replace},
 {0x1196D899ACCD379BLL,0,1,"evhttp_recv",&ci_evhttp_recv},
 {0x02ECD8C169DF579DLL,0,1,"feof",&ci_feof},
 {0x4B092931EFB7979FLL,0,1,"mysql_create_db",&ci_mysql_create_db},
 {0x7707A7FEA07FB7A9LL,0,1,"hphp_recursivedirectoryiterator___construct",&ci_hphp_recursivedirectoryiterator___construct},
 {0x7DA08D9D148837ADLL,0,1,"posix_mkfifo",&ci_posix_mkfifo},
 {0x00141B0E3E6F77AELL,0,1,"xml_set_unparsed_entity_decl_handler",&ci_xml_set_unparsed_entity_decl_handler},
 {0x16CB9891EF26D7AFLL,0,1,"drawgetstrokedashoffset",&ci_drawgetstrokedashoffset},
 {0x1FC9406FD7FCD7B9LL,0,1,"strrpos",&ci_strrpos},
 {0x4E172EA6743697C1LL,0,1,"ldap_first_entry",&ci_ldap_first_entry},
 {0x0C8A7BE6ABC957C6LL,0,1,"clearpixeliterator",&ci_clearpixeliterator},
 {0x686C5142FD0337C7LL,0,1,"lcg_value",&ci_lcg_value},
 {0x6BF7D7B5FBFF77C9LL,0,1,"hphp_get_thread_id",&ci_hphp_get_thread_id},
 {0x35B661C87484D7D1LL,0,1,"openssl_csr_sign",&ci_openssl_csr_sign},
 {0x2E4AE494431C77D9LL,0,1,"fb_utf8_strlen",&ci_fb_utf8_strlen},
 {0x2621680306BC97E4LL,0,1,"magicksetimagescene",&ci_magicksetimagescene},
 {0x4215DDB57604F7E7LL,0,1,"xmlwriter_start_pi",&ci_xmlwriter_start_pi},
 {0x0DC2C2D372EC97EDLL,0,1,"hphp_crash_log",&ci_hphp_crash_log},
 {0x5367B0F3A4D2D7EFLL,0,1,"ldap_list",&ci_ldap_list},
 {0x14F700DD189DB7F0LL,0,1,"drawsetclipunits",&ci_drawsetclipunits},
 {0x42D2B3B62D8FD7F2LL,0,1,"openssl_digest",&ci_openssl_digest},
 {0x73877357478137F3LL,0,0,"posix_ctermid",&ci_posix_ctermid},
 {0x7F436B50B7BBD7F3LL,0,1,"getcwd",&ci_getcwd},
 {0x2BA2A6480C563802LL,0,1,"imap_errors",&ci_imap_errors},
 {0x10F7244AA9CB5803LL,0,1,"imagepstext",&ci_imagepstext},
 {0x4D832DD6A72AB806LL,0,1,"dom_document_create_attribute",&ci_dom_document_create_attribute},
 {0x083B8F01AE15B808LL,0,1,"assert",&ci_assert},
 {0x52DCFB6F41D41809LL,0,0,"dom_characterdata_append_data",&ci_dom_characterdata_append_data},
 {0x221F5A9D5E021809LL,0,1,"magickwriteimages",&ci_magickwriteimages},
 {0x5A0D1AE1D4C6F80ALL,0,1,"array_slice",&ci_array_slice},
 {0x727F5A6D8E26B80DLL,0,1,"extension_loaded",&ci_extension_loaded},
 {0x5F7940A713863813LL,0,1,"floor",&ci_floor},
 {0x3C0DFA15D3447814LL,0,1,"rawurldecode",&ci_rawurldecode},
 {0x0D8B1D0A8C381817LL,0,1,"stream_bucket_new",&ci_stream_bucket_new},
 {0x0FBDB0B22A59B818LL,0,1,"mailparse_msg_parse",&ci_mailparse_msg_parse},
 {0x4D624A655A9B581DLL,0,1,"drawpoint",&ci_drawpoint},
 {0x107DBCA79C15B821LL,0,1,"addcslashes",&ci_addcslashes},
 {0x57FFCEB7FA2D9829LL,0,1,"usort",&ci_usort},
 {0x3402C1E7544C382ELL,0,1,"lstat",&ci_lstat},
 {0x5BBFA7EAEBD25830LL,0,1,"pixelgetcyanquantum",&ci_pixelgetcyanquantum},
 {0x605132E71CE7D834LL,0,1,"array_push",&ci_array_push},
 {0x43A96BA7F58EB835LL,0,0,"hphp_splfileobject_valid",&ci_hphp_splfileobject_valid},
 {0x1C4A162E6635B835LL,0,1,"imageftbbox",&ci_imageftbbox},
 {0x03098F16B0AD5838LL,0,1,"mcrypt_module_get_supported_key_sizes",&ci_mcrypt_module_get_supported_key_sizes},
 {0x63E2EA180786B83BLL,0,1,"pixelsetblack",&ci_pixelsetblack},
 {0x7C8969C75CA1783CLL,0,0,"get_declared_classes",&ci_get_declared_classes},
 {0x034EDEBD109FD83CLL,0,1,"filesize",&ci_filesize},
 {0x26A2BBC465A2B84CLL,0,1,"strcoll",&ci_strcoll},
 {0x488BFCC942C73851LL,0,1,"gzopen",&ci_gzopen},
 {0x51FD8C9B5109F856LL,0,1,"dom_characterdata_replace_data",&ci_dom_characterdata_replace_data},
 {0x41924CBA5B717859LL,0,1,"imap_append",&ci_imap_append},
 {0x3D8327794429585ELL,0,1,"hphpd_install_user_command",&ci_hphpd_install_user_command},
 {0x2AD6B0E3B9F3B861LL,0,1,"array_search",&ci_array_search},
 {0x21B30164F5D49863LL,0,1,"is_resource",&ci_is_resource},
 {0x65A68A31B96E7867LL,0,1,"hash",&ci_hash},
 {0x246EC2B1844DB869LL,0,1,"pixelgetexception",&ci_pixelgetexception},
 {0x0A7B34839099D86ELL,0,1,"get_class_constants",&ci_get_class_constants},
 {0x6AA3788C9B737877LL,0,1,"magickdespeckleimage",&ci_magickdespeckleimage},
 {0x011B54958C597878LL,0,0,"get_called_class",&ci_get_called_class},
 {0x00F8C6758B50B878LL,0,1,"drawpathcurvetoquadraticbezierabsolute",&ci_drawpathcurvetoquadraticbezierabsolute},
 {0x3B8E5E63B5E0F87BLL,0,1,"spl_autoload_call",&ci_spl_autoload_call},
 {0x6451BCB825D1787CLL,0,0,"chroot",&ci_chroot},
 {0x11DFC3C9D916387CLL,0,1,"hphp_splfileobject_ftruncate",&ci_hphp_splfileobject_ftruncate},
 {0x7549612A72BA5880LL,0,1,"hphp_splfileinfo_getrealpath",&ci_hphp_splfileinfo_getrealpath},
 {0x1062CF2DA5443888LL,0,1,"imagedashedline",&ci_imagedashedline},
 {0x5DDC2A079AB7988FLL,0,1,"dom_document_schema_validate_file",&ci_dom_document_schema_validate_file},
 {0x1FC855F0E4F1189DLL,0,1,"magickminifyimage",&ci_magickminifyimage},
 {0x71B0B871CB62B8A1LL,0,0,"spl_autoload",&ci_spl_autoload},
 {0x1756D4437A4098A1LL,0,1,"date_modify",&ci_date_modify},
 {0x6C6B4B739AE1B8A7LL,0,0,"curl_close",&ci_curl_close},
 {0x57105D4E43B078A7LL,0,1,"magicksetformat",&ci_magicksetformat},
 {0x346B2DB3BA2378A9LL,0,1,"imagecolormatch",&ci_imagecolormatch},
 {0x44BC069A75EE98AALL,0,1,"xhprof_disable",&ci_xhprof_disable},
 {0x39F11BA6A4D778ABLL,0,1,"strnatcmp",&ci_strnatcmp},
 {0x5B1F4C6424DDD8ACLL,0,1,"openlog",&ci_openlog},
 {0x2CEF8DDC092698B0LL,0,1,"drawgetvectorgraphics",&ci_drawgetvectorgraphics},
 {0x5866C5DF3A1AD8B6LL,0,1,"dom_element_get_attribute_node",&ci_dom_element_get_attribute_node},
 {0x13C6024130D918C0LL,0,1,"fb_get_last_flush_size",&ci_fb_get_last_flush_size},
 {0x4052842EC87038DBLL,0,1,"magickcropimage",&ci_magickcropimage},
 {0x4F7ED8C3156AD8E8LL,0,1,"magicksetimagedispose",&ci_magicksetimagedispose},
 {0x45DA105C5B48F8F5LL,0,1,"apd_set_pprof_trace",&ci_apd_set_pprof_trace},
 {0x4C2AFB2EFDB1B8FCLL,0,1,"stripslashes",&ci_stripslashes},
 {0x454DAD4DE5C29902LL,0,1,"xhprof_frame_end",&ci_xhprof_frame_end},
 {0x67B879A1120C190BLL,0,1,"headers_sent",&ci_headers_sent},
 {0x04F822B7817E5911LL,0,0,"bindec",&ci_bindec},
 {0x0AFD4F231D6CB911LL,0,1,"magickaddimage",&ci_magickaddimage},
 {0x022B16C0D64D7919LL,0,1,"file_put_contents",&ci_file_put_contents},
 {0x5B20795C75E3791CLL,0,1,"pagelet_server_flush",&ci_pagelet_server_flush},
 {0x277D7E2D1F5C191FLL,0,0,"drawpathcurvetoquadraticbezierrelative",&ci_drawpathcurvetoquadraticbezierrelative},
 {0x4E2C55C92D71F91FLL,0,1,"magickcolorfloodfillimage",&ci_magickcolorfloodfillimage},
 {0x044B276686B77923LL,0,1,"fscanf",&ci_fscanf},
 {0x2337F8C3EE17192DLL,0,0,"sprintf",&ci_sprintf},
 {0x27363CE6CBFC392DLL,0,1,"pcntl_wexitstatus",&ci_pcntl_wexitstatus},
 {0x13A6C6CAF50EB92FLL,0,1,"imap_search",&ci_imap_search},
 {0x30972530BD557930LL,0,1,"shell_exec",&ci_shell_exec},
 {0x72C01E1D90BE5932LL,0,1,"mcrypt_enc_get_block_size",&ci_mcrypt_enc_get_block_size},
 {0x06486B6912479935LL,0,0,"zlib_get_coding_type",&ci_zlib_get_coding_type},
 {0x48D3CA6CA0B29935LL,0,1,"mb_regex_set_options",&ci_mb_regex_set_options},
 {0x3946D67A0D16D93ELL,0,1,"hphp_splfileinfo_isreadable",&ci_hphp_splfileinfo_isreadable},
 {0x1E694036FEBA3947LL,0,1,"imap_fetchstructure",&ci_imap_fetchstructure},
 {0x6A3412DE82715948LL,0,1,"openssl_x509_checkpurpose",&ci_openssl_x509_checkpurpose},
 {0x243BB8B284895949LL,0,1,"apache_get_rewrite_rules",&ci_apache_get_rewrite_rules},
 {0x37F356F578FA394BLL,0,1,"substr",&ci_substr},
 {0x10DB229871AB794CLL,0,1,"imap_msgno",&ci_imap_msgno},
 {0x068438AFD33A9953LL,0,1,"imagecolorclosesthwb",&ci_imagecolorclosesthwb},
 {0x6FAA160ED274795CLL,0,1,"fb_utf8_substr",&ci_fb_utf8_substr},
 {0x140E984EE382F96ALL,0,1,"hphp_unpack_continuation",&ci_hphp_unpack_continuation},
 {0x134EF88685C0396FLL,0,1,"magickgetexceptiontype",&ci_magickgetexceptiontype},
 {0x72C73F5DA7D6F971LL,0,0,"magickgetimagecolormapcolor",&ci_magickgetimagecolormapcolor},
 {0x442A28FB6F6C3971LL,0,1,"xmlwriter_start_attribute",&ci_xmlwriter_start_attribute},
 {0x3D3445105C335980LL,0,1,"filectime",&ci_filectime},
 {0x214EA70BDD8FB982LL,0,1,"magickmorphimages",&ci_magickmorphimages},
 {0x3DA64BF893DBF983LL,0,1,"strncmp",&ci_strncmp},
 {0x55BE7AE8DEF3F988LL,0,1,"magickgetstringheight",&ci_magickgetstringheight},
 {0x0E863EF8C11A598BLL,0,1,"is_writable",&ci_is_writable},
 {0x69003892F71C798DLL,0,0,"apache_get_scoreboard",&ci_apache_get_scoreboard},
 {0x651A8CBB8D2A398DLL,0,1,"mysql_stat",&ci_mysql_stat},
 {0x45CFDEE19995398ELL,0,1,"hphp_recursiveiteratoriterator_next",&ci_hphp_recursiveiteratoriterator_next},
 {0x342D957A86A03990LL,0,1,"hphp_splfileobject_seek",&ci_hphp_splfileobject_seek},
 {0x59D2DFF08F4DB99ELL,0,1,"imagecreate",&ci_imagecreate},
 {0x6F8676B049C919A4LL,0,1,"array_intersect_uassoc",&ci_array_intersect_uassoc},
 {0x522256BAA78159ACLL,0,1,"popen",&ci_popen},
 {0x05C5AD90751159ADLL,0,1,"drawpathcurvetoquadraticbeziersmoothabsolute",&ci_drawpathcurvetoquadraticbeziersmoothabsolute},
 {0x25268012A48A99AFLL,0,1,"magickclipimage",&ci_magickclipimage},
 {0x5FC1B94446EA59B6LL,0,1,"magickremoveimageprofiles",&ci_magickremoveimageprofiles},
 {0x18F2C246FACAD9B7LL,0,1,"each",&ci_each},
 {0x3741447B159359B8LL,0,0,"mcrypt_get_cipher_name",&ci_mcrypt_get_cipher_name},
 {0x4EFD7A9C90E559B8LL,0,1,"posix_ttyname",&ci_posix_ttyname},
 {0x145702974C97F9B9LL,0,1,"ltrim",&ci_ltrim},
 {0x13B3172E092D99BALL,0,1,"is_dir",&ci_is_dir},
 {0x47B7D3745D80B9C4LL,0,1,"socket_get_option",&ci_socket_get_option},
 {0x5C5B0CC85133B9CALL,0,1,"mkdir",&ci_mkdir},
 {0x032DFAC5B24679CBLL,0,1,"header_remove",&ci_header_remove},
 {0x3DCCD1FEAD8759D2LL,0,1,"array_sum",&ci_array_sum},
 {0x245860A2FE4CB9D5LL,0,1,"socket_set_blocking",&ci_socket_set_blocking},
 {0x349E2E0F2CD7B9DFLL,0,1,"magickgetversion",&ci_magickgetversion},
 {0x4ADFA265F07AB9E9LL,0,1,"drawgettextalignment",&ci_drawgettextalignment},
 {0x25DDD924EFE979EALL,0,1,"hash_update_file",&ci_hash_update_file},
 {0x71B0FF80B88459EBLL,0,1,"diskfreespace",&ci_diskfreespace},
 {0x7EA6200B688459EFLL,0,1,"ldap_modify",&ci_ldap_modify},
 {0x1FC307200E8959F0LL,0,1,"stream_bucket_append",&ci_stream_bucket_append},
 {0x35BABFBC091759F5LL,0,1,"socket_server",&ci_socket_server},
 {0x55814D0EC267B9FCLL,0,1,"imap_status",&ci_imap_status},
 {0x17B83C425BD09A04LL,0,1,"atanh",&ci_atanh},
 {0x391E0A4CF1EC9A07LL,0,1,"stream_socket_recvfrom",&ci_stream_socket_recvfrom},
 {0x0436CA4DFB315A08LL,0,1,"soundex",&ci_soundex},
 {0x70075DC878825A0BLL,0,1,"ctype_lower",&ci_ctype_lower},
 {0x736C133EFF8E5A0DLL,0,0,"mysql_list_fields",&ci_mysql_list_fields},
 {0x50A7146A79877A0DLL,0,1,"pcntl_alarm",&ci_pcntl_alarm},
 {0x618D2A98986B1A29LL,0,1,"ldap_unbind",&ci_ldap_unbind},
 {0x5AB266C6E7075A34LL,0,0,"mysql_error",&ci_mysql_error},
 {0x2D948E4099975A34LL,0,1,"restore_include_path",&ci_restore_include_path},
 {0x3E65EF9761BE5A38LL,0,1,"pixelgetiteratorexceptiontype",&ci_pixelgetiteratorexceptiontype},
 {0x785ECCF53D98BA3BLL,0,1,"curl_multi_exec",&ci_curl_multi_exec},
 {0x31C3A072D092FA3ELL,0,1,"socket_create_listen",&ci_socket_create_listen},
 {0x4C0E2C6882051A3FLL,0,1,"magickgetresourcelimit",&ci_magickgetresourcelimit},
 {0x128914E131AFFA42LL,0,0,"microtime",&ci_microtime},
 {0x5FF7C3A6BDDCFA42LL,0,1,"mb_convert_kana",&ci_mb_convert_kana},
 {0x7CDF1FB642529A45LL,0,1,"dom_characterdata_insert_data",&ci_dom_characterdata_insert_data},
 {0x1B45CFF586F85A47LL,0,1,"utf8_encode",&ci_utf8_encode},
 {0x1635DCC4882CBA4ELL,0,0,"dom_node_has_attributes",&ci_dom_node_has_attributes},
 {0x52959B6E03615A4ELL,0,1,"sncompress",&ci_sncompress},
 {0x2B18DFF183C0BA5BLL,0,1,"mb_get_info",&ci_mb_get_info},
 {0x60C4B9EEDBD5FA66LL,0,1,"pos",&ci_pos},
 {0x01DD2057FD9B1A68LL,0,0,"xmlwriter_write_cdata",&ci_xmlwriter_write_cdata},
 {0x32AD0455A7689A68LL,0,1,"magickoilpaintimage",&ci_magickoilpaintimage},
 {0x10CDCF2BB4057A69LL,0,1,"debug_zval_dump",&ci_debug_zval_dump},
 {0x0912965F4440FA6BLL,0,1,"str_repeat",&ci_str_repeat},
 {0x5B5DA6AD0AD63A71LL,0,1,"drawannotation",&ci_drawannotation},
 {0x71AFF1D58D103A72LL,0,1,"imagefontheight",&ci_imagefontheight},
 {0x7A957BEC6CA57A75LL,0,1,"preg_replace_callback",&ci_preg_replace_callback},
 {0x414C2E31304E9A7DLL,0,1,"stream_get_filters",&ci_stream_get_filters},
 {0x79786FABC5551A82LL,0,1,"jpeg2wbmp",&ci_jpeg2wbmp},
 {0x11149278DB0A9A83LL,0,1,"levenshtein",&ci_levenshtein},
 {0x755DEFDEDF35DA85LL,0,1,"ctype_print",&ci_ctype_print},
 {0x1818A3CFBA357A88LL,0,1,"magicksetwandsize",&ci_magicksetwandsize},
 {0x7588BD0546C8BA8BLL,0,1,"hphp_recursivedirectoryiterator_valid",&ci_hphp_recursivedirectoryiterator_valid},
 {0x6A2EEE463F969A8CLL,0,1,"getservbyname",&ci_getservbyname},
 {0x1257DB9F159E9A92LL,0,1,"magickmontageimage",&ci_magickmontageimage},
 {0x4A32653C8E719A93LL,0,1,"pixelgetcyan",&ci_pixelgetcyan},
 {0x4B1501C4C22FFA94LL,0,1,"quoted_printable_encode",&ci_quoted_printable_encode},
 {0x34B8A4E5AE0EFA95LL,0,1,"pixelgetopacity",&ci_pixelgetopacity},
 {0x0089115038C03A97LL,0,1,"array_diff_ukey",&ci_array_diff_ukey},
 {0x1382CEA1527CFA99LL,0,1,"imap_utf7_encode",&ci_imap_utf7_encode},
 {0x19AFF8596E19DA9ALL,0,1,"xhprof_enable",&ci_xhprof_enable},
 {0x1234AB687C515A9DLL,0,1,"mb_encode_numericentity",&ci_mb_encode_numericentity},
 {0x2E5E23ECA0525A9FLL,0,1,"bcadd",&ci_bcadd},
 {0x2418528164415AA5LL,0,1,"magickscaleimage",&ci_magickscaleimage},
 {0x797CEC173CBB7AA7LL,0,1,"ob_get_flush",&ci_ob_get_flush},
 {0x62519270CC9F1AB2LL,0,1,"stream_get_meta_data",&ci_stream_get_meta_data},
 {0x030DFC3D3C88BABFLL,0,1,"filegroup",&ci_filegroup},
 {0x79215854355CBAC7LL,0,0,"proc_get_status",&ci_proc_get_status},
 {0x5D2F899A270D9AC7LL,0,1,"xmlwriter_end_dtd_element",&ci_xmlwriter_end_dtd_element},
 {0x2BD6476D2C467ACCLL,0,1,"pagelet_server_task_status",&ci_pagelet_server_task_status},
 {0x173EDC165B673ACDLL,0,1,"magicktransformimage",&ci_magicktransformimage},
 {0x47E2B4F7B8DE5AD1LL,0,0,"xmlwriter_write_dtd_attlist",&ci_xmlwriter_write_dtd_attlist},
 {0x314317450857FAD1LL,0,1,"ctype_punct",&ci_ctype_punct},
 {0x0D5DAF8034B41AD5LL,0,1,"get_include_path",&ci_get_include_path},
 {0x56E867A1F7507ADBLL,0,1,"dom_document_create_processing_instruction",&ci_dom_document_create_processing_instruction},
 {0x3E319E451A32FADDLL,0,1,"magicksharpenimage",&ci_magicksharpenimage},
 {0x31D1C58F7BD89ADELL,0,1,"hphp_directoryiterator_seek",&ci_hphp_directoryiterator_seek},
 {0x225F05071947BAEBLL,0,1,"drawpathlinetoabsolute",&ci_drawpathlinetoabsolute},
 {0x46C33B4739C2FAEDLL,0,1,"shm_remove_var",&ci_shm_remove_var},
 {0x160A82E3E2CBBAEELL,0,1,"is_finite",&ci_is_finite},
 {0x6B259D5D9D681AF0LL,0,1,"register_postsend_function",&ci_register_postsend_function},
 {0x2EC0ABF9A979FAF4LL,0,1,"ob_get_level",&ci_ob_get_level},
 {0x2C7C9772AE983AF6LL,0,1,"drawsetgravity",&ci_drawsetgravity},
 {0x12859AD75BAF3AF8LL,0,1,"magickreadimageblob",&ci_magickreadimageblob},
 {0x15BAA5E9A6C9DAFCLL,0,1,"fb_enable_code_coverage",&ci_fb_enable_code_coverage},
 {0x16BA422EB6C51AFDLL,0,1,"gzwrite",&ci_gzwrite},
 {0x04E86BA79B6CBAFELL,0,1,"stream_socket_shutdown",&ci_stream_socket_shutdown},
 {0x6F3503C7FB12DB01LL,0,1,"lchgrp",&ci_lchgrp},
 {0x673A96C50F00FB03LL,0,1,"str_word_count",&ci_str_word_count},
 {0x14AF32A23B507B0ALL,0,1,"metaphone",&ci_metaphone},
 {0x000A2D80D67ADB0CLL,0,1,"imap_mail",&ci_imap_mail},
 {0x66F9A476DAB47B17LL,0,1,"pixelsetcolor",&ci_pixelsetcolor},
 {0x70448A629A74FB18LL,0,1,"ksort",&ci_ksort},
 {0x249399CEC35B7B1CLL,0,1,"png2wbmp",&ci_png2wbmp},
 {0x7160AA24D4251B1ELL,0,1,"mb_strripos",&ci_mb_strripos},
 {0x1112712715D75B20LL,0,1,"pixelgetblackquantum",&ci_pixelgetblackquantum},
 {0x24CE95457EACBB26LL,0,1,"get_parent_class",&ci_get_parent_class},
 {0x1F4984938E1DBB2ALL,0,1,"sort",&ci_sort},
 {0x70742211FA3EFB2CLL,0,1,"imagettftext",&ci_imagettftext},
 {0x4D5D45D1F1EB3B33LL,0,1,"posix_access",&ci_posix_access},
 {0x0B7D52E2540ABB34LL,0,1,"tan",&ci_tan},
 {0x053B14F52350FB37LL,0,1,"socket_shutdown",&ci_socket_shutdown},
 {0x68C09D6CB8E79B38LL,0,1,"class_exists",&ci_class_exists},
 {0x02A2C373E54FFB39LL,0,1,"hash_init",&ci_hash_init},
 {0x49A45F75B2B25B3ALL,0,1,"apd_breakpoint",&ci_apd_breakpoint},
 {0x35F4A0789F367B3CLL,0,1,"drawpathlinetohorizontalrelative",&ci_drawpathlinetohorizontalrelative},
 {0x0B07AD87DF1B5B3FLL,0,1,"urldecode",&ci_urldecode},
 {0x24CBCBA5C4407B40LL,0,1,"evhttp_set_cache",&ci_evhttp_set_cache},
 {0x4E4449EBAADD7B44LL,0,1,"magickpingimage",&ci_magickpingimage},
 {0x72E3AE55A0B33B45LL,0,1,"ispixelwand",&ci_ispixelwand},
 {0x333FB673518A1B55LL,0,1,"ldap_get_entries",&ci_ldap_get_entries},
 {0x4888951358F53B5DLL,0,1,"dom_document_get_elements_by_tag_name_ns",&ci_dom_document_get_elements_by_tag_name_ns},
 {0x48E30DE7A228BB5FLL,0,1,"spl_autoload_register",&ci_spl_autoload_register},
 {0x7636825871399B61LL,0,1,"highlight_file",&ci_highlight_file},
 {0x674F1DA24EDE7B68LL,0,1,"xmlwriter_end_attribute",&ci_xmlwriter_end_attribute},
 {0x5543A0CACD153B6BLL,0,1,"substr_replace",&ci_substr_replace},
 {0x5E5C875DB04CFB71LL,0,1,"drawrectangle",&ci_drawrectangle},
 {0x42F0AED7599C1B75LL,0,1,"magickechoimageblob",&ci_magickechoimageblob},
 {0x2A63A0BF9B7E3B76LL,0,1,"ini_alter",&ci_ini_alter},
 {0x5025B43B46679B77LL,0,0,"openssl_x509_free",&ci_openssl_x509_free},
 {0x7F5F29D8E63ABB77LL,0,1,"mcrypt_module_self_test",&ci_mcrypt_module_self_test},
 {0x1AD83CBEA1E87B79LL,0,1,"imap_getmailboxes",&ci_imap_getmailboxes},
 {0x3A096F905FBF7B7CLL,0,1,"magickcommentimage",&ci_magickcommentimage},
 {0x28DE19828167FB7DLL,0,1,"magickmapimage",&ci_magickmapimage},
 {0x3B72159A4B04FB8BLL,0,1,"set_time_limit",&ci_set_time_limit},
 {0x3B831DB1A615FB8DLL,0,1,"xhprof_sample_enable",&ci_xhprof_sample_enable},
 {0x62A4D7A03F7C3B8ELL,0,1,"ceil",&ci_ceil},
 {0x076E66D4089A3B99LL,0,1,"mb_stripos",&ci_mb_stripos},
 {0x023133732CB51B9ALL,0,1,"exif_thumbnail",&ci_exif_thumbnail},
 {0x390A267EC6B51B9FLL,0,1,"socket_sendto",&ci_socket_sendto},
 {0x0D95DD13A2D3BBA4LL,0,1,"drawtranslate",&ci_drawtranslate},
 {0x7C833A303C7CFBAALL,0,1,"getrandmax",&ci_getrandmax},
 {0x66F099E732977BAELL,0,1,"imap_renamemailbox",&ci_imap_renamemailbox},
 {0x7D9BF61D6CDE3BB0LL,0,0,"fb_parallel_query",&ci_fb_parallel_query},
 {0x1F3E4C6660247BB0LL,0,1,"imagecolorresolve",&ci_imagecolorresolve},
 {0x3F56AF1511AEDBBELL,0,1,"magicklabelimage",&ci_magicklabelimage},
 {0x10C5CF7B55173BC7LL,0,1,"settype",&ci_settype},
 {0x4122DFAC25BDFBCALL,0,1,"hphp_splfileinfo_getowner",&ci_hphp_splfileinfo_getowner},
 {0x53A88C8F973CFBCDLL,0,1,"apc_clear_cache",&ci_apc_clear_cache},
 {0x45D6BA980AFFDBCELL,0,1,"msg_get_queue",&ci_msg_get_queue},
 {0x02A0F9CE4022BBD0LL,0,0,"imap_fetchbody",&ci_imap_fetchbody},
 {0x6846CA07A5E21BD0LL,0,1,"hphp_directoryiterator___construct",&ci_hphp_directoryiterator___construct},
 {0x6FE3C5FF5E883BD2LL,0,1,"round",&ci_round},
 {0x4E4EB301A994DBD4LL,0,1,"drawpolygon",&ci_drawpolygon},
 {0x21E44C7C7A911BD8LL,0,1,"phpinfo",&ci_phpinfo},
 {0x58D0D9B66F045BDELL,0,1,"strpos",&ci_strpos},
 {0x2E10B74DC6067BE0LL,0,1,"strip_tags",&ci_strip_tags},
 {0x25FBB61480091BE1LL,0,1,"mysql_client_encoding",&ci_mysql_client_encoding},
 {0x505B44DDF2383BEBLL,0,0,"drawgetfillcolor",&ci_drawgetfillcolor},
 {0x0C1904372E8EDBEBLL,0,1,"stream_copy_to_stream",&ci_stream_copy_to_stream},
 {0x5A22BA9B012A9BECLL,0,0,"dom_document_save_html",&ci_dom_document_save_html},
 {0x44279BB3E2191BECLL,0,1,"socket_accept",&ci_socket_accept},
 {0x04C0582DB1AD7BF0LL,0,0,"mt_srand",&ci_mt_srand},
 {0x187C049E785A1BF0LL,0,1,"iconv_get_encoding",&ci_iconv_get_encoding},
 {0x0CA96856E5BEFBF1LL,0,1,"iptcparse",&ci_iptcparse},
 {0x1444DB037B4D5BF4LL,0,1,"imagegammacorrect",&ci_imagegammacorrect},
 {0x74ABB4A1E10BBBF7LL,0,1,"time",&ci_time},
 {0x5B7F6E0A642BBBF9LL,0,1,"sleep",&ci_sleep},
 {0x64F52E1DB5E95BFCLL,0,1,"curl_multi_remove_handle",&ci_curl_multi_remove_handle},
 {0x249340DF734D9C02LL,0,1,"magickgetimageheight",&ci_magickgetimageheight},
 {0x48E1616EE837FC08LL,0,1,"is_uploaded_file",&ci_is_uploaded_file},
 {0x1E47C281193ABC0ALL,0,1,"collator_compare",&ci_collator_compare},
 {0x062C0FFA8E29DC12LL,0,1,"intl_error_name",&ci_intl_error_name},
 {0x3A702EF906B37C17LL,0,1,"collator_get_locale",&ci_collator_get_locale},
 {0x758A62BD65E6FC1CLL,0,1,"imagegd2",&ci_imagegd2},
 {0x7039C5EBB1D6BC1ELL,0,1,"array_walk",&ci_array_walk},
 {0x3A5D921797669C1FLL,0,1,"hphp_log",&ci_hphp_log},
 {0x0179CBA2C5F4DC21LL,0,1,"magickgetimageformat",&ci_magickgetimageformat},
 {0x0B9B362534621C32LL,0,1,"isdrawingwand",&ci_isdrawingwand},
 {0x49965C44E9EE3C33LL,0,1,"set_file_buffer",&ci_set_file_buffer},
 {0x21564F9315F3FC38LL,0,1,"drawsettextdecoration",&ci_drawsettextdecoration},
 {0x69488CC69B897C3CLL,0,1,"hphp_recursiveiteratoriterator_getinneriterator",&ci_hphp_recursiveiteratoriterator_getinneriterator},
 {0x15EC581662651C3ELL,0,1,"date_parse",&ci_date_parse},
 {0x7D992445F5E37C46LL,0,1,"magicktextureimage",&ci_magicktextureimage},
 {0x120E7B01366DFC4BLL,0,1,"call_user_func_serialized",&ci_call_user_func_serialized},
 {0x04534F26B8D05C50LL,0,1,"drawgetstrokecolor",&ci_drawgetstrokecolor},
 {0x313E8EB28A111C57LL,0,1,"hphp_splfileinfo_setinfoclass",&ci_hphp_splfileinfo_setinfoclass},
 {0x1B8C3DA27170DC58LL,0,1,"dirname",&ci_dirname},
 {0x57633BDF8DB3FC59LL,0,1,"i18n_loc_set_attribute",&ci_i18n_loc_set_attribute},
 {0x47B38F1E4FA29C5ELL,0,1,"fb_get_code_coverage",&ci_fb_get_code_coverage},
 {0x5176725DA884DC61LL,0,0,"curl_setopt",&ci_curl_setopt},
 {0x6E54EEDA1D887C61LL,0,1,"magicksetimageinterlacescheme",&ci_magicksetimageinterlacescheme},
 {0x07DC355325165C67LL,0,1,"magickwriteimage",&ci_magickwriteimage},
 {0x10D6AE9D688D1C68LL,0,1,"copy",&ci_copy},
 {0x18D9ED67E8E0FC71LL,0,1,"dom_attr_is_id",&ci_dom_attr_is_id},
 {0x20F0AAA486F39C74LL,0,1,"dom_element_get_elements_by_tag_name_ns",&ci_dom_element_get_elements_by_tag_name_ns},
 {0x767806D6F1053C81LL,0,1,"sin",&ci_sin},
 {0x56DA17241B793C85LL,0,1,"mysql_set_timeout",&ci_mysql_set_timeout},
 {0x4E04B71729485C91LL,0,1,"clonedrawingwand",&ci_clonedrawingwand},
 {0x0F8242C6327B5C93LL,0,1,"dns_check_record",&ci_dns_check_record},
 {0x374F20BDAF709C9ALL,0,1,"mb_preferred_mime_name",&ci_mb_preferred_mime_name},
 {0x36F7F9FD7766DC9BLL,0,1,"xmlwriter_end_comment",&ci_xmlwriter_end_comment},
 {0x12580A083B0D7CAELL,0,1,"iterator_apply",&ci_iterator_apply},
 {0x373B3FADEACB7CB0LL,0,1,"openssl_private_encrypt",&ci_openssl_private_encrypt},
 {0x40D8DC24FA917CB1LL,0,1,"hphp_splfileobject_fgetss",&ci_hphp_splfileobject_fgetss},
 {0x3DFD5CA79919DCB7LL,0,0,"imageantialias",&ci_imageantialias},
 {0x39E03AAC188D3CB7LL,0,1,"magickgetimagecompressionquality",&ci_magickgetimagecompressionquality},
 {0x3033FE14E114FCC0LL,0,1,"magicksetimageblueprimary",&ci_magicksetimageblueprimary},
 {0x34B6388D7730BCC2LL,0,1,"drawline",&ci_drawline},
 {0x66273C5932B1FCCELL,0,0,"clock_gettime",&ci_clock_gettime},
 {0x0183A548B759BCCELL,0,1,"posix_getpgid",&ci_posix_getpgid},
 {0x407B1F3AFEC43CCFLL,0,1,"pixelgetblue",&ci_pixelgetblue},
 {0x576C5DC462663CD1LL,0,1,"explode",&ci_explode},
 {0x544302E2FAD3FCD3LL,0,1,"magicknextimage",&ci_magicknextimage},
 {0x323FE1D92C9B3CD4LL,0,1,"gzdecode",&ci_gzdecode},
 {0x757BC444FDF79CD5LL,0,1,"posix_get_last_error",&ci_posix_get_last_error},
 {0x09C6455B4BC6FCDALL,0,1,"drawsetviewbox",&ci_drawsetviewbox},
 {0x7CDDF96AFEA2DCE4LL,0,1,"chunk_split",&ci_chunk_split},
 {0x6AA89C314C647CEFLL,0,1,"magickgetimagehistogram",&ci_magickgetimagehistogram},
 {0x26C49BBC67475CF2LL,0,1,"magicksetimagewhitepoint",&ci_magicksetimagewhitepoint},
 {0x5C1F75D51C077CF3LL,0,0,"pixelgetindex",&ci_pixelgetindex},
 {0x6CA8CF41D27D1CF3LL,0,1,"imap_headerinfo",&ci_imap_headerinfo},
 {0x09B4EE276DCCFCFBLL,0,1,"mysql_fetch_row",&ci_mysql_fetch_row},
 {0x768F3E6D1CBA5CFELL,0,1,"socket_recv",&ci_socket_recv},
 {0x748D3DFF0EB57CFFLL,0,1,"uniqid",&ci_uniqid},
 {0x2BA9FB0F8B76DD06LL,0,1,"number_format",&ci_number_format},
 {0x153F7DBFC9047D09LL,0,1,"pixelsetred",&ci_pixelsetred},
 {0x30A8326034801D0CLL,0,1,"mysql_pconnect",&ci_mysql_pconnect},
 {0x3ACE8A8BC9ACDD0DLL,0,1,"iconv_mime_decode",&ci_iconv_mime_decode},
 {0x08F41A00D5D57D10LL,0,0,"mb_decode_mimeheader",&ci_mb_decode_mimeheader},
 {0x42BEEC88EE81FD10LL,0,1,"imagechar",&ci_imagechar},
 {0x5F165B40AEEE5D12LL,0,1,"hphp_splfileinfo_getfilename",&ci_hphp_splfileinfo_getfilename},
 {0x63837ECAF6235D14LL,0,1,"preg_replace",&ci_preg_replace},
 {0x39994614C6315D1ALL,0,1,"hphp_recursivedirectoryiterator_key",&ci_hphp_recursivedirectoryiterator_key},
 {0x25DADFF238A15D1ELL,0,1,"collator_create",&ci_collator_create},
 {0x71DF0C17F47EDD25LL,0,1,"getprotobynumber",&ci_getprotobynumber},
 {0x7C12261259F87D28LL,0,1,"mcrypt_enc_is_block_algorithm_mode",&ci_mcrypt_enc_is_block_algorithm_mode},
 {0x7A9C06B9CF853D2ALL,0,1,"substr_count",&ci_substr_count},
 {0x4DAC43060BA57D32LL,0,1,"stream_wrapper_restore",&ci_stream_wrapper_restore},
 {0x6F2182E089377D37LL,0,0,"imap_list",&ci_imap_list},
 {0x3ACF745D381E9D37LL,0,1,"rtrim",&ci_rtrim},
 {0x0BA3AD85EB597D38LL,0,1,"pagelet_server_task_result",&ci_pagelet_server_task_result},
 {0x6B6DA1EE18673D41LL,0,1,"xmlwriter_end_dtd_entity",&ci_xmlwriter_end_dtd_entity},
 {0x40497FCA4EC4DD42LL,0,0,"posix_seteuid",&ci_posix_seteuid},
 {0x298BA735FA3ABD42LL,0,1,"nl_langinfo",&ci_nl_langinfo},
 {0x400A44045A999D45LL,0,1,"rawurlencode",&ci_rawurlencode},
 {0x455DB7F86BCEDD46LL,0,0,"pixelsetopacityquantum",&ci_pixelsetopacityquantum},
 {0x59AD2C922FF75D46LL,0,0,"mdecrypt_generic",&ci_mdecrypt_generic},
 {0x502CF4EB0A747D46LL,0,1,"magicksetimagebias",&ci_magicksetimagebias},
 {0x113ED435AEFDDD49LL,0,1,"imagecolorallocatealpha",&ci_imagecolorallocatealpha},
 {0x0FBCF35ADD209D4FLL,0,1,"drawarc",&ci_drawarc},
 {0x36D672EF4FBEFD55LL,0,1,"json_encode",&ci_json_encode},
 {0x146109BDD2F97D58LL,0,1,"hphp_splfileobject_setmaxlinelen",&ci_hphp_splfileobject_setmaxlinelen},
 {0x6FACBD7F02B6FD60LL,0,1,"uasort",&ci_uasort},
 {0x357BAB6E700EBD61LL,0,1,"destroypixelwandarray",&ci_destroypixelwandarray},
 {0x0B1348D1540E7D6ELL,0,1,"magicksetimageformat",&ci_magicksetimageformat},
 {0x7D8DCC72522CBD73LL,0,1,"mb_detect_encoding",&ci_mb_detect_encoding},
 {0x51E8B5B728E33D74LL,0,1,"imap_last_error",&ci_imap_last_error},
 {0x7FCAAAB932C57D77LL,0,1,"iterator_count",&ci_iterator_count},
 {0x6352349F97557D78LL,0,1,"stream_socket_get_name",&ci_stream_socket_get_name},
 {0x680A7EB3DA1F5D7BLL,0,1,"prev",&ci_prev},
 {0x2D15262403ADDD82LL,0,1,"drawcomposite",&ci_drawcomposite},
 {0x1B0FF5C02F571D83LL,0,1,"fb_rename_function",&ci_fb_rename_function},
 {0x230E7AD147721D89LL,0,1,"end",&ci_end},
 {0x7C2B3FE61FBDFD91LL,0,1,"openssl_pkey_get_details",&ci_openssl_pkey_get_details},
 {0x06A796D329C21D98LL,0,1,"call_user_func",&ci_call_user_func},
 {0x74BE8836F3B13D9DLL,0,1,"session_name",&ci_session_name},
 {0x167A11C41EB71DA0LL,0,0,"pixelgetexceptiontype",&ci_pixelgetexceptiontype},
 {0x5E8606470A09BDA0LL,0,0,"magickposterizeimage",&ci_magickposterizeimage},
 {0x73B43ABDD5C61DA0LL,0,1,"shuffle",&ci_shuffle},
 {0x71583A8FEF5C7DA2LL,0,1,"sys_get_temp_dir",&ci_sys_get_temp_dir},
 {0x46B2F287D2FC7DA5LL,0,1,"memcache_get",&ci_memcache_get},
 {0x28DC1AD6DA9E7DA6LL,0,1,"gethostbyname",&ci_gethostbyname},
 {0x572AE270D9E4FDA8LL,0,1,"socket_set_option",&ci_socket_set_option},
 {0x35828C81A86A9DA9LL,0,1,"cpu_get_count",&ci_cpu_get_count},
 {0x6326C14D0FFA7DAALL,0,1,"fb_thrift_serialize",&ci_fb_thrift_serialize},
 {0x188720048AB37DABLL,0,1,"magickquantizeimages",&ci_magickquantizeimages},
 {0x67EAC6D7332F3DB1LL,0,1,"hphp_splfileobject_fgetcsv",&ci_hphp_splfileobject_fgetcsv},
 {0x628069E483F35DB3LL,0,1,"hphp_splfileobject_fstat",&ci_hphp_splfileobject_fstat},
 {0x7964DE73DCA17DBALL,0,0,"magickhasnextimage",&ci_magickhasnextimage},
 {0x5E0C6E797607DDBALL,0,1,"mysql_result",&ci_mysql_result},
 {0x48AA091B1E493DBDLL,0,1,"setlocale",&ci_setlocale},
 {0x683E88F441F9BDC1LL,0,1,"chgrp",&ci_chgrp},
 {0x0433140BB339DDC3LL,0,1,"log",&ci_log},
 {0x2A38BA8B4A0F9DC4LL,0,1,"apc_fetch",&ci_apc_fetch},
 {0x66C3E73210067DC8LL,0,1,"magickgetimageunits",&ci_magickgetimageunits},
 {0x33B63F4D88717DCBLL,0,1,"hphp_set_hardware_events",&ci_hphp_set_hardware_events},
 {0x4AD5B65BCE665DCELL,0,1,"array_key_exists",&ci_array_key_exists},
 {0x7E1801C8E70D1DD5LL,0,1,"imagefontwidth",&ci_imagefontwidth},
 {0x638690DF6D06FDD7LL,0,1,"imageconvolution",&ci_imageconvolution},
 {0x044D7013BDB33DDFLL,0,1,"spl_autoload_functions",&ci_spl_autoload_functions},
 {0x5ABB7486CE861DECLL,0,0,"array_merge_recursive",&ci_array_merge_recursive},
 {0x5B51DD18C3E13DECLL,0,1,"openssl_x509_parse",&ci_openssl_x509_parse},
 {0x72293DCE8CC4BDEFLL,0,0,"htmlspecialchars",&ci_htmlspecialchars},
 {0x0BB22147ADADDDEFLL,0,1,"pfsockopen",&ci_pfsockopen},
 {0x7AE1BE187F18FDF3LL,0,1,"fgets",&ci_fgets},
 {0x5046A0D9DFDB5DF4LL,0,1,"strcspn",&ci_strcspn},
 {0x23E563F1EC919DF7LL,0,1,"hphp_splfileinfo_getpathname",&ci_hphp_splfileinfo_getpathname},
 {0x5E43280BC8DD1DF8LL,0,1,"magicktrimimage",&ci_magicktrimimage},
 {0x4FB6B5C2636D1DFALL,0,1,"apc_exists",&ci_apc_exists},
 {0x47C62D58B0B65DFBLL,0,1,"thrift_protocol_write_binary",&ci_thrift_protocol_write_binary},
 {0x072690BF719D7DFELL,0,0,"hphp_recursivedirectoryiterator_rewind",&ci_hphp_recursivedirectoryiterator_rewind},
 {0x21F24104004CFDFELL,0,1,"evhttp_post",&ci_evhttp_post},
 {0x7829D2171DFBFE02LL,0,1,"magickgetimagegamma",&ci_magickgetimagegamma},
 {0x756B92411E7FBE0DLL,0,1,"stream_get_wrappers",&ci_stream_get_wrappers},
 {0x05FAA2085D94FE12LL,0,1,"urlencode",&ci_urlencode},
 {0x41E394B12170BE14LL,0,0,"socket_send",&ci_socket_send},
 {0x3192209D50C1FE14LL,0,1,"pixelsetalpha",&ci_pixelsetalpha},
 {0x525F197D74423E15LL,0,1,"get_resource_type",&ci_get_resource_type},
 {0x0F5759A501FAFE17LL,0,1,"imagecreatefromgd2part",&ci_imagecreatefromgd2part},
 {0x4A694B42B21A9E19LL,0,1,"destroymagickwand",&ci_destroymagickwand},
 {0x7FA0B63054221E1BLL,0,1,"magickrollimage",&ci_magickrollimage},
 {0x1C6246FA51EBDE25LL,0,1,"hphp_get_static_property",&ci_hphp_get_static_property},
 {0x3456885FF0679E28LL,0,1,"lchown",&ci_lchown},
 {0x7817FA38BAAEFE2DLL,0,1,"fsockopen",&ci_fsockopen},
 {0x2E42ED1E15CCFE36LL,0,1,"mysql_affected_rows",&ci_mysql_affected_rows},
 {0x6E2CF6ECA0987E3ALL,0,1,"get_headers",&ci_get_headers},
 {0x71B7756BD1B43E44LL,0,1,"dom_document_savexml",&ci_dom_document_savexml},
 {0x21B07F1F212BDE57LL,0,1,"hphp_get_original_class_name",&ci_hphp_get_original_class_name},
 {0x299F1A5895461E5BLL,0,1,"curl_multi_close",&ci_curl_multi_close},
 {0x5697E5F6AAF47E63LL,0,1,"mb_http_input",&ci_mb_http_input},
 {0x6CB3DEB458A2DE66LL,0,1,"apc_bin_load",&ci_apc_bin_load},
 {0x25C0C5E961AFDE6ALL,0,1,"xmlwriter_full_end_element",&ci_xmlwriter_full_end_element},
 {0x6AC126DCE941FE71LL,0,1,"memory_get_peak_usage",&ci_memory_get_peak_usage},
 {0x3B28CA1BE1D0DE73LL,0,1,"xbox_get_thread_timeout",&ci_xbox_get_thread_timeout},
 {0x47D0510206B89E74LL,0,1,"ini_restore",&ci_ini_restore},
 {0x36E9EC047FC73E76LL,0,1,"mb_convert_encoding",&ci_mb_convert_encoding},
 {0x6A3D9F8EDB005E7ALL,0,1,"flush",&ci_flush},
 {0x51060D186C703E7ELL,0,1,"headers_list",&ci_headers_list},
 {0x0ECFC3676B4FDE81LL,0,1,"chr",&ci_chr},
 {0x379F7BF525FF1E82LL,0,1,"magicksetimagecolorspace",&ci_magicksetimagecolorspace},
 {0x29A2FBD427647E8ELL,0,1,"mysql_connect",&ci_mysql_connect},
 {0x5E968924197F5E93LL,0,1,"mcrypt_ofb",&ci_mcrypt_ofb},
 {0x6254E9BDC11F3E97LL,0,1,"imagecreatefromgd2",&ci_imagecreatefromgd2},
 {0x2A019CAA1188BE9BLL,0,1,"preg_grep",&ci_preg_grep},
 {0x37C5AF6E7E8B5EA0LL,0,1,"fputs",&ci_fputs},
 {0x6467FFB910B8BEA3LL,0,1,"magickspliceimage",&ci_magickspliceimage},
 {0x632D4FC346797EABLL,0,1,"pixelgetexceptionstring",&ci_pixelgetexceptionstring},
 {0x7DB9D839ACE0DEB3LL,0,1,"natsort",&ci_natsort},
 {0x1F936B3C5406DEB4LL,0,1,"fb_set_taint",&ci_fb_set_taint},
 {0x58B9EFA0FB35FEB7LL,0,1,"stream_filter_prepend",&ci_stream_filter_prepend},
 {0x2A483AD7A3D07EB9LL,0,1,"magickgetwandsize",&ci_magickgetwandsize},
 {0x1F5B2728DE875EBALL,0,1,"magicksetimage",&ci_magicksetimage},
 {0x31A30B274AD2DEBDLL,0,1,"call_user_func_array_rpc",&ci_call_user_func_array_rpc},
 {0x495316E596537EC0LL,0,1,"imagefttext",&ci_imagefttext},
 {0x4CDD0B7BF826FEC2LL,0,1,"rewinddir",&ci_rewinddir},
 {0x7D69B3537C353EC5LL,0,1,"hphp_splfileinfo_isfile",&ci_hphp_splfileinfo_isfile},
 {0x4FC99DC20A955EC7LL,0,1,"session_module_name",&ci_session_module_name},
 {0x134B37520683DED6LL,0,1,"imagesetbrush",&ci_imagesetbrush},
 {0x338D9D95095D1ED8LL,0,1,"magicksetimagedelay",&ci_magicksetimagedelay},
 {0x7F802A06996BBED9LL,0,1,"apd_set_browser_trace",&ci_apd_set_browser_trace},
 {0x29E2771785CCBEDALL,0,1,"magickgettextdescent",&ci_magickgettextdescent},
 {0x1340509769275EDBLL,0,1,"magickgetimagecompression",&ci_magickgetimagecompression},
 {0x528BA9796BD0FEE1LL,0,1,"fb_rpc_intercept_handler",&ci_fb_rpc_intercept_handler},
 {0x0D76FFBE30B13EE3LL,0,0,"imap_mailboxmsginfo",&ci_imap_mailboxmsginfo},
 {0x28A98134BD97BEE3LL,0,1,"mb_regex_encoding",&ci_mb_regex_encoding},
 {0x5B6FF42ACB2FBEE4LL,0,1,"getmyuid",&ci_getmyuid},
 {0x32B3951DFD2B9EE8LL,0,1,"hphp_directoryiterator_isdot",&ci_hphp_directoryiterator_isdot},
 {0x115CC08BC872FEECLL,0,1,"fb_output_compression",&ci_fb_output_compression},
 {0x7DFF9707F1CD9EF0LL,0,1,"dangling_server_proxy_old_request",&ci_dangling_server_proxy_old_request},
 {0x7601F38FDB3DDEF2LL,0,1,"hphp_service_thread_stopped",&ci_hphp_service_thread_stopped},
 {0x200FC256EB093EF9LL,0,1,"gettimeofday",&ci_gettimeofday},
 {0x6D450F078F02BEFBLL,0,1,"apd_continue",&ci_apd_continue},
 {0x09637D7CA2E33F00LL,0,1,"fgetc",&ci_fgetc},
 {0x66137942508EBF01LL,0,1,"date_create",&ci_date_create},
 {0x78A02A603FA6FF02LL,0,1,"magickreducenoiseimage",&ci_magickreducenoiseimage},
 {0x4BD54A631F665F0FLL,0,0,"drawpathcurvetosmoothabsolute",&ci_drawpathcurvetosmoothabsolute},
 {0x61E7A36CA7FF5F0FLL,0,1,"drawsetcliprule",&ci_drawsetcliprule},
 {0x3D977DD128A3BF11LL,0,1,"hex2bin",&ci_hex2bin},
 {0x3B197C0731233F13LL,0,1,"dom_characterdata_substring_data",&ci_dom_characterdata_substring_data},
 {0x27A4633381195F1BLL,0,1,"chown",&ci_chown},
 {0x7C0C145EFE0EBF1FLL,0,1,"defined",&ci_defined},
 {0x1FF5B9A4FC78BF21LL,0,0,"drawsettextantialias",&ci_drawsettextantialias},
 {0x20DD4631AD975F21LL,0,1,"imap_rfc822_write_address",&ci_imap_rfc822_write_address},
 {0x22607B4EE253DF2CLL,0,0,"imap_savebody",&ci_imap_savebody},
 {0x035EFF9E1757DF2CLL,0,1,"http_build_query",&ci_http_build_query},
 {0x78257F34467BDF32LL,0,0,"drawsetstrokedasharray",&ci_drawsetstrokedasharray},
 {0x2B66EACB77AE9F32LL,0,1,"print_r",&ci_print_r},
 {0x3E9146C06AAEFF39LL,0,1,"magicksetimagecompressionquality",&ci_magicksetimagecompressionquality},
 {0x65353A823EB91F44LL,0,1,"imap_mail_compose",&ci_imap_mail_compose},
 {0x49D986274B1C5F55LL,0,1,"collator_asort",&ci_collator_asort},
 {0x0551AAE8F1A6FF58LL,0,1,"magicklevelimage",&ci_magicklevelimage},
 {0x76418F884500DF5BLL,0,1,"stream_socket_enable_crypto",&ci_stream_socket_enable_crypto},
 {0x07FF92CF46DDFF5DLL,0,1,"imagepsfreefont",&ci_imagepsfreefont},
 {0x280051555A21DF64LL,0,0,"rename",&ci_rename},
 {0x41EF51E62AD3DF64LL,0,1,"pagelet_server_is_enabled",&ci_pagelet_server_is_enabled},
 {0x56EF59D6CB0A5F6BLL,0,1,"dom_document_save_html_file",&ci_dom_document_save_html_file},
 {0x23D5E9E53D11BF6CLL,0,1,"gmdate",&ci_gmdate},
 {0x4B22EF06BAA83F72LL,0,1,"version_compare",&ci_version_compare},
 {0x7064BEBF508F3F7ELL,0,1,"socket_read",&ci_socket_read},
 {0x63F18DE0DB807F80LL,0,1,"magickqueryfonts",&ci_magickqueryfonts},
 {0x14402B01D00E9F84LL,0,1,"magicksteganoimage",&ci_magicksteganoimage},
 {0x44CE4DB1CE7E9F86LL,0,1,"flock",&ci_flock},
 {0x2755DD4112AA5F8BLL,0,1,"magicksampleimage",&ci_magicksampleimage},
 {0x7A8F1104B0CCDF8ELL,0,1,"phpcredits",&ci_phpcredits},
 {0x4A6C46DC7FE29F8FLL,0,1,"hphp_recursivedirectoryiterator_getchildren",&ci_hphp_recursivedirectoryiterator_getchildren},
 {0x78463112BE739F91LL,0,1,"connection_timeout",&ci_connection_timeout},
 {0x40D620CBA0D41F95LL,0,1,"opendir",&ci_opendir},
 {0x35117886C885DF97LL,0,1,"hphp_recursivedirectoryiterator_getsubpathname",&ci_hphp_recursivedirectoryiterator_getsubpathname},
 {0x0293F60B46511F98LL,0,1,"drawsetfontstretch",&ci_drawsetfontstretch},
 {0x2B7CAC006AF27F9ALL,0,1,"fflush",&ci_fflush},
 {0x0AD6DE8829773F9DLL,0,1,"apc_compile_file",&ci_apc_compile_file},
 {0x0E7E9AA21AE99FA4LL,0,1,"hphp_recursiveiteratoriterator_current",&ci_hphp_recursiveiteratoriterator_current},
 {0x0DEEA8C3E3A47FA6LL,0,1,"read_exif_data",&ci_read_exif_data},
 {0x64D269A505D51FAELL,0,1,"array_map",&ci_array_map},
 {0x0F78ECF42C30DFB1LL,0,1,"array_chunk",&ci_array_chunk},
 {0x6465CD999F4C5FB7LL,0,1,"hphp_invoke_method",&ci_hphp_invoke_method},
 {0x6DB2DB341ECF3FB8LL,0,1,"file_exists",&ci_file_exists},
 {0x3FF9AAFF85DDDFC1LL,0,1,"class_parents",&ci_class_parents},
 {0x460470C490FAFFC2LL,0,1,"dom_node_normalize",&ci_dom_node_normalize},
 {0x042193C97C65FFCELL,0,1,"magickwaveimage",&ci_magickwaveimage},
 {0x53DB5D0490C51FD0LL,0,1,"xhprof_sample_disable",&ci_xhprof_sample_disable},
 {0x7FC00035D14B9FD6LL,0,1,"apc_delete_file",&ci_apc_delete_file},
 {0x4234F2B59531FFD8LL,0,1,"posix_getlogin",&ci_posix_getlogin},
 {0x4EDEDA4278CD3FDDLL,0,1,"magickchopimage",&ci_magickchopimage},
 {0x7F5FC3CAF8CE9FDELL,0,0,"gzcompress",&ci_gzcompress},
 {0x72925D2DF7E61FDELL,0,1,"drawpathcurvetoquadraticbeziersmoothrelative",&ci_drawpathcurvetoquadraticbeziersmoothrelative},
 {0x4D7AEC41CFD73FE8LL,0,1,"hphp_recursivedirectoryiterator_getsubpath",&ci_hphp_recursivedirectoryiterator_getsubpath},
 {0x67D1EE05DFE71FEBLL,0,1,"hphp_splfileobject_getcvscontrol",&ci_hphp_splfileobject_getcvscontrol},
 {0x00EEEE9C6CEA5FEFLL,0,1,"xmlwriter_write_element_ns",&ci_xmlwriter_write_element_ns},
 {0x25FCE64E12505FF6LL,0,1,"magicksetimagerenderingintent",&ci_magicksetimagerenderingintent},
 {0x13EE24AF67113FFALL,0,1,"ob_end_flush",&ci_ob_end_flush},
 {0x63BE4CEF1FC47FFBLL,0,1,"imagefill",&ci_imagefill},
};
static const hashNodeFunc *funcMapTable[] = {
  0,funcBuckets+0,funcBuckets+1,funcBuckets+2,0,0,0,0,
  0,0,0,funcBuckets+3,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+4,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+5,0,0,0,funcBuckets+6,funcBuckets+7,0,0,
  0,0,0,0,0,0,funcBuckets+8,funcBuckets+9,
  0,0,0,0,0,0,funcBuckets+10,funcBuckets+11,
  0,funcBuckets+12,funcBuckets+13,0,funcBuckets+14,0,0,0,
  0,funcBuckets+15,0,funcBuckets+16,funcBuckets+18,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+20,
  0,0,0,0,funcBuckets+21,0,0,0,
  0,0,funcBuckets+22,0,funcBuckets+23,funcBuckets+24,0,funcBuckets+25,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+26,0,
  funcBuckets+27,0,funcBuckets+28,0,0,0,0,0,
  0,0,funcBuckets+29,funcBuckets+30,0,0,0,0,
  0,funcBuckets+31,0,0,funcBuckets+32,funcBuckets+34,0,0,
  0,funcBuckets+35,0,funcBuckets+37,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+38,funcBuckets+39,0,0,0,0,
  funcBuckets+40,0,0,funcBuckets+41,0,funcBuckets+42,funcBuckets+43,0,
  0,funcBuckets+44,0,0,0,0,0,0,
  0,funcBuckets+45,0,funcBuckets+46,0,0,0,0,
  0,0,0,0,0,funcBuckets+47,0,funcBuckets+48,
  funcBuckets+49,0,funcBuckets+50,0,0,0,funcBuckets+52,0,
  0,0,funcBuckets+53,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+56,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+57,0,funcBuckets+58,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+59,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+60,0,0,
  0,0,0,funcBuckets+61,0,0,0,0,
  funcBuckets+62,funcBuckets+63,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+64,0,
  0,0,0,funcBuckets+65,funcBuckets+66,0,0,0,
  0,0,0,0,0,funcBuckets+67,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+68,0,0,0,0,
  0,funcBuckets+69,0,funcBuckets+71,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+72,funcBuckets+73,0,0,funcBuckets+74,0,0,
  0,0,0,funcBuckets+76,funcBuckets+77,funcBuckets+78,0,0,
  0,funcBuckets+79,0,0,0,0,0,0,
  0,funcBuckets+80,0,0,0,0,funcBuckets+82,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+83,0,0,0,0,
  0,funcBuckets+84,funcBuckets+85,0,0,funcBuckets+86,0,funcBuckets+87,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+88,funcBuckets+89,0,0,0,0,0,
  0,funcBuckets+90,0,funcBuckets+91,0,0,0,0,
  0,0,funcBuckets+92,0,0,0,0,0,
  0,funcBuckets+94,0,0,0,0,0,0,
  0,0,funcBuckets+95,0,funcBuckets+96,0,funcBuckets+97,0,
  0,0,0,0,0,funcBuckets+98,0,funcBuckets+99,
  0,0,0,0,0,0,0,funcBuckets+100,
  0,0,funcBuckets+101,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+102,0,
  funcBuckets+103,0,0,funcBuckets+104,funcBuckets+105,funcBuckets+106,0,0,
  0,0,funcBuckets+107,funcBuckets+108,0,0,0,0,
  0,0,0,0,0,funcBuckets+110,0,0,
  0,funcBuckets+112,0,funcBuckets+114,0,0,funcBuckets+115,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+116,funcBuckets+117,0,0,0,0,
  funcBuckets+118,0,0,funcBuckets+119,0,funcBuckets+120,0,0,
  0,funcBuckets+121,0,0,0,0,0,funcBuckets+122,
  0,0,0,funcBuckets+123,0,0,0,0,
  0,funcBuckets+124,funcBuckets+125,funcBuckets+126,0,0,0,0,
  0,0,0,0,funcBuckets+127,funcBuckets+128,0,0,
  funcBuckets+129,funcBuckets+130,0,0,funcBuckets+131,0,0,0,
  funcBuckets+132,0,0,0,funcBuckets+134,0,funcBuckets+135,0,
  funcBuckets+136,0,0,0,0,0,0,0,
  funcBuckets+137,0,0,0,0,funcBuckets+138,0,funcBuckets+139,
  0,0,0,funcBuckets+140,0,0,0,0,
  funcBuckets+141,0,0,0,0,funcBuckets+142,0,0,
  funcBuckets+143,funcBuckets+144,funcBuckets+145,0,0,funcBuckets+146,0,funcBuckets+147,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+148,funcBuckets+149,0,0,0,0,0,
  0,0,0,funcBuckets+150,0,funcBuckets+151,funcBuckets+152,funcBuckets+153,
  funcBuckets+154,funcBuckets+155,0,funcBuckets+156,0,funcBuckets+157,funcBuckets+159,funcBuckets+161,
  0,0,0,0,0,0,0,0,
  funcBuckets+163,0,0,0,funcBuckets+164,funcBuckets+165,0,0,
  0,funcBuckets+166,funcBuckets+168,0,funcBuckets+169,0,0,0,
  0,0,funcBuckets+170,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+171,0,0,
  0,0,0,funcBuckets+173,0,0,funcBuckets+175,0,
  funcBuckets+176,0,0,0,funcBuckets+177,0,0,0,
  0,0,0,0,funcBuckets+178,0,0,0,
  0,0,0,0,funcBuckets+179,0,funcBuckets+180,0,
  0,0,funcBuckets+181,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+182,0,0,
  0,0,0,funcBuckets+183,0,0,0,0,
  0,0,0,0,0,funcBuckets+184,funcBuckets+185,0,
  funcBuckets+187,0,0,0,0,0,0,0,
  0,funcBuckets+188,0,0,funcBuckets+189,0,0,0,
  0,0,0,0,funcBuckets+190,0,0,0,
  0,funcBuckets+191,0,funcBuckets+193,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+195,funcBuckets+196,0,
  funcBuckets+197,funcBuckets+198,funcBuckets+199,0,0,0,0,0,
  funcBuckets+200,funcBuckets+201,funcBuckets+202,0,0,funcBuckets+203,funcBuckets+204,0,
  0,0,0,0,funcBuckets+205,0,funcBuckets+206,0,
  0,0,0,funcBuckets+207,0,funcBuckets+208,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+209,0,0,funcBuckets+211,0,funcBuckets+212,
  0,0,0,0,0,funcBuckets+213,funcBuckets+214,funcBuckets+215,
  0,funcBuckets+216,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+217,funcBuckets+218,0,0,funcBuckets+219,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+220,0,0,funcBuckets+221,0,funcBuckets+223,0,0,
  0,0,funcBuckets+224,0,funcBuckets+225,funcBuckets+227,funcBuckets+228,funcBuckets+229,
  funcBuckets+230,0,funcBuckets+231,funcBuckets+232,funcBuckets+233,0,0,funcBuckets+234,
  0,funcBuckets+236,funcBuckets+237,0,0,0,0,0,
  funcBuckets+238,funcBuckets+239,funcBuckets+240,0,0,0,0,0,
  0,0,funcBuckets+241,funcBuckets+242,0,funcBuckets+243,0,0,
  0,0,0,funcBuckets+244,0,funcBuckets+245,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+246,0,0,funcBuckets+247,funcBuckets+248,0,funcBuckets+249,0,
  0,0,0,funcBuckets+250,funcBuckets+251,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+252,0,0,0,
  funcBuckets+253,0,funcBuckets+255,funcBuckets+256,0,0,funcBuckets+257,0,
  funcBuckets+258,0,0,0,funcBuckets+259,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+260,0,0,funcBuckets+261,0,0,0,
  0,funcBuckets+262,0,0,0,funcBuckets+263,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+266,0,
  0,0,0,0,0,funcBuckets+267,0,funcBuckets+268,
  funcBuckets+269,0,funcBuckets+270,0,0,0,0,0,
  0,0,funcBuckets+271,0,funcBuckets+272,0,0,0,
  0,funcBuckets+273,funcBuckets+274,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+275,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+276,0,0,
  0,0,0,0,0,funcBuckets+277,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+279,0,0,funcBuckets+280,0,funcBuckets+281,0,0,
  0,0,0,0,funcBuckets+282,0,funcBuckets+283,0,
  0,0,0,0,0,funcBuckets+284,0,0,
  0,funcBuckets+285,0,0,0,funcBuckets+286,0,funcBuckets+287,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+288,0,funcBuckets+289,
  0,0,0,0,funcBuckets+290,0,0,0,
  funcBuckets+291,0,0,0,funcBuckets+292,funcBuckets+294,0,0,
  funcBuckets+295,0,0,0,funcBuckets+296,0,0,0,
  0,funcBuckets+297,0,0,0,funcBuckets+298,funcBuckets+300,funcBuckets+301,
  0,0,0,funcBuckets+302,funcBuckets+303,0,funcBuckets+304,0,
  0,0,0,0,0,0,funcBuckets+306,funcBuckets+307,
  0,0,0,0,0,0,0,funcBuckets+308,
  funcBuckets+309,0,0,0,0,0,0,funcBuckets+310,
  funcBuckets+311,0,0,0,0,0,0,funcBuckets+312,
  0,0,0,0,funcBuckets+313,0,0,0,
  0,funcBuckets+314,0,0,0,funcBuckets+315,0,funcBuckets+316,
  funcBuckets+318,0,0,0,0,funcBuckets+319,0,0,
  0,0,0,0,0,0,0,funcBuckets+321,
  0,0,0,funcBuckets+322,0,0,0,funcBuckets+323,
  0,funcBuckets+324,0,0,0,0,0,0,
  0,funcBuckets+325,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+326,0,funcBuckets+327,funcBuckets+328,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+329,0,0,funcBuckets+330,funcBuckets+331,
  0,0,0,0,0,funcBuckets+332,0,0,
  0,0,funcBuckets+333,funcBuckets+334,0,0,funcBuckets+335,0,
  funcBuckets+337,0,0,0,0,funcBuckets+338,0,funcBuckets+339,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+340,0,
  0,0,funcBuckets+341,funcBuckets+342,0,0,funcBuckets+343,0,
  funcBuckets+344,0,0,0,0,0,0,funcBuckets+346,
  0,funcBuckets+347,0,0,0,funcBuckets+348,funcBuckets+350,0,
  funcBuckets+351,0,funcBuckets+352,funcBuckets+353,0,0,0,0,
  0,0,0,funcBuckets+354,funcBuckets+357,0,funcBuckets+358,0,
  0,0,funcBuckets+359,funcBuckets+363,0,0,0,funcBuckets+364,
  0,funcBuckets+365,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+366,0,0,0,0,funcBuckets+367,0,0,
  0,0,0,0,0,funcBuckets+368,0,0,
  0,0,funcBuckets+369,0,0,0,0,0,
  funcBuckets+370,0,0,0,0,0,funcBuckets+371,0,
  funcBuckets+372,0,0,funcBuckets+373,funcBuckets+374,0,funcBuckets+375,funcBuckets+376,
  0,funcBuckets+377,0,0,0,funcBuckets+378,funcBuckets+379,funcBuckets+380,
  0,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+381,0,funcBuckets+382,0,
  0,0,0,0,0,0,funcBuckets+384,0,
  0,0,0,0,funcBuckets+385,0,0,funcBuckets+387,
  0,0,0,funcBuckets+388,0,funcBuckets+389,0,0,
  0,funcBuckets+391,0,0,0,0,0,0,
  0,funcBuckets+392,0,0,0,0,0,0,
  0,0,0,funcBuckets+393,0,0,funcBuckets+395,0,
  0,0,0,funcBuckets+397,0,funcBuckets+398,0,0,
  0,0,funcBuckets+399,0,0,0,0,0,
  0,funcBuckets+400,funcBuckets+401,0,0,0,0,0,
  0,funcBuckets+402,0,0,0,0,0,0,
  0,0,0,funcBuckets+403,funcBuckets+404,0,0,0,
  0,0,0,0,0,0,funcBuckets+405,0,
  0,0,0,0,0,0,funcBuckets+406,0,
  0,0,funcBuckets+407,0,0,0,0,funcBuckets+408,
  0,funcBuckets+409,0,0,funcBuckets+411,0,funcBuckets+412,0,
  0,0,0,0,funcBuckets+413,funcBuckets+414,0,funcBuckets+415,
  0,0,0,0,0,0,0,funcBuckets+416,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+417,0,0,funcBuckets+418,0,0,
  0,0,funcBuckets+419,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+420,funcBuckets+421,funcBuckets+422,0,funcBuckets+423,0,0,0,
  0,0,funcBuckets+424,funcBuckets+425,0,0,funcBuckets+426,0,
  0,0,0,0,0,0,funcBuckets+427,0,
  funcBuckets+428,0,funcBuckets+429,0,0,0,0,0,
  funcBuckets+430,0,funcBuckets+431,0,0,funcBuckets+432,funcBuckets+433,funcBuckets+434,
  0,funcBuckets+435,funcBuckets+436,0,0,0,0,0,
  0,0,0,0,funcBuckets+437,0,funcBuckets+440,0,
  funcBuckets+441,funcBuckets+442,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+443,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+444,0,0,0,
  0,0,0,0,funcBuckets+445,funcBuckets+446,0,funcBuckets+447,
  0,funcBuckets+448,funcBuckets+449,funcBuckets+450,0,0,funcBuckets+451,funcBuckets+452,
  0,0,0,0,0,0,0,funcBuckets+453,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+454,0,funcBuckets+456,0,0,0,funcBuckets+457,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+458,funcBuckets+459,0,0,0,
  0,0,0,funcBuckets+460,funcBuckets+461,funcBuckets+462,0,0,
  0,0,funcBuckets+463,0,0,0,0,0,
  funcBuckets+465,0,funcBuckets+466,0,0,0,0,0,
  0,0,0,funcBuckets+467,0,0,0,funcBuckets+468,
  0,0,0,0,0,0,0,funcBuckets+469,
  funcBuckets+471,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+472,funcBuckets+473,0,0,funcBuckets+474,
  0,0,0,0,0,0,0,funcBuckets+475,
  funcBuckets+476,funcBuckets+478,0,funcBuckets+479,0,0,0,funcBuckets+481,
  funcBuckets+483,0,0,0,0,0,0,0,
  funcBuckets+484,0,0,0,0,0,funcBuckets+485,0,
  0,0,funcBuckets+486,0,0,0,0,0,
  funcBuckets+488,0,0,funcBuckets+489,0,0,0,0,
  0,0,funcBuckets+490,0,0,0,0,funcBuckets+491,
  0,0,funcBuckets+492,0,funcBuckets+493,funcBuckets+494,0,0,
  0,funcBuckets+495,0,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+496,
  0,funcBuckets+497,funcBuckets+498,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+500,0,0,0,0,0,funcBuckets+501,
  funcBuckets+502,0,0,0,funcBuckets+504,0,funcBuckets+505,0,
  0,0,funcBuckets+506,0,0,funcBuckets+508,funcBuckets+509,funcBuckets+510,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+511,0,0,funcBuckets+512,funcBuckets+513,0,0,
  0,funcBuckets+514,funcBuckets+515,0,0,0,0,0,
  funcBuckets+516,funcBuckets+517,0,funcBuckets+518,0,0,0,0,
  0,0,0,funcBuckets+520,0,0,0,0,
  0,funcBuckets+522,funcBuckets+523,0,0,funcBuckets+524,0,0,
  funcBuckets+525,funcBuckets+526,0,0,funcBuckets+527,0,0,0,
  funcBuckets+528,0,0,0,funcBuckets+529,funcBuckets+530,0,0,
  funcBuckets+531,0,0,funcBuckets+532,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+533,funcBuckets+534,0,funcBuckets+535,0,0,funcBuckets+536,
  0,funcBuckets+537,0,0,funcBuckets+538,funcBuckets+539,0,funcBuckets+540,
  0,0,0,0,0,0,0,0,
  funcBuckets+541,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+543,0,0,funcBuckets+544,funcBuckets+545,
  0,0,funcBuckets+546,funcBuckets+547,0,0,funcBuckets+548,funcBuckets+549,
  funcBuckets+550,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+551,0,funcBuckets+552,0,
  0,0,0,0,funcBuckets+553,0,0,0,
  funcBuckets+554,0,0,funcBuckets+555,funcBuckets+556,0,0,funcBuckets+557,
  funcBuckets+558,0,funcBuckets+559,funcBuckets+561,0,0,0,0,
  0,0,0,0,0,funcBuckets+562,0,0,
  0,0,0,funcBuckets+564,funcBuckets+565,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+566,
  0,0,0,0,0,0,0,0,
  funcBuckets+567,0,0,0,0,0,0,0,
  funcBuckets+568,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+569,0,0,0,
  0,0,funcBuckets+570,0,0,0,0,0,
  0,0,funcBuckets+571,0,funcBuckets+572,0,0,0,
  0,0,0,0,funcBuckets+573,funcBuckets+574,0,funcBuckets+575,
  0,0,0,0,0,0,funcBuckets+577,0,
  0,0,funcBuckets+578,0,funcBuckets+579,0,funcBuckets+580,0,
  funcBuckets+582,funcBuckets+584,0,0,funcBuckets+585,0,0,0,
  0,0,0,0,funcBuckets+586,0,funcBuckets+587,funcBuckets+588,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+589,
  0,0,funcBuckets+590,funcBuckets+591,0,0,funcBuckets+592,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+593,0,funcBuckets+594,0,0,
  0,funcBuckets+595,0,funcBuckets+596,funcBuckets+597,0,0,0,
  0,0,0,funcBuckets+598,0,funcBuckets+599,0,0,
  0,funcBuckets+600,0,0,0,0,0,0,
  0,0,funcBuckets+601,0,0,0,funcBuckets+602,0,
  funcBuckets+603,0,0,0,funcBuckets+604,funcBuckets+605,0,0,
  0,funcBuckets+606,0,0,0,0,funcBuckets+607,0,
  0,0,0,funcBuckets+608,0,funcBuckets+609,0,funcBuckets+610,
  0,0,0,0,0,funcBuckets+611,0,0,
  0,0,0,0,0,0,0,funcBuckets+612,
  0,0,funcBuckets+613,0,0,funcBuckets+615,0,0,
  0,funcBuckets+616,0,0,0,0,0,funcBuckets+617,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+618,0,0,funcBuckets+619,0,funcBuckets+621,
  0,0,0,0,0,0,funcBuckets+622,0,
  0,0,0,0,0,0,funcBuckets+623,funcBuckets+624,
  funcBuckets+625,funcBuckets+626,0,0,0,0,funcBuckets+627,0,
  0,0,0,funcBuckets+628,0,0,0,0,
  funcBuckets+629,funcBuckets+631,0,funcBuckets+632,0,0,0,0,
  funcBuckets+633,0,funcBuckets+634,funcBuckets+635,0,funcBuckets+637,0,0,
  0,funcBuckets+638,0,0,0,0,0,0,
  0,funcBuckets+639,funcBuckets+640,0,0,0,0,0,
  0,0,0,0,funcBuckets+641,0,funcBuckets+643,0,
  0,0,funcBuckets+644,0,0,0,funcBuckets+645,funcBuckets+646,
  0,0,0,0,0,funcBuckets+647,funcBuckets+648,funcBuckets+649,
  0,0,0,funcBuckets+650,0,0,0,funcBuckets+653,
  0,0,0,funcBuckets+654,0,0,funcBuckets+655,funcBuckets+656,
  0,0,0,0,0,0,funcBuckets+657,0,
  0,funcBuckets+658,0,0,0,0,0,0,
  0,0,funcBuckets+660,funcBuckets+661,funcBuckets+662,funcBuckets+663,0,0,
  0,0,0,0,0,funcBuckets+664,0,0,
  0,0,0,0,funcBuckets+665,0,0,0,
  0,0,0,0,funcBuckets+666,0,0,0,
  0,funcBuckets+667,0,0,0,0,0,0,
  funcBuckets+668,0,0,0,funcBuckets+669,0,0,funcBuckets+670,
  funcBuckets+671,funcBuckets+672,funcBuckets+673,0,0,funcBuckets+674,0,0,
  0,0,funcBuckets+676,0,funcBuckets+677,0,funcBuckets+679,0,
  0,funcBuckets+680,0,0,0,0,0,0,
  0,0,0,funcBuckets+681,funcBuckets+682,0,0,0,
  funcBuckets+683,0,0,0,funcBuckets+685,0,0,0,
  0,0,0,0,funcBuckets+686,0,0,0,
  funcBuckets+688,0,0,0,0,0,0,funcBuckets+689,
  funcBuckets+691,0,0,0,0,funcBuckets+692,funcBuckets+693,funcBuckets+694,
  0,0,0,0,funcBuckets+695,funcBuckets+696,0,0,
  0,funcBuckets+698,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+699,0,0,0,0,0,0,
  0,funcBuckets+701,funcBuckets+702,0,funcBuckets+703,funcBuckets+704,0,funcBuckets+705,
  0,0,0,funcBuckets+706,0,0,0,0,
  0,0,0,0,funcBuckets+707,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+710,0,0,funcBuckets+711,funcBuckets+713,0,funcBuckets+714,0,
  0,funcBuckets+715,0,funcBuckets+716,funcBuckets+717,0,0,funcBuckets+718,
  0,0,funcBuckets+719,0,funcBuckets+720,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+721,0,funcBuckets+722,
  0,funcBuckets+723,funcBuckets+724,funcBuckets+725,funcBuckets+726,funcBuckets+727,0,0,
  0,0,0,0,0,funcBuckets+728,funcBuckets+729,0,
  funcBuckets+730,0,0,0,funcBuckets+731,0,0,0,
  0,0,0,0,funcBuckets+732,0,funcBuckets+734,0,
  0,0,0,funcBuckets+735,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+736,
  funcBuckets+737,0,funcBuckets+738,funcBuckets+739,0,0,0,funcBuckets+740,
  0,0,0,funcBuckets+741,0,0,0,0,
  0,0,funcBuckets+742,0,0,funcBuckets+743,0,0,
  0,0,0,0,funcBuckets+745,funcBuckets+746,0,0,
  0,funcBuckets+748,funcBuckets+749,funcBuckets+750,0,0,0,0,
  0,0,0,0,0,funcBuckets+751,0,0,
  0,funcBuckets+752,0,0,0,0,0,0,
  0,funcBuckets+753,0,funcBuckets+754,0,funcBuckets+755,0,0,
  0,0,0,0,0,0,funcBuckets+756,0,
  0,0,0,0,0,funcBuckets+757,funcBuckets+758,0,
  0,0,0,0,funcBuckets+759,funcBuckets+760,0,0,
  funcBuckets+761,0,0,funcBuckets+762,0,0,0,0,
  funcBuckets+763,0,0,funcBuckets+764,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+766,funcBuckets+767,0,0,0,funcBuckets+768,
  funcBuckets+769,0,0,0,0,0,0,0,
  0,funcBuckets+770,0,0,0,0,0,funcBuckets+771,
  0,0,funcBuckets+772,0,0,funcBuckets+773,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+774,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+775,funcBuckets+776,0,0,0,0,
  0,0,0,funcBuckets+777,0,0,0,funcBuckets+778,
  0,funcBuckets+779,0,0,0,funcBuckets+780,0,0,
  0,0,0,0,funcBuckets+781,0,funcBuckets+782,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+785,funcBuckets+787,0,0,funcBuckets+788,funcBuckets+789,0,
  funcBuckets+790,0,0,0,funcBuckets+791,0,0,0,
  funcBuckets+792,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+793,0,funcBuckets+794,
  funcBuckets+795,0,0,0,0,0,funcBuckets+796,0,
  0,0,0,0,funcBuckets+798,0,funcBuckets+799,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+800,0,funcBuckets+801,
  0,0,0,funcBuckets+802,0,0,0,0,
  0,0,funcBuckets+804,0,0,0,0,0,
  0,0,0,funcBuckets+805,0,0,funcBuckets+807,0,
  funcBuckets+808,0,0,0,0,0,0,funcBuckets+809,
  funcBuckets+810,0,0,funcBuckets+811,funcBuckets+812,0,0,0,
  0,0,0,0,0,funcBuckets+813,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+814,0,funcBuckets+815,
  0,funcBuckets+816,funcBuckets+818,0,0,0,funcBuckets+819,0,
  0,funcBuckets+820,funcBuckets+821,0,0,0,0,funcBuckets+822,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+823,funcBuckets+824,0,0,0,
  0,0,funcBuckets+825,funcBuckets+826,0,0,0,0,
  0,funcBuckets+827,0,0,0,funcBuckets+828,funcBuckets+829,0,
  funcBuckets+830,0,funcBuckets+831,funcBuckets+833,0,0,funcBuckets+835,0,
  0,0,0,0,funcBuckets+836,0,0,0,
  0,funcBuckets+837,0,0,0,0,funcBuckets+838,funcBuckets+839,
  funcBuckets+840,0,0,0,0,0,funcBuckets+842,0,
  0,funcBuckets+843,0,0,0,0,funcBuckets+844,0,
  0,funcBuckets+845,0,funcBuckets+846,0,0,0,0,
  0,0,0,0,0,funcBuckets+847,funcBuckets+848,0,
  0,funcBuckets+849,funcBuckets+850,0,funcBuckets+851,0,funcBuckets+853,0,
  0,0,0,funcBuckets+854,funcBuckets+857,0,0,0,
  0,0,funcBuckets+860,funcBuckets+861,0,0,0,0,
  funcBuckets+862,0,0,0,0,funcBuckets+863,0,0,
  0,0,funcBuckets+864,funcBuckets+865,0,0,funcBuckets+866,0,
  0,funcBuckets+867,funcBuckets+868,0,0,0,0,0,
  funcBuckets+869,0,funcBuckets+870,0,0,0,0,0,
  0,0,funcBuckets+872,0,0,0,funcBuckets+874,0,
  0,funcBuckets+875,0,0,0,funcBuckets+876,0,funcBuckets+877,
  0,funcBuckets+878,0,0,0,0,0,funcBuckets+879,
  0,0,funcBuckets+880,0,funcBuckets+882,0,0,funcBuckets+883,
  0,0,funcBuckets+884,0,0,0,0,0,
  funcBuckets+885,funcBuckets+886,0,0,0,funcBuckets+887,0,funcBuckets+888,
  0,0,funcBuckets+889,funcBuckets+890,0,0,0,funcBuckets+891,
  0,0,0,0,0,0,funcBuckets+892,0,
  0,funcBuckets+893,0,0,0,0,0,0,
  0,funcBuckets+894,0,0,0,0,funcBuckets+895,0,
  0,0,0,funcBuckets+896,0,0,0,0,
  funcBuckets+898,0,0,0,0,0,0,0,
  0,funcBuckets+899,0,0,0,0,0,0,
  funcBuckets+900,0,0,0,0,0,0,0,
  0,0,funcBuckets+902,funcBuckets+903,funcBuckets+904,0,0,0,
  funcBuckets+905,funcBuckets+906,0,0,0,0,funcBuckets+907,0,
  0,0,0,0,0,funcBuckets+908,0,0,
  0,funcBuckets+911,0,0,0,0,funcBuckets+912,funcBuckets+913,
  0,0,0,0,0,0,funcBuckets+914,funcBuckets+915,
  0,funcBuckets+916,funcBuckets+917,0,0,0,0,funcBuckets+918,
  funcBuckets+919,0,0,0,0,0,funcBuckets+921,funcBuckets+922,
  funcBuckets+923,funcBuckets+924,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+926,0,
  funcBuckets+927,0,0,0,0,0,0,0,
  funcBuckets+928,0,0,funcBuckets+931,0,0,0,0,
  0,0,funcBuckets+932,funcBuckets+933,0,0,0,0,
  funcBuckets+934,0,0,0,funcBuckets+935,funcBuckets+936,0,0,
  0,0,0,funcBuckets+937,0,0,funcBuckets+938,0,
  0,0,funcBuckets+939,0,0,0,funcBuckets+940,0,
  funcBuckets+942,0,0,0,0,0,funcBuckets+943,funcBuckets+944,
  0,0,0,0,funcBuckets+945,funcBuckets+947,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+948,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+949,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+950,funcBuckets+951,funcBuckets+952,0,
  0,0,funcBuckets+953,0,funcBuckets+954,0,0,funcBuckets+955,
  0,0,0,0,0,0,0,0,
  funcBuckets+956,funcBuckets+958,0,0,0,0,0,0,
  0,funcBuckets+959,0,0,funcBuckets+960,0,funcBuckets+961,0,
  0,0,funcBuckets+962,funcBuckets+963,0,0,0,0,
  0,0,funcBuckets+964,0,0,0,0,0,
  funcBuckets+965,0,funcBuckets+966,0,0,0,funcBuckets+967,0,
  0,0,0,0,funcBuckets+968,0,0,funcBuckets+969,
  funcBuckets+970,0,0,0,funcBuckets+971,0,0,funcBuckets+973,
  0,0,0,0,funcBuckets+974,funcBuckets+975,0,0,
  0,funcBuckets+976,funcBuckets+977,funcBuckets+978,funcBuckets+979,funcBuckets+980,0,0,
  funcBuckets+981,funcBuckets+982,funcBuckets+983,0,0,funcBuckets+984,0,funcBuckets+985,
  0,0,0,0,0,funcBuckets+986,0,funcBuckets+987,
  0,0,0,0,funcBuckets+988,0,0,0,
  0,funcBuckets+989,0,funcBuckets+990,funcBuckets+991,funcBuckets+992,0,0,
  funcBuckets+993,0,funcBuckets+994,0,0,0,0,0,
  funcBuckets+995,0,0,funcBuckets+996,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+997,funcBuckets+998,
  0,0,0,0,0,funcBuckets+1000,funcBuckets+1001,0,
  0,funcBuckets+1002,0,0,0,0,funcBuckets+1003,funcBuckets+1004,
  0,funcBuckets+1005,0,funcBuckets+1006,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+1008,0,0,0,funcBuckets+1009,0,0,0,
  0,funcBuckets+1010,funcBuckets+1011,0,0,0,0,0,
  0,0,funcBuckets+1013,0,0,0,0,0,
  0,0,0,funcBuckets+1014,funcBuckets+1015,0,0,0,
  funcBuckets+1016,0,0,funcBuckets+1017,funcBuckets+1019,funcBuckets+1020,0,0,
  funcBuckets+1021,0,0,funcBuckets+1022,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+1023,0,0,0,0,funcBuckets+1024,0,0,
  0,funcBuckets+1026,0,0,0,funcBuckets+1027,funcBuckets+1028,0,
  0,0,funcBuckets+1030,funcBuckets+1031,0,0,0,0,
  funcBuckets+1032,0,funcBuckets+1033,0,funcBuckets+1034,funcBuckets+1035,funcBuckets+1036,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+1039,funcBuckets+1040,0,0,funcBuckets+1042,0,0,funcBuckets+1044,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1045,0,funcBuckets+1047,funcBuckets+1048,0,0,funcBuckets+1049,
  0,0,funcBuckets+1050,0,0,funcBuckets+1051,funcBuckets+1054,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+1055,0,0,funcBuckets+1056,0,0,funcBuckets+1057,0,
  0,funcBuckets+1058,0,funcBuckets+1059,0,0,0,funcBuckets+1060,
  funcBuckets+1061,0,0,funcBuckets+1062,0,0,funcBuckets+1063,funcBuckets+1064,
  0,0,funcBuckets+1065,0,0,0,funcBuckets+1066,funcBuckets+1067,
  funcBuckets+1068,0,0,0,funcBuckets+1070,0,0,0,
  0,funcBuckets+1071,funcBuckets+1072,0,0,0,0,funcBuckets+1073,
  0,0,0,0,0,funcBuckets+1074,0,0,
  0,funcBuckets+1075,0,funcBuckets+1076,0,0,0,0,
  0,0,funcBuckets+1077,0,funcBuckets+1078,0,0,funcBuckets+1079,
  funcBuckets+1080,0,0,funcBuckets+1081,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+1082,
  funcBuckets+1083,0,0,0,funcBuckets+1084,funcBuckets+1085,funcBuckets+1086,0,
  0,0,funcBuckets+1088,0,funcBuckets+1089,0,0,funcBuckets+1090,
  0,0,funcBuckets+1091,0,0,funcBuckets+1092,0,0,
  0,0,0,funcBuckets+1093,0,funcBuckets+1094,0,funcBuckets+1095,
  funcBuckets+1096,0,0,0,funcBuckets+1098,funcBuckets+1099,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1100,0,funcBuckets+1101,
  0,0,0,0,0,0,0,0,
  funcBuckets+1102,0,0,0,0,funcBuckets+1103,0,funcBuckets+1104,
  0,0,0,0,funcBuckets+1105,0,funcBuckets+1106,0,
  0,funcBuckets+1107,0,0,0,funcBuckets+1108,0,0,
  0,0,funcBuckets+1110,0,0,funcBuckets+1111,0,0,
  0,0,0,0,0,0,funcBuckets+1112,0,
  0,0,funcBuckets+1113,0,0,0,0,0,
  0,0,funcBuckets+1114,funcBuckets+1115,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1116,0,funcBuckets+1117,0,0,
  0,0,0,funcBuckets+1118,0,0,funcBuckets+1119,0,
  0,0,funcBuckets+1122,funcBuckets+1123,0,0,0,0,
  0,funcBuckets+1124,0,0,0,0,0,0,
  0,0,0,funcBuckets+1125,0,0,0,funcBuckets+1127,
  0,0,funcBuckets+1128,funcBuckets+1129,0,0,0,funcBuckets+1130,
  0,0,0,0,0,0,0,funcBuckets+1131,
  0,0,0,0,0,0,0,funcBuckets+1132,
  funcBuckets+1134,0,0,0,0,0,0,0,
  funcBuckets+1135,funcBuckets+1136,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+1137,0,0,funcBuckets+1138,
  0,0,0,0,0,0,funcBuckets+1139,0,
  0,funcBuckets+1140,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1141,funcBuckets+1143,
  0,funcBuckets+1144,0,0,0,0,0,funcBuckets+1145,
  0,0,0,funcBuckets+1146,funcBuckets+1147,0,funcBuckets+1148,funcBuckets+1150,
  funcBuckets+1151,0,funcBuckets+1152,0,0,0,0,0,
  funcBuckets+1153,0,0,0,funcBuckets+1154,0,0,0,
  funcBuckets+1155,0,0,0,0,funcBuckets+1156,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1157,0,0,
  funcBuckets+1159,funcBuckets+1160,funcBuckets+1161,funcBuckets+1162,0,0,0,0,
  funcBuckets+1163,0,0,0,funcBuckets+1164,0,0,funcBuckets+1165,
  funcBuckets+1167,0,0,0,0,0,0,0,
  0,0,funcBuckets+1168,funcBuckets+1169,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1170,0,funcBuckets+1171,0,0,
  funcBuckets+1172,0,0,0,0,0,0,0,
  0,0,funcBuckets+1173,0,funcBuckets+1175,0,0,0,
  0,funcBuckets+1176,0,0,funcBuckets+1178,funcBuckets+1179,0,funcBuckets+1180,
  0,0,0,0,0,funcBuckets+1181,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1182,0,0,0,funcBuckets+1183,
  funcBuckets+1184,0,funcBuckets+1185,funcBuckets+1186,0,0,0,funcBuckets+1187,
  0,0,0,0,0,0,0,funcBuckets+1188,
  0,0,0,0,0,0,0,funcBuckets+1189,
  0,0,funcBuckets+1191,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1192,0,0,0,0,
  funcBuckets+1193,0,0,0,0,0,funcBuckets+1194,0,
  0,0,funcBuckets+1195,0,funcBuckets+1196,0,0,funcBuckets+1197,
  0,funcBuckets+1198,0,0,funcBuckets+1199,0,0,funcBuckets+1200,
  0,funcBuckets+1201,funcBuckets+1202,0,0,funcBuckets+1203,funcBuckets+1204,0,
  0,funcBuckets+1205,0,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+1206,
  0,0,0,funcBuckets+1207,0,0,0,0,
  funcBuckets+1208,0,funcBuckets+1209,funcBuckets+1210,0,0,funcBuckets+1211,0,
  0,funcBuckets+1212,funcBuckets+1213,0,0,funcBuckets+1214,0,funcBuckets+1216,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1217,0,funcBuckets+1218,
  0,0,funcBuckets+1219,0,funcBuckets+1220,0,funcBuckets+1221,0,
  funcBuckets+1222,0,0,0,funcBuckets+1223,funcBuckets+1224,funcBuckets+1225,funcBuckets+1226,
  funcBuckets+1227,0,0,0,funcBuckets+1228,0,0,0,
  0,funcBuckets+1229,funcBuckets+1230,funcBuckets+1231,funcBuckets+1232,funcBuckets+1234,funcBuckets+1235,funcBuckets+1236,
  funcBuckets+1237,funcBuckets+1238,0,0,funcBuckets+1240,0,0,0,
  funcBuckets+1241,0,0,0,0,0,0,0,
  0,0,funcBuckets+1242,funcBuckets+1243,0,funcBuckets+1244,0,0,
  0,0,funcBuckets+1246,0,0,funcBuckets+1247,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+1248,0,funcBuckets+1250,funcBuckets+1251,
  funcBuckets+1253,0,0,0,funcBuckets+1255,0,0,0,
  funcBuckets+1256,0,funcBuckets+1258,0,funcBuckets+1259,0,0,0,
  0,0,0,0,0,0,funcBuckets+1260,funcBuckets+1261,
  funcBuckets+1262,0,0,0,0,0,funcBuckets+1264,0,
  0,funcBuckets+1265,0,0,funcBuckets+1266,0,funcBuckets+1267,0,
  0,0,funcBuckets+1268,0,0,0,0,0,
  0,0,0,funcBuckets+1269,0,0,0,0,
  funcBuckets+1270,0,0,0,0,0,0,0,
  funcBuckets+1271,0,0,0,0,0,funcBuckets+1272,0,
  0,0,0,funcBuckets+1273,0,0,0,0,
  0,0,0,0,funcBuckets+1274,0,0,funcBuckets+1275,
  0,0,0,0,funcBuckets+1276,0,funcBuckets+1277,0,
  0,0,0,funcBuckets+1278,0,0,0,0,
  0,0,funcBuckets+1280,0,funcBuckets+1281,0,0,funcBuckets+1282,
  funcBuckets+1283,funcBuckets+1284,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1285,funcBuckets+1286,0,0,0,0,
  0,0,0,funcBuckets+1287,0,0,funcBuckets+1289,0,
  funcBuckets+1290,0,0,0,0,0,funcBuckets+1291,0,
  0,0,0,0,0,0,funcBuckets+1292,0,
  0,0,funcBuckets+1293,0,funcBuckets+1294,funcBuckets+1295,funcBuckets+1296,0,
  funcBuckets+1297,0,0,funcBuckets+1298,funcBuckets+1299,0,0,0,
  0,0,0,0,funcBuckets+1300,0,0,funcBuckets+1301,
  0,0,0,0,0,funcBuckets+1302,funcBuckets+1303,0,
  funcBuckets+1304,0,funcBuckets+1305,0,0,0,0,0,
  0,0,funcBuckets+1306,0,0,0,0,0,
  0,funcBuckets+1307,0,0,0,funcBuckets+1308,0,0,
  0,0,funcBuckets+1309,0,funcBuckets+1310,0,0,0,
  0,funcBuckets+1311,0,funcBuckets+1312,0,0,funcBuckets+1313,0,
  0,0,funcBuckets+1315,0,0,funcBuckets+1316,funcBuckets+1317,0,
  0,0,0,funcBuckets+1318,funcBuckets+1319,0,0,0,
  0,funcBuckets+1320,0,0,0,funcBuckets+1321,0,0,
  0,0,0,0,0,0,funcBuckets+1322,0,
  0,0,0,0,funcBuckets+1323,0,0,0,
  funcBuckets+1324,0,0,funcBuckets+1325,0,0,0,funcBuckets+1326,
  funcBuckets+1327,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1328,0,funcBuckets+1329,0,0,
  0,0,funcBuckets+1330,funcBuckets+1331,funcBuckets+1332,0,0,funcBuckets+1333,
  0,funcBuckets+1335,0,0,funcBuckets+1336,0,0,0,
  0,0,0,funcBuckets+1338,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+1339,0,0,0,0,0,funcBuckets+1340,0,
  0,0,funcBuckets+1341,0,0,0,0,0,
  funcBuckets+1342,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+1343,funcBuckets+1344,funcBuckets+1347,0,
  0,funcBuckets+1348,0,funcBuckets+1349,funcBuckets+1350,0,0,0,
  0,funcBuckets+1351,funcBuckets+1352,0,0,funcBuckets+1353,0,0,
  0,funcBuckets+1354,funcBuckets+1355,funcBuckets+1356,0,0,funcBuckets+1357,funcBuckets+1358,
  0,0,funcBuckets+1359,0,funcBuckets+1360,0,funcBuckets+1361,0,
  funcBuckets+1362,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1363,0,0,funcBuckets+1364,0,
  0,0,0,0,funcBuckets+1366,0,funcBuckets+1367,funcBuckets+1368,
  0,0,0,0,0,0,0,0,
  funcBuckets+1369,0,0,funcBuckets+1370,0,0,funcBuckets+1371,0,
  0,0,funcBuckets+1372,funcBuckets+1374,0,0,0,funcBuckets+1375,
  0,0,0,0,funcBuckets+1376,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1377,0,0,0,0,0,
  0,funcBuckets+1378,funcBuckets+1379,0,funcBuckets+1382,0,0,funcBuckets+1383,
  funcBuckets+1384,0,funcBuckets+1386,0,0,0,0,0,
  0,funcBuckets+1387,0,0,0,0,0,0,
  0,0,funcBuckets+1388,funcBuckets+1389,0,funcBuckets+1390,0,0,
  0,0,0,funcBuckets+1391,0,0,0,0,
  0,0,0,funcBuckets+1393,0,0,funcBuckets+1394,funcBuckets+1395,
  0,0,0,funcBuckets+1396,0,0,funcBuckets+1397,0,
  0,0,0,0,funcBuckets+1398,funcBuckets+1399,0,0,
  0,0,0,funcBuckets+1400,0,funcBuckets+1401,0,funcBuckets+1403,
  0,funcBuckets+1404,0,0,0,0,0,0,
  funcBuckets+1405,funcBuckets+1406,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1407,0,
  0,funcBuckets+1408,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+1409,0,funcBuckets+1410,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1411,0,funcBuckets+1412,funcBuckets+1414,0,funcBuckets+1416,
  0,0,0,0,0,0,0,funcBuckets+1417,
  funcBuckets+1418,funcBuckets+1420,0,0,funcBuckets+1421,0,funcBuckets+1422,funcBuckets+1423,
  0,funcBuckets+1424,funcBuckets+1425,0,0,funcBuckets+1426,0,0,
  0,funcBuckets+1427,funcBuckets+1428,funcBuckets+1429,0,funcBuckets+1430,0,0,
  0,0,0,funcBuckets+1432,0,funcBuckets+1433,0,funcBuckets+1434,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1436,0,0,
  0,funcBuckets+1437,0,0,0,0,0,funcBuckets+1438,
  funcBuckets+1440,funcBuckets+1441,0,funcBuckets+1442,0,0,funcBuckets+1443,funcBuckets+1445,
  0,0,funcBuckets+1446,0,0,funcBuckets+1447,0,0,
  0,0,0,0,funcBuckets+1448,funcBuckets+1449,0,0,
  funcBuckets+1450,0,0,0,0,funcBuckets+1451,0,0,
  0,funcBuckets+1452,0,0,0,0,funcBuckets+1453,0,
  funcBuckets+1454,0,funcBuckets+1458,0,0,0,0,funcBuckets+1459,
  funcBuckets+1460,0,0,funcBuckets+1461,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1462,0,
  0,0,funcBuckets+1463,0,funcBuckets+1464,funcBuckets+1465,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+1466,
  funcBuckets+1467,0,0,0,0,0,0,0,
  0,funcBuckets+1468,0,funcBuckets+1469,funcBuckets+1470,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1471,0,0,funcBuckets+1472,0,0,
  0,0,0,0,funcBuckets+1473,0,0,funcBuckets+1474,
  0,funcBuckets+1475,funcBuckets+1476,0,0,funcBuckets+1478,funcBuckets+1479,funcBuckets+1480,
  0,funcBuckets+1482,0,0,funcBuckets+1483,0,funcBuckets+1484,0,
  0,0,0,funcBuckets+1485,funcBuckets+1486,0,0,0,
  0,0,0,funcBuckets+1487,funcBuckets+1488,funcBuckets+1489,0,funcBuckets+1490,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1491,0,funcBuckets+1492,0,0,0,
  0,0,0,funcBuckets+1494,0,0,funcBuckets+1495,0,
  0,0,0,0,0,0,0,funcBuckets+1496,
  0,funcBuckets+1497,0,0,funcBuckets+1498,0,0,funcBuckets+1499,
  0,0,0,0,0,0,funcBuckets+1502,0,
  0,0,funcBuckets+1503,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1504,funcBuckets+1505,0,0,0,0,
  funcBuckets+1506,funcBuckets+1507,0,0,funcBuckets+1508,0,0,0,
  0,0,0,0,funcBuckets+1509,0,0,funcBuckets+1510,
  0,0,funcBuckets+1511,funcBuckets+1512,0,funcBuckets+1514,funcBuckets+1515,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1516,0,0,0,0,0,0,
  0,funcBuckets+1517,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+1519,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1520,0,0,
  0,0,funcBuckets+1521,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1522,0,0,
  funcBuckets+1524,0,0,funcBuckets+1525,funcBuckets+1526,0,funcBuckets+1527,funcBuckets+1528,
  funcBuckets+1529,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1530,0,0,
  0,funcBuckets+1531,0,0,funcBuckets+1533,funcBuckets+1534,0,0,
  0,funcBuckets+1535,0,0,0,0,0,0,
  funcBuckets+1536,0,0,0,funcBuckets+1538,0,0,funcBuckets+1539,
  0,0,0,0,funcBuckets+1540,0,0,funcBuckets+1541,
  0,0,0,0,0,0,funcBuckets+1543,funcBuckets+1544,
  0,0,0,0,0,0,funcBuckets+1545,0,
  0,0,0,0,0,0,funcBuckets+1546,funcBuckets+1547,
  0,0,0,0,0,funcBuckets+1548,0,0,
  0,0,0,0,0,0,funcBuckets+1549,funcBuckets+1550,
  0,0,funcBuckets+1551,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1552,0,0,0,funcBuckets+1553,
  0,0,0,funcBuckets+1554,funcBuckets+1555,funcBuckets+1556,0,0,
  0,0,funcBuckets+1557,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1558,0,funcBuckets+1559,
  0,0,0,funcBuckets+1560,0,funcBuckets+1561,funcBuckets+1562,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+1563,
  0,0,funcBuckets+1564,funcBuckets+1566,0,0,0,funcBuckets+1567,
  0,0,0,0,0,funcBuckets+1568,0,0,
  0,0,funcBuckets+1571,0,0,0,funcBuckets+1572,0,
  0,0,0,0,0,funcBuckets+1573,0,0,
  funcBuckets+1574,0,funcBuckets+1575,0,0,0,0,funcBuckets+1576,
  0,funcBuckets+1577,funcBuckets+1578,0,funcBuckets+1579,funcBuckets+1580,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1581,0,0,funcBuckets+1582,0,0,funcBuckets+1584,
  0,0,0,0,0,funcBuckets+1585,funcBuckets+1586,0,
  funcBuckets+1587,0,0,funcBuckets+1588,0,0,0,0,
  0,funcBuckets+1589,0,0,0,0,0,0,
  0,funcBuckets+1590,0,0,funcBuckets+1591,0,0,0,
  0,0,0,funcBuckets+1592,0,funcBuckets+1593,0,0,
  0,0,0,0,funcBuckets+1595,funcBuckets+1596,0,funcBuckets+1597,
  funcBuckets+1598,0,0,0,0,0,0,0,
  funcBuckets+1599,0,0,0,0,0,funcBuckets+1600,funcBuckets+1601,
  0,funcBuckets+1602,0,0,0,funcBuckets+1603,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1604,0,0,0,0,0,
  0,funcBuckets+1605,0,0,0,0,0,0,
  0,funcBuckets+1606,funcBuckets+1607,funcBuckets+1608,0,0,0,0,
  0,funcBuckets+1609,0,0,0,0,0,0,
  0,0,0,funcBuckets+1610,funcBuckets+1612,0,0,0,
  0,0,0,0,0,funcBuckets+1613,funcBuckets+1615,0,
  0,0,0,0,0,funcBuckets+1616,funcBuckets+1618,0,
  funcBuckets+1619,0,0,0,0,funcBuckets+1620,funcBuckets+1621,0,
  0,0,0,funcBuckets+1622,0,0,0,0,
  0,0,0,funcBuckets+1623,funcBuckets+1624,funcBuckets+1625,0,funcBuckets+1626,
  funcBuckets+1627,0,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1628,0,
  0,0,0,funcBuckets+1629,0,funcBuckets+1630,0,funcBuckets+1631,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1632,0,0,0,funcBuckets+1633,funcBuckets+1634,funcBuckets+1635,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1636,0,0,0,0,0,0,
  0,funcBuckets+1637,0,0,0,0,funcBuckets+1638,funcBuckets+1639,
  0,funcBuckets+1640,0,0,0,0,0,0,
  0,funcBuckets+1641,0,0,0,0,0,0,
  0,funcBuckets+1642,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+1643,0,0,funcBuckets+1644,
  0,0,0,0,0,funcBuckets+1645,0,funcBuckets+1646,
  funcBuckets+1647,0,funcBuckets+1648,funcBuckets+1649,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1651,funcBuckets+1652,0,0,funcBuckets+1653,0,
  funcBuckets+1654,funcBuckets+1655,funcBuckets+1657,0,0,funcBuckets+1658,0,0,
  0,0,0,funcBuckets+1659,funcBuckets+1660,0,0,funcBuckets+1661,
  funcBuckets+1662,0,0,0,0,funcBuckets+1663,0,0,
  0,funcBuckets+1664,0,0,0,0,0,0,
  0,funcBuckets+1665,0,0,0,0,funcBuckets+1666,0,
  funcBuckets+1667,0,0,0,funcBuckets+1668,funcBuckets+1669,0,0,
  funcBuckets+1671,0,0,funcBuckets+1672,funcBuckets+1673,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+1675,0,0,0,
  0,funcBuckets+1676,0,0,0,0,funcBuckets+1677,0,
  0,funcBuckets+1678,0,0,0,0,funcBuckets+1679,0,
  0,funcBuckets+1680,0,funcBuckets+1681,0,0,0,funcBuckets+1682,
  0,funcBuckets+1683,0,0,0,0,funcBuckets+1684,0,
  0,0,0,0,0,0,0,funcBuckets+1685,
  funcBuckets+1686,0,0,funcBuckets+1688,funcBuckets+1689,0,0,0,
  funcBuckets+1691,0,0,0,0,0,0,0,
  funcBuckets+1692,0,0,0,0,0,0,funcBuckets+1693,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1694,0,0,
  0,funcBuckets+1695,0,0,0,0,0,funcBuckets+1697,
  0,funcBuckets+1699,funcBuckets+1700,funcBuckets+1701,funcBuckets+1702,0,0,0,
  funcBuckets+1703,0,0,0,0,0,funcBuckets+1704,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+1705,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1706,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+1707,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1708,0,0,
  0,0,0,0,funcBuckets+1709,0,0,0,
  0,0,funcBuckets+1710,0,0,0,0,0,
  0,0,0,funcBuckets+1711,0,0,0,0,
  0,funcBuckets+1712,0,0,0,0,0,0,
  0,funcBuckets+1714,0,0,funcBuckets+1715,0,0,funcBuckets+1716,
  0,0,0,funcBuckets+1718,0,0,0,0,
  0,0,0,0,0,funcBuckets+1719,0,funcBuckets+1721,
  funcBuckets+1722,0,funcBuckets+1723,0,0,funcBuckets+1724,0,0,
  0,0,0,0,0,0,funcBuckets+1726,0,
  0,0,0,0,0,0,0,funcBuckets+1727,
  funcBuckets+1728,funcBuckets+1729,0,funcBuckets+1730,funcBuckets+1731,0,0,0,
  0,0,0,funcBuckets+1732,0,0,0,0,
  0,0,0,0,funcBuckets+1733,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1734,0,0,0,0,funcBuckets+1735,
  0,funcBuckets+1736,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+1738,0,funcBuckets+1739,funcBuckets+1740,0,0,0,0,
  funcBuckets+1741,0,0,funcBuckets+1742,0,funcBuckets+1743,funcBuckets+1745,0,
  funcBuckets+1746,0,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1747,0,
  0,0,0,0,funcBuckets+1748,0,0,0,
  0,0,0,0,funcBuckets+1749,funcBuckets+1750,0,funcBuckets+1751,
  0,0,0,0,0,0,funcBuckets+1752,funcBuckets+1753,
  funcBuckets+1754,funcBuckets+1756,funcBuckets+1757,0,0,0,0,0,
  0,0,0,0,funcBuckets+1758,0,0,0,
  0,0,funcBuckets+1759,funcBuckets+1760,0,0,0,0,
  0,0,funcBuckets+1761,0,0,funcBuckets+1762,0,0,
  0,0,0,0,0,0,0,funcBuckets+1763,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1764,funcBuckets+1765,funcBuckets+1766,0,0,0,funcBuckets+1767,
  funcBuckets+1768,0,0,0,0,funcBuckets+1769,0,0,
  0,0,0,0,funcBuckets+1770,0,0,0,
  0,0,0,0,funcBuckets+1771,0,0,funcBuckets+1772,
  funcBuckets+1773,0,0,funcBuckets+1774,0,funcBuckets+1775,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1777,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+1778,0,0,0,
  funcBuckets+1780,0,0,funcBuckets+1781,0,0,funcBuckets+1782,funcBuckets+1783,
  0,0,funcBuckets+1784,0,0,funcBuckets+1786,0,funcBuckets+1787,
  0,0,0,0,0,0,funcBuckets+1788,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1790,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1791,0,
  funcBuckets+1792,funcBuckets+1794,0,funcBuckets+1795,0,0,0,0,
  0,funcBuckets+1796,funcBuckets+1797,0,0,funcBuckets+1798,0,0,
  0,0,0,0,0,funcBuckets+1799,0,0,
  0,0,funcBuckets+1800,funcBuckets+1801,0,funcBuckets+1802,0,0,
  funcBuckets+1803,0,0,funcBuckets+1804,funcBuckets+1805,0,0,0,
  0,0,funcBuckets+1806,funcBuckets+1807,funcBuckets+1808,funcBuckets+1809,0,funcBuckets+1810,
  0,funcBuckets+1811,funcBuckets+1812,0,0,funcBuckets+1813,0,funcBuckets+1814,
  0,0,0,0,0,funcBuckets+1815,0,funcBuckets+1816,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1817,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+1818,
  0,0,0,0,0,0,0,funcBuckets+1819,
  0,0,0,0,funcBuckets+1821,funcBuckets+1822,0,0,
  0,funcBuckets+1823,0,0,0,funcBuckets+1825,0,0,
  0,0,0,funcBuckets+1826,0,funcBuckets+1827,funcBuckets+1828,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1829,0,funcBuckets+1830,funcBuckets+1831,0,
  funcBuckets+1832,0,0,0,funcBuckets+1833,0,funcBuckets+1834,0,
  funcBuckets+1835,0,0,0,funcBuckets+1836,funcBuckets+1837,funcBuckets+1838,0,
  0,funcBuckets+1839,0,funcBuckets+1840,0,0,0,0,
  0,0,funcBuckets+1841,0,funcBuckets+1842,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+1843,
  funcBuckets+1844,0,0,0,funcBuckets+1845,0,funcBuckets+1846,0,
  funcBuckets+1847,0,0,0,0,0,funcBuckets+1848,0,
  0,0,funcBuckets+1849,0,funcBuckets+1850,0,0,0,
  0,0,0,funcBuckets+1851,funcBuckets+1852,0,0,funcBuckets+1853,
  funcBuckets+1854,funcBuckets+1855,funcBuckets+1856,0,funcBuckets+1857,0,0,funcBuckets+1858,
  funcBuckets+1859,0,0,0,funcBuckets+1860,funcBuckets+1861,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+1862,0,0,
  0,0,0,0,0,funcBuckets+1863,0,funcBuckets+1864,
  0,funcBuckets+1865,0,0,0,0,0,0,
  funcBuckets+1866,0,0,funcBuckets+1867,0,0,0,0,
  0,funcBuckets+1868,0,0,0,funcBuckets+1869,funcBuckets+1870,funcBuckets+1871,
  0,funcBuckets+1873,0,0,funcBuckets+1874,funcBuckets+1875,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,funcBuckets+1876,0,funcBuckets+1877,funcBuckets+1878,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1879,funcBuckets+1880,0,0,0,0,funcBuckets+1881,
  0,0,0,0,funcBuckets+1882,0,0,0,
  0,0,funcBuckets+1883,0,0,0,funcBuckets+1884,0,
  funcBuckets+1885,0,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1887,0,
  0,0,0,0,0,0,0,funcBuckets+1888,
  0,0,funcBuckets+1889,0,0,funcBuckets+1890,funcBuckets+1891,0,
  funcBuckets+1892,0,funcBuckets+1894,0,funcBuckets+1895,0,0,0,
  funcBuckets+1896,0,0,0,0,0,funcBuckets+1897,0,
  funcBuckets+1898,funcBuckets+1899,0,0,0,0,0,0,
  0,0,0,funcBuckets+1900,funcBuckets+1902,0,0,0,
  funcBuckets+1904,funcBuckets+1906,0,0,funcBuckets+1907,0,0,funcBuckets+1908,
  0,funcBuckets+1909,0,0,funcBuckets+1910,0,0,0,
  0,0,funcBuckets+1911,0,0,0,0,0,
  funcBuckets+1912,0,funcBuckets+1913,0,0,0,0,0,
  0,0,funcBuckets+1914,0,0,0,0,funcBuckets+1915,
  0,0,0,0,funcBuckets+1916,0,funcBuckets+1917,funcBuckets+1918,
  0,funcBuckets+1919,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,funcBuckets+1920,funcBuckets+1921,0,0,0,0,
  funcBuckets+1922,0,0,0,funcBuckets+1923,0,funcBuckets+1924,0,
  0,0,0,0,0,0,funcBuckets+1925,0,
  0,0,0,funcBuckets+1926,0,0,0,0,
  funcBuckets+1927,0,0,0,0,0,0,funcBuckets+1928,
  funcBuckets+1929,funcBuckets+1930,0,0,0,0,funcBuckets+1931,0,
  0,funcBuckets+1932,0,0,0,0,0,funcBuckets+1934,
  funcBuckets+1935,0,0,0,0,0,0,0,
  0,funcBuckets+1936,0,0,funcBuckets+1937,0,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1938,0,0,0,funcBuckets+1939,0,0,
  0,0,0,0,0,0,0,0,
  0,funcBuckets+1940,0,funcBuckets+1941,0,0,0,0,
  0,0,funcBuckets+1942,funcBuckets+1943,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1944,0,
  funcBuckets+1945,funcBuckets+1946,0,0,0,0,0,funcBuckets+1947,
  0,0,0,0,0,0,0,0,
  funcBuckets+1949,0,funcBuckets+1950,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1951,funcBuckets+1953,
  0,funcBuckets+1954,0,funcBuckets+1955,funcBuckets+1956,funcBuckets+1957,0,0,
  0,0,funcBuckets+1958,0,0,0,0,0,
  0,0,0,0,funcBuckets+1959,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+1960,
  0,0,funcBuckets+1961,funcBuckets+1962,0,0,0,0,
  0,0,0,funcBuckets+1964,0,0,funcBuckets+1965,funcBuckets+1966,
  0,0,0,0,0,0,funcBuckets+1967,0,
  0,funcBuckets+1968,0,0,funcBuckets+1969,funcBuckets+1970,0,0,
  funcBuckets+1971,0,funcBuckets+1973,0,funcBuckets+1974,0,0,0,
  0,0,funcBuckets+1975,0,0,0,funcBuckets+1976,0,
  0,0,0,0,0,funcBuckets+1977,0,0,
  funcBuckets+1978,0,funcBuckets+1979,0,0,0,0,0,
  0,0,funcBuckets+1980,0,0,0,0,funcBuckets+1981,
  funcBuckets+1983,0,0,0,0,0,0,0,
  0,funcBuckets+1984,funcBuckets+1985,0,0,funcBuckets+1987,funcBuckets+1988,0,
  0,funcBuckets+1991,0,0,0,0,0,funcBuckets+1992,
  0,0,0,0,0,funcBuckets+1993,0,0,
  funcBuckets+1994,0,0,0,0,0,0,0,
  funcBuckets+1995,funcBuckets+1996,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+1997,0,
  0,0,0,funcBuckets+1998,funcBuckets+1999,0,0,funcBuckets+2000,
  funcBuckets+2001,0,0,funcBuckets+2002,0,0,0,0,
  0,0,funcBuckets+2003,funcBuckets+2004,0,0,0,0,
  0,funcBuckets+2005,0,0,0,0,0,0,
  0,funcBuckets+2006,0,0,0,0,0,0,
  funcBuckets+2007,0,0,0,0,funcBuckets+2008,0,0,
  funcBuckets+2009,0,funcBuckets+2012,0,0,funcBuckets+2013,funcBuckets+2014,0,
  funcBuckets+2015,funcBuckets+2016,funcBuckets+2017,funcBuckets+2018,0,0,0,0,
  0,funcBuckets+2019,0,funcBuckets+2020,0,0,0,0,
  0,0,funcBuckets+2021,0,0,funcBuckets+2023,0,0,
  0,funcBuckets+2024,0,funcBuckets+2025,funcBuckets+2026,0,0,0,
  funcBuckets+2027,0,0,funcBuckets+2028,0,0,funcBuckets+2029,0,
  0,0,0,0,0,funcBuckets+2030,0,funcBuckets+2031,
  0,0,0,0,0,0,0,funcBuckets+2032,
  0,0,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+2033,0,0,funcBuckets+2035,
  0,0,0,funcBuckets+2037,funcBuckets+2038,0,0,funcBuckets+2039,
  funcBuckets+2040,0,funcBuckets+2041,funcBuckets+2042,0,0,funcBuckets+2043,0,
  0,0,funcBuckets+2045,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+2046,0,0,
  0,0,funcBuckets+2047,0,funcBuckets+2048,funcBuckets+2050,0,funcBuckets+2051,
  0,funcBuckets+2052,0,funcBuckets+2053,0,0,0,0,
  0,0,0,0,0,funcBuckets+2054,0,0,
  funcBuckets+2055,0,0,0,0,funcBuckets+2056,0,0,
  0,0,0,0,0,0,funcBuckets+2057,0,
  0,0,funcBuckets+2058,0,0,0,0,0,
  0,0,0,0,funcBuckets+2059,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+2060,
  0,0,0,funcBuckets+2061,0,0,0,0,
  0,0,0,funcBuckets+2062,0,0,funcBuckets+2063,0,
  0,0,funcBuckets+2064,0,0,0,0,0,
  0,funcBuckets+2065,0,funcBuckets+2066,funcBuckets+2067,0,funcBuckets+2068,0,
  0,0,funcBuckets+2069,0,0,0,funcBuckets+2070,0,
  0,funcBuckets+2071,funcBuckets+2072,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+2073,0,
  0,0,0,funcBuckets+2074,0,0,0,funcBuckets+2075,
  0,0,0,funcBuckets+2076,0,0,0,0,
  funcBuckets+2077,0,0,funcBuckets+2078,0,0,0,0,
  0,0,0,funcBuckets+2079,0,0,0,0,
  0,0,0,funcBuckets+2080,funcBuckets+2081,0,0,funcBuckets+2082,
  0,funcBuckets+2083,funcBuckets+2084,0,0,funcBuckets+2085,0,0,
  funcBuckets+2086,0,funcBuckets+2087,0,0,funcBuckets+2088,0,funcBuckets+2089,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+2090,0,
  funcBuckets+2091,funcBuckets+2092,funcBuckets+2093,funcBuckets+2094,0,0,0,0,
  0,funcBuckets+2095,0,funcBuckets+2096,funcBuckets+2098,0,0,0,
  funcBuckets+2099,0,0,0,funcBuckets+2100,0,0,0,
  funcBuckets+2101,0,funcBuckets+2102,0,0,0,0,0,
  0,funcBuckets+2103,0,funcBuckets+2104,0,0,0,0,
  funcBuckets+2105,funcBuckets+2106,funcBuckets+2107,0,0,0,0,0,
  0,0,0,0,0,0,0,funcBuckets+2108,
  0,funcBuckets+2110,0,funcBuckets+2111,0,0,0,0,
  0,0,0,funcBuckets+2112,0,0,0,funcBuckets+2113,
  0,funcBuckets+2114,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+2116,0,0,0,
  0,0,funcBuckets+2118,0,0,0,0,0,
  0,funcBuckets+2120,0,0,0,0,0,0,
  0,0,0,0,funcBuckets+2121,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,funcBuckets+2122,0,0,
  funcBuckets+2123,0,0,funcBuckets+2124,0,funcBuckets+2125,0,0,
  0,0,0,0,funcBuckets+2126,0,0,0,
  0,0,0,funcBuckets+2128,funcBuckets+2129,0,0,0,
  0,0,funcBuckets+2130,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+2131,0,
  funcBuckets+2132,0,0,0,funcBuckets+2133,0,funcBuckets+2134,0,
  0,0,0,funcBuckets+2135,0,0,funcBuckets+2136,funcBuckets+2137,
  0,funcBuckets+2138,0,0,0,funcBuckets+2139,0,funcBuckets+2140,
  funcBuckets+2141,0,funcBuckets+2142,0,0,funcBuckets+2143,0,0,
  0,0,0,0,funcBuckets+2144,0,funcBuckets+2145,0,
  0,0,0,0,0,0,funcBuckets+2146,0,
  0,funcBuckets+2147,0,0,0,0,0,funcBuckets+2148,
  funcBuckets+2149,0,0,0,0,0,0,0,
  0,funcBuckets+2150,funcBuckets+2151,0,0,0,0,0,
  0,0,0,0,0,0,funcBuckets+2152,0,
  funcBuckets+2153,0,0,0,0,0,funcBuckets+2154,0,
  funcBuckets+2155,0,0,0,0,funcBuckets+2156,funcBuckets+2157,0,
  0,0,0,0,0,0,0,0,
  funcBuckets+2159,0,0,funcBuckets+2160,0,0,0,funcBuckets+2161,
  0,0,0,0,0,0,funcBuckets+2162,0,
  0,0,funcBuckets+2163,funcBuckets+2164,0,0,0,0,

};
static inline const hashNodeFunc *findFunc(const char *name, int64 hash) {
  const hashNodeFunc *p = funcMapTable[hash & 8191];
  if (UNLIKELY(!p)) return NULL;
  do {
    if (LIKELY(p->hash == hash) && (LIKELY(p->name==name)||LIKELY(!strcasecmp(p->name, name)))) return p;
  } while (!p++->end);
  return NULL;
}

bool get_call_info_builtin(const CallInfo *&ci, void *&extra, const char *s, int64 hash) {
  extra = NULL;
  if (hash < 0) hash = hash_string(s);
  const hashNodeFunc *p = findFunc(s, hash);
  if (LIKELY(p!=0)) {
    ci = (const CallInfo *)p->data;
    return true;
  }
  return false;
}

///////////////////////////////////////////////////////////////////////////////
}
